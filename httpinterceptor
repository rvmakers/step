import { Injectable } from '@angular/core';
import {
  Http,
  ConnectionBackend,
  RequestOptions,
  RequestOptionsArgs,
  Response,
  Headers,
  Request
} from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/Rx';
import { environment } from '../../environments/environment';
import { HttpErrorResponse } from '@angular/common/http';
import { HttpRequest } from 'selenium-webdriver/http';



@Injectable()
export class HttpInterCeptor extends Http {

  constructor(
    backend: ConnectionBackend,
    defaultOptions: RequestOptions

  ) {
    super(backend, defaultOptions);

   
  }

  /**
   * Performs a request with `get` http method.
   * @param url
   * @param options
   * @returns {Observable<>}
   */
  get(url: string, options?: RequestOptionsArgs): Observable<any> {
    this.beforeRequest();
    
       return super.get(this.getFullUrl(url), this.requestOptions(options))
       .catch(this.onCatch)
       .do((res: Response) => {
         this.onSuccess(res);

      }).finally(() => {
        this.onFinally();
      });
    
    
    
    
  }
    

  post(url: string, body: any, options?: RequestOptionsArgs): Observable<any> {   
    
     this.beforeRequest();
     return super.post(this.getFullUrl(url),body, this.requestOptions(options))
       .catch(this.onCatch)
       .do((res: Response) => {
         this.onSuccess(res);
       }, (error: any) => {
         this.onError(error);
       })
       .finally(() => {
         this.onFinally();
       });
 }
     
 
  /**
   * Request options.
   * @param options
   * @returns {RequestOptionsArgs}
   */
  private requestOptions(options?: RequestOptionsArgs): RequestOptionsArgs {
    
   
      if (options == null) {
        options = new RequestOptions();
      }
      if (options.headers == null) {
        options.headers = new Headers({
          
          'Authorization': 'Bearer '+ sessionStorage.getItem('auth-token')
        });
      }else{
        options.headers.append('Authorization', 'Bearer '+ sessionStorage.getItem('auth-token'))
      }
     
 
  return options;
    
  }

  /**
   * Build API url.
   * @param url
   * @returns {string}
   */
  private getFullUrl(url: string): string {
    return  url;
  }

  /**
   * Before any Request.
   */
  private beforeRequest(options?: RequestOptionsArgs): void {
    
    
  }
 
  /**
   * After any request.
   */
  private afterRequest(): void {
    
  }

  /**
   * Error handler.
   * @param error
   * @param caught
   * @returns {ErrorObservable}
   */
  private onCatch(error: any, caught: Observable<any>): Observable<any> {
   
    return Observable.throw(error);
  }

  /**
   * onSuccess
   * @param res
   */
  private onSuccess(res: Response): void {
    
  }

  /**
   * onError
   * @param error
   */
  private onError(error: any): void {
    
  }

  /**
   * onFinally
   */
  private onFinally(): void {
    this.afterRequest();
  }
}
