<style>
  html {
    display: none;
  }
</style>
<script>
  if (self === top) {
    document.documentElement.style.display = 'block';
  }
  else {
    top.location = self.location;
  }
</script>
<div class="wraper">
  <div class="row">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 ">
      <div class="posr">
        <ol class="breadcrumb">
          <li class="active">
            <a href="#" class="color-compact">Home</a>
          </li>
          <li class="font-14">Presales</li>
          <li class="font-14">Stage</li>
        </ol>
        <div class="posr">
          <p class="page-header">
            {{title}}
            <span>
              <img [src]="info" id="info" />
            </span>
          </p>
          <div class="abs infoblock" id="infor">
            <ul class="infor">
              <li>
                On Submission of data in Stagewise Data Capture you will be redirected to Presales Inbox
              </li>
              <li>
                Only Deal Owner,Presales Lead and Geo Sales Owner can Update the Key Details
              </li>
              <li>
                Opportunities in Stage Wise data capture can be modified only by Account Sales Owner, Geography Sales Owner, Deal Owner,
                Offshore Presales Lead, Onsite Owner and Solution Team member.
              </li>
            </ul>
          </div>
        </div>
        <div class="abs stage">
          <div>
            <p>Deal</p>
            <img [src]="deal" class="center-block img-responsive">
          </div>
          <div class="posr" id="stagetog">
            <span>Stage</span>
            <span>
              <img [src]="downarrow" class="img-responsive">
            </span>
            <div class="stages">
              <span id="stagenumber">
              </span>
              <span id="stagename">
              </span>
            </div>
            <ul id="name" [ngClass]="disableStage=='true'?'enterleave disabled':'enterleave'">
              <li *ngFor="let item of dealStageList|slice:10:14; let first = first;" [ngClass]="{active: first}" (click)="DealStageChange(item)">
                <span>{{item.StageID}}</span>
                <p *ngIf="item.StageID<10">{{item.STAGE_NAME|slice:2}}</p>
                <p *ngIf="item.StageID>=10">{{item.STAGE_NAME|slice:3}}</p>
              </li>
            </ul>
          </div>
          <div class="posr" id="categorytog">
            <span style="top:11px;">Category</span>
            <span>
              <img [src]="downarrow" class="img-responsive">
            </span>
            <div style="pointer-events: none;opacity: 0.4;" class="stages">
              <span id="categorynumber">
              </span>
            </div>
            <ul id="catname" class="enterleave">
              <li *ngFor="let item of dealCategoryList" (click)="DealCategoryChange(item)">
                <p [hidden]="true">{{item.DealCategoryId}}</p>
                <p>{{item.DealCategoryName}}</p>
              </li>
            </ul>
          </div>
          <div class="posr oppid">
            <label>Opportunity Id</label>
            <span style="color:green;font-size:15px;">{{opportunityId}}</span>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div [hidden]="lblError0 =='' ">
    <div style="margin-left:-1%" [ngClass]="lblError0=='Success'?'alert alert-success':lblError0=='Danger'?'alert alert-danger':''">
      <p class="text-center" style="text-align:left;margin-left:5%" [innerHtml]='successMessage' for="messages">{{successMessage}}</p>
    </div>
  </div>
  <!-- page content start -->
  <div class="row mar-top-20">
    <div class="col-md-12">
      <mat-horizontal-stepper [linear]="isLinear" #stepper>
        <mat-step label="Primary Information">
          <div class="step-content">

            <div class="row margin-zero">
              <div class="col-md-3">
                <div class="form-group">
                  <label for="name">
                    Customer Name
                    <span style="color: #ff0000">*</span>
                  </label>
                  <input type="text" [(ngModel)]="txtCustomerName" name="txtCustomerName" [attr.disabled]="disablecustomername?'':null" class="form-control" />
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Proactive Proposal
                    <span style="color: #ff0000">*</span>
                  </label>
                  <br>
                  <div class="btn-group btn-toggle pull-left" id="yesno" style="margin: 4px;">
                    <button (click)="ActiveProactiveProposal()" id='proactiveProposalY' class="btn btn-default" [disabled]="disableAllFields">Proactive</button>
                    <button (click)="InActiveProactiveProposal()" id='proactiveProposalN' class="btn btn-default" [disabled]="disableAllFields">Reactive</button>
                  </div>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Opportunity Tracked By
                    <span style="color: #ff0000">*</span>
                  </label>
                  <br>
                  <div class="btn-group btn-toggle pull-left" id="yesno" style="margin: 4px;">
                    <button (click)="ActiveTrackedBy()" id='TrackedByYes' class="btn btn-default" [disabled]="disableAllFields">Presales</button>
                    <button (click)="InActiveTrackedBy()" id='TrackedByNo' class="btn btn-default" [disabled]="disableAllFields">Delivery</button>
                  </div>
                </div>
              </div>
              <div class="col-md-3 ">
                <div class="form-group ">
                  <label for="createdby" class="disb">Contract Renewal</label>
                  <br>
                  <div class="btn-group btn-toggle">
                    <button [disabled]="disableContractRenewal" id="ContractRenewalActive" class="btn btn-default">Yes</button>
                    <button [disabled]="disableContractRenewal"  id="ContractRenewalInActive" class="btn btn-default">No</button>
                  </div>
                </div>
              </div>


            </div>
            <div class="row margin-zero">
              <div class="col-md-3 " *ngIf="contractRenewal=='Yes'">
                <div class="form-group">
                  <label> Renewal TCV(USD)</label>
                  <input type="text" placeholder="TCV(USD)" (keypress)="AllowDecimal($event)" maxlength="13" [(ngModel)]="ContractRenewalValue"
                         [disabled]="disabledContractRenewal" id="ContractRenewalValue" class="form-control" [disabled]="disableAllFields" (keyup)="FormatInputTCV($event)">
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label [(ngModel)]="lblOpportunityDescription">
                    Opportunity Scope
                    <span style="color: #ff0000">
                      *

                    </span>
                  </label>
                  <textarea [(ngModel)]="opportunityDescription" style="width:100%;" name="opportunityDescription"
                            required (keypress)="AllowPatternWithComma($event)" id="OpportunityDesc" maxlength="500" rows="4" cols="45"
                            [disabled]="disableAllFields"></textarea>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    Opportunity Description Details
                    <span style="color: #ff0000">*</span>
                  </label>
                  <textarea [(ngModel)]="opportunityDescDetails" style="width:100%;" name="opportunityDescription" (keypress)="AllowPatternWithComma($event)"
                            id="OpportunityDesc" maxlength="500" rows="4" cols="45"></textarea>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>RPM TCV(USD)</label>
                  <input type="text" [(ngModel)]="totalContractValue" id="totalContractValue" name="totalContractValue" placeholder="TCV(USD)"
                         (keypress)="AllowDecimal($event)" maxlength="13" class="form-control" [disabled]="disableAllFields"
                         (keyup)="FormatInputTCV($event)" />
                </div>
              </div>

            </div>

            <div class="row margin-zero">
              <div class="col-md-3">
                <div class="form-group">
                  <label for="date">Opp Recieved Date </label>
                  <my-date-picker name="ToDate" [options]="myDatePickerOptions" [disabled]="disable" [(ngModel)]="oppDate" required [disabled]="disableAllFields"></my-date-picker>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label for="date">Expected Deal Closure On / After</label>
                  <my-date-picker name="ToDate" [options]="myDatePickerOptions" [(ngModel)]="expectedDealClosure" (ngModelChange)="ChangeFYQTR($event)"
                                  required [disabled]="disableAllFields"></my-date-picker>
                </div>
              </div>

              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Expected Revenue Qtr - FY
                    <span style="color: #ff0000">*</span>
                  </label>
                  <div>
                    <select [(ngModel)]="expectedRevenueQtrYr" class="form-control" [disabled]="disableAllFields">
                      <option value="0">--Select--</option>
                      <option *ngFor="let item of expectedRevenueQtrYrList" value={{item.FiscalYear}}>{{item.FiscalYear}}</option>
                    </select>
                  </div>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    IOU Name
                    <span style="color: #ff0000">*</span>
                  </label>
                  <app-ddliou [(ngModel)]="iou" [iou]="iou" [disableIOU]="disableIOU" [iouList]="iouList" (ngModelChange)="GetSubIOU()"></app-ddliou>
                </div>
              </div>
            </div>
            <div class="row margin-zero">
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    SUB IOU
                    <span style="color: #ff0000">*</span>
                  </label>
                  <app-ddl-sub-iou [subiou]="subiou" [disableSubIOU]="disableSubIOU" [subiouList]="subiouList"></app-ddl-sub-iou>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Vertical
                    <span style="color: #ff0000">*</span>
                  </label>
                  <app-ddl-vertical [(ngModel)]="vertical" (ngModelChange)="ChangeVerticalInformation()" onchange="ChangeVerticalInformation()" [vertical]="vertical" [verticalList]="verticalList" [attr.disabled]="disablevertical?'':null"></app-ddl-vertical>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Services
                    <span style="color: #ff0000">*</span>
                  </label>
                  <app-ddl-service [(ngModel)]="service" (ngModelChange)="GetBPSOffering()" onchange="GetBPSOffering()"></app-ddl-service>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    BPS Offering
                    <span style="color: #ff0000">*</span>
                  </label>

                  <div *ngIf="userUnit=='2'">
                    <select [(ngModel)]="bpsoffering" class="form-control">
                      <option [value]=0>--Select--</option>
                      <option *ngFor="let item of bpsofferingList" value={{item.id}}>
                        {{item.itemName}}
                      </option>
                    </select>
                  </div>
                  <div *ngIf="userUnit=='1'">
                    <angular2-multiselect [data]="bpsofferingList" [(ngModel)]="bpsofferingDomain" [settings]="dropdownSettingOffering" name="skills">
                    </angular2-multiselect>
                  </div>
                </div>
              </div>
            </div>
            <div class="row margin-zero">
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Geography
                    <span style="color: #ff0000">*</span>
                  </label>
                  <app-ddl-geography [(ngModel)]="geographyId" [geography]="geographyId" [disabledgeo]="disabledgeo" (change)="GetCountry()"></app-ddl-geography>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Country
                    <span style="color: #ff0000">*</span>
                  </label>
                  <app-ddl-country [(ngModel)]="country" [country]="country" [attr.disabled]="disableCountry?'':null"></app-ddl-country>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Executive Sponsor
                    <span style="color: #ff0000">*</span>
                  </label>
                  <app-executive-sponsor [attr.disabled]="disableOffshoreExecutiveSponsor?'':null"></app-executive-sponsor>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Geography Sales Owner
                    <span style="color: #ff0000">*</span>
                  </label>
                  <app-geography-sales-owner [attr.disabled]="disableGeographySalesOwner?'':null"></app-geography-sales-owner>
                </div>
              </div>
            </div>
            <div class="row margin-zero">
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Account/Sales Owner
                    <span style="color: #ff0000">*</span>
                  </label>
                  <app-account-sales-owner [attr.disabled]="disableAccountSalesOwner?'':null"></app-account-sales-owner>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Presales Lead – Vertical
                    <span style="color: #ff0000">*</span>
                  </label>
                  <app-ddl-offshore-presales-lead-vertical></app-ddl-offshore-presales-lead-vertical>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Presales Lead–Horizontal
                    <span style="color: #ff0000">*</span>
                  </label>
                  <app-ddl-offshore-presales-lead-horizontal [attr.disabled]="disableOffshorePresalesLead?'':null"></app-ddl-offshore-presales-lead-horizontal>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Deal Owner1
                    <span style="color: #ff0000">*</span>
                  </label>
                  <app-ddl-deal-owner1 [(ngModel)]="dealOwner1" (ngModelChange)="ValidateDealOwner()"></app-ddl-deal-owner1>
                </div>
              </div>
            </div>
            <div class="row margin-zero">
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Deal Owner2
                    <span style="color: #ff0000">*</span>
                  </label>
                  <app-ddl-deal-owner2 [(ngModel)]="dealOwner2" (ngModelChange)="ValidateDealOwner()"></app-ddl-deal-owner2>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    PIBS™
                    <span style="color: #ff0000">*</span>
                  </label>
                  <br>
                  <div class="btn-group btn-toggle" id="yesno">
                    <button (click)="ActivePIBS()" id="yesPIBS" class="btn btn-default" [disabled]="disableAllFields">Yes</button>
                    <button (click)="InActivePIBS()" id="noPIBS" class="btn btn-default" [disabled]="disableAllFields">No</button>
                  </div>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Potential FTEs
                    <span style="color: #ff0000">*</span>
                  </label>
                  <input type="text" [(ngModel)]="potentialFTE" name="potentialFTE" (keypress)="AllowNumeric($event)" maxlength="5" id="potentialFTE"
                         class="form-control" [disabled]="disableAllFields" />
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Deal Term(In Months)

                  </label>
                  <input type="text" maxlength="3" [(ngModel)]="dealTerm" name="dealTerm" class="form-control" (keypress)="AllowNumeric($event)"
                         [disabled]="disableAllFields" />
                  <label style="color: #ff0000;font-size: 12px;">Months</label>
                </div>
              </div>
            </div>
            <div class="row margin-zero">
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Multi-tower Deal
                    <span style="color: #ff0000">*</span>
                  </label>
                  <br>
                  <div class="btn-group btn-toggle" id="yesno" style="margin: 4px;">
                    <button (click)="YesMultitowerDeal()" id='YMultitowerDeal' class="btn btn-default" [disabled]="disableAllFields">YES</button>
                    <button (click)="NoMultitowerDeal()" id='NMultitowerDeal' class="btn btn-default" [disabled]="disableAllFields">NO</button>
                  </div>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>Select Digital Transformation Scope</label>
                  <app-ddl-get-digital-transformation [(ngModel)]="getDigital" (ngModelChange)="ChangeDT()" [getDigital]="getDigital"></app-ddl-get-digital-transformation>
                </div>
              </div>

              <div class="col-md-3" *ngIf="userUnit !='1'">
                <div class="form-group">
                  <label for="name">
                    Digital TCV(MM USD)

                  </label>
                  <input type="text" [(ngModel)]="digitalTcv" id="digitalTcv" placeholder="TCV(USD)" (keypress)="AllowDecimal($event)" maxlength="13"
                         class="form-control" [disabled]="disableAllFields" (keyup)="FormatInputTCV($event)" />
                </div>
              </div>
            </div>
            <div class="row margin-zero">
              <div class="col-md-3" *ngIf="shwSubSP">
                <div class="form-group">
                  <label>Sub SP</label>
                  <select [(ngModel)]="subSPId" class="form-control" [disabled]="disableAllFields">
                    <option value="0">--Select--</option>
                    <option *ngFor="let item of iSubSPList" value={{item.subSPId}}>
                      {{item.subSPName}}
                    </option>
                  </select>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    Tata Group Account
                  </label>
                  <br>
                  <div class="btn-group btn-toggle">
                    <button (click)="ActiveTGA()" id="yesTGA" class="btn btn-default" [disabled]="disableAllFields">Yes</button>
                    <button (click)="InActiveTGA()" id="noTGA" class="btn btn-default" [disabled]="disableAllFields">No</button>
                  </div>
                </div>
              </div>
              <div class="col-md-3" *ngIf="isCheckUserUnitID=='0'">
                <div class="form-group">
                  <label for="name">
                    Cluster
                  </label>
                  <app-ddl-cluster [(ngModel)]="cluster"></app-ddl-cluster>
                </div>
              </div>
              <div class="col-md-3" *ngIf="isCheckUserUnitID=='1'">
                <div class="form-group">
                  <label for="createdby" class="disb">IT IS Scope </label>
                  <br>
                  <div class="btn-group btn-toggle">
                    <button (click)="CheckItIsScope(1)" id="ITISScopeActive" class="btn btn-default" [disabled]="disableAllFields">Yes</button>
                    <button (click)="CheckItIsScope(0)" id="ITISScopeInActive" class="btn btn-default" [disabled]="disableAllFields">No</button>
                  </div>
                </div>
              </div>
            </div>
            <div class="row margin-zero">
              <div class="col-md-9">
                <div class="form-group ">
                  <fieldset style="width:790px">
                    <legend>CRM <span style="color: #ff0000">*</span></legend>
                    <div class="row margin-zero">
                      <div class="col-md-3">
                        <label for="name"> CRM ID<span style="color: #ff0000">*</span></label>
                      </div>
                      <div class="col-md-3">
                        <label for="name"> CRM Stage<span style="color: #ff0000">*</span></label>
                      </div>
                      <div class="col-md-6">
                        <label for="name">
                          CRM TCV(USD)<span style="color: #ff0000">*</span>
                          <label for="name" *ngIf="userUnit=='1'">(Actuals)</label>
                        </label>
                      </div>
                    </div>
                    <div class="row margin-zero">
                      <div class="col-md-3">
                        <input type="text" (keypress)="AllowAlphaNumeric($event)" placeholder="CRM ID" [(ngModel)]="cRMid" maxlength="10" name="cRMid"
                               id="cRMid" class="form-control" [disabled]="disableAllFields" />
                      </div>
                      <div class="col-md-3">
                        <app-ddl-crm-stage [(ngModel)]="cRMStage"></app-ddl-crm-stage>
                      </div>
                      <div class="col-md-3">
                        <input type="text" [(ngModel)]="cRMTCV" maxlength="13" placeholder="CRM TCV(USD)" name="cRMTCV" (keypress)="AllowDecimal($event)"
                               id="cRMTCV" class="form-control" [disabled]="disableAllFields" (keyup)="FormatInputTCV($event)" />
                      </div>
                    </div>
                  </fieldset>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Last Updated By
                    <span style="color: #ff0000">*</span>
                  </label>
                  <br>
                  <label>{{lastUpdatedby}}</label>
                </div>
              </div>
              <div class="col-md-6"></div>
            </div>
            <div class="row margin-zero">
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    Deal Status
                    <span style="color: #ff0000">*</span>
                  </label>
                  <select [(ngModel)]="DealstatusID" class="form-control" [style.background-color]="dealStatusColor" onChange="this.style.backgroundColor=this.options[this.selectedIndex].style.color">
                    <option style="background-color:white !important" value="0">--Select--</option>
                    <option *ngFor="let item of iDealStatus" value={{item.Deal_statusID}} [style.color]="item.Deal_statusColor" style="background-color:white">
                      {{item.Deal_statusName}}
                    </option>
                  </select>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label for="date">
                    Proposal Submission Date
                    <span style="color: #ff0000"> *</span>
                  </label>
                  <my-date-picker name="ToDate" [options]="myDatePickerOptions" [(ngModel)]="proposalSubmissionDate" required></my-date-picker>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label for="date">
                    Sales Stage Moved On Date
                    <span style="color: #ff0000"> *</span>
                  </label>
                  <my-date-picker name="ToDate" [options]="myDatePickerOptions" [(ngModel)]="salesStageMovedOnDate" [disabled]="1" required></my-date-picker>
                </div>
              </div>
              <div class="col-md-3" *ngIf="showaftersubmit">
                <label class="disb">Actual Close Date </label>
                <input type="text" [(ngModel)]="actualclosedate" id="closedate" class="form-control" [disabled]="true" />
              </div>
              <div class="col-md-3">
                <label class="disb">Deal Closure Reason</label>
                <textarea class="form-control" [(ngModel)]="dealClosureReason" id="closereason" [disabled]="disableAllFields"></textarea>
              </div>
            </div>
            <div class="row margin-zero">
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <label class="disb">Digital Flagging</label>
                <div class="btn-group btn-toggle">
                  <button (click)="ActiveDF()" id="yesDF" class="btn btn-default">Yes</button>
                  <button (click)="InActiveDF()" id="noDF" class="btn btn-default">No</button>
                </div>
              </div>
            </div>

            <div class="text-center">
              <button style="margin-left:10%" data-toggle="modal" data-target="#myModal" class="btn btn-default btncsssave" [disabled]="disableAllFields">Submit</button>

              <ul class="pull-left">
                <li (click)="openAddFiscalOffering()">
                  <fa name="plus-square-o" class="fis" id="fisfa"></fa>
                  <span>Fiscal & Offering </span>
                </li>
              </ul>
              <ul class="pull-left" style="margin-left:12px ">
                <li (click)="openAddProjection()">
                  <fa name="plus-square-o" class="fis" id="fisfa"></fa>
                  <span>Add Projections</span>
                </li>
              </ul>

              <div class="pull-right display-inline-block btncssp">
                <button matStepperPrevious disabled class="btn btn-default btncss">Previous</button>

              </div>
              <div id="fiscalbox" class="fiscalbox">
                Fisacl & Offering content
              </div>
            </div>
          </div>

        </mat-step>

        <mat-step label="General Information">
          <div class="step-content">
            <div class="row margin-zero">
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Win Probability
                    <sup>*</sup>
                  </label>
                  <select [(ngModel)]="probabilityofwin" [style.background-color]="porbabilityColor" onChange="this.style.backgroundColor=this.options[this.selectedIndex].style.color" class="form-control" [disabled]="disableAllFields">
                    <option tyle="background-color:white !important" Value="0">---Select---</option>
                    <option *ngFor="let item of winList" [style.color]="item.Color" style="background-color:white !important" value={{item.Value}}>
                      {{item.Text}}
                    </option>
                  </select>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Opportunity Flag
                    <span style="color: #ff0000">*</span>
                  </label>
                  <select [(ngModel)]="categoryid" [style.background-color]="oppFlagColor" onChange="this.style.backgroundColor=this.options[this.selectedIndex].style.color" class="form-control">
                    <option style="background-color:white !important" [value]=0>--Select--</option>
                    <option *ngFor="let item of iCategoryList" [style.color]="item.Category_Code" style="background-color:white !important" value={{item.Category_Id}}>
                      {{item.Category_Name}}
                    </option>
                  </select>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Next Step Due Date
                    <span style="color: #ff0000">*</span>
                  </label>
                  <my-date-picker name="ToDate" [options]="myDatePickerOptions" [(ngModel)]="nextstepduedt" required [disabled]="disableAllFields"></my-date-picker>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='2'">
                <div class="form-group">
                  <label>
                    Pricing Type
                    <span style="color: #ff0000">*</span>
                  </label>
                  <select [(ngModel)]="pricingtypeid" class="form-control">
                    <option [value]=0>--To Be Confirmed--</option>
                    <option *ngFor="let item of iPricingTypeList" value={{item.PRICING_TYPE_ID}}>
                      {{item.PRICING_TYPE_NAME}}
                    </option>
                  </select>

                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    Pricing Type
                    <span style="color: #ff0000">*</span>
                  </label>
                  <angular2-multiselect [data]="iPricingTypeList" [(ngModel)]="ddlPricingType" [settings]="dropdownSettingPricing" name="skills">
                  </angular2-multiselect>

                </div>
              </div>
            </div>
            <!-- Changess -->
            <div class="row margin-zero mar-top-20">
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    Seat Identification
                    <span style="color: #ff0000">*</span>
                  </label>
                  <select [(ngModel)]="identificationId" [style.background-color]="seatColor" class="form-control" onChange="this.style.backgroundColor=this.options[this.selectedIndex].style.color">
                    <option style="background-color:white !important" [value]=0>--Select--</option>
                    <option *ngFor="let item of iIdentificationList" [style.color]="item.SEAT_IDENTIFICATION_COLOR" style="background-color:white !important" value={{item.SEAT_IDENTIFICATION_ID}}>
                      {{item.SEAT_IDENTIFICATION_NAME}}
                    </option>
                  </select>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    Resourcing
                    <span style="color: #ff0000">*</span>
                  </label>
                  <select [(ngModel)]="resourcingId" [style.background-color]="resourcingColor" class="form-control" onChange="this.style.backgroundColor=this.options[this.selectedIndex].style.color">
                    <option style="background-color:white !important" [value]=0>--Select--</option>
                    <option *ngFor="let item of iResourcingList" [style.color]="item.RESOURCING_COLOR" style="background-color:white !important" value={{item.RESOURCING_ID}}>
                      {{item.RESOURCING_NAME}}
                    </option>
                  </select>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    No. of FTE Offshore
                    <span style="color: #ff0000">*</span>
                  </label>
                  <input type="text" maxlength=4 class="form-control" [(ngModel)]="FTEOffshore" (keypress)="AllowNumeric($event)" [disabled]="disableAllFields" />
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    No. of FTE Onsite
                    <span style="color: #ff0000">*</span>
                  </label>
                  <input type="text" maxlength=4 class="form-control" [(ngModel)]="FTEOnsite" (keypress)="AllowNumeric($event)" [disabled]="disableAllFields" />
                </div>
              </div>
            </div>
            <!-- END -->
            <div class="row margin-zero">
              <div class="col-md-3">
                <div class="form-group">
                  <label>Number Of Days in this Stage</label>
                  <input type="text" [(ngModel)]="noStage" class="form-control" [disabled]="true" (keypress)="AllowNumeric($event)" [disabled]="disableAllFields" />
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label for="name">Previous Deal Stage</label>
                  <input type="text" [(ngModel)]="previousDealStage" readonly="true" class="form-control">
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='2'">
                <div class="form-group">
                  <label>Days Elapsed Since Opportunity Date</label>
                  <input type="text" [(ngModel)]="daysElapsedOppDate" class="form-control" [disabled]="true" (keypress)="AllowNumeric($event)"
                         [disabled]="disableAllFields" />
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>Days Since Actual RFX Submitted</label>
                  <input type="text" [(ngModel)]="daysElapsedRFXAcSubDt" class="form-control" [disabled]="true" (keypress)="AllowNumeric($event)"
                         [disabled]="disableAllFields" />
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Currency
                    <span style="color: #ff0000">*</span>
                  </label>
                  <select [(ngModel)]="currency" class="form-control" [disabled]="disableAllFields">
                    <option [value]=0>--Select--</option>
                    <option *ngFor="let item of currencyList" value={{item.CurrencyID}}>
                      {{item.CurrencyName}}
                    </option>
                  </select>
                </div>
              </div>
            </div>
            <div class="row margin-zero">
              <div class="col-md-3">
                <div class="form-group">
                  <label>BCP / DRP Location</label>
                  <select [(ngModel)]="BCPorDRPLocation" class="form-control" [disabled]="disableAllFields">
                    <option value=0>--Select--</option>
                    <option *ngFor="let item of BCPorDRPLocationList" value={{item.LOCATION_ID}}>
                      {{item.LOCATION_NAME}}
                    </option>
                  </select>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    {{RFIRecieveDate}}
                    <span style="color: #ff0000">*</span>
                  </label>
                  <my-date-picker name="ToDate" [options]="myDatePickerOptions" [(ngModel)]="RFIReceivedDate" required [disabled]="disableAllFields"></my-date-picker>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    {{RFIReviewdate}}
                    <span style="color: #ff0000">*</span>
                  </label>
                  <my-date-picker name="ToDate" [options]="myDatePickerOptions" [(ngModel)]="RFIReviewDate" required [disabled]="disableAllFields"></my-date-picker>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    {{ProbableRFISubmissiondate}}
                    <span style="color: #ff0000">*</span>
                  </label>
                  <my-date-picker name="ToDate" [options]="myDatePickerOptions" [(ngModel)]="probableRFISubDate" required [disabled]="disableAllFields"></my-date-picker>
                </div>
              </div>
            </div>
            <div class="row margin-zero">
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    {{ActualRFISubmissionDate}}
                    <span style="color: #ff0000">*</span>
                  </label>
                  <my-date-picker name="ToDate" [options]="myDatePickerOptions" [(ngModel)]="actualRFISubDate" (ngModelChange)="OnActualRFXSubDateChange($event)"
                                  required [disabled]="disableAllFields"></my-date-picker>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    {{RFIReviewReqdby}}
                    <span style="color: #ff0000">*</span>
                  </label>
                  <textarea [(ngModel)]="RFIReviewReqd" maxlength="500" class="form-control" style="width:100%;" rows="2" [disabled]="disableAllFields"></textarea>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    RFP Received Date
                    <span style="color: #ff0000">*</span>
                  </label>
                  <my-date-picker name="ToDate" [options]="myDatePickerOptions" [(ngModel)]="RFPReceivedDate" required [disabled]="disableAllFields"></my-date-picker>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    RFP - Review Date
                    <span style="color: #ff0000">*</span>
                  </label>
                  <my-date-picker name="ToDate" [options]="myDatePickerOptions" [(ngModel)]="RFPReviewDate" required [disabled]="disableAllFields"></my-date-picker>
                </div>
              </div>
            </div>
            <div class="row margin-zero">
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Probable RFP Submission Date
                    <span style="color: #ff0000">*</span>
                  </label>
                  <my-date-picker name="ToDate" [options]="myDatePickerOptions" [(ngModel)]="probableRFPSubDate" required [disabled]="disableAllFields"></my-date-picker>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Actual RFP Submission Date
                    <span style="color: #ff0000">*</span>
                  </label>
                  <my-date-picker name="ToDate" [options]="myDatePickerOptions" [(ngModel)]="actualRFPSubDate" required [disabled]="disableAllFields"></my-date-picker>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    RFP -Review Reqd By
                    <span style="color: #ff0000">*</span>
                  </label>
                  <textarea class="form-control" [(ngModel)]="RFPReviewReqd" style="width:100%;" rows="2" maxlength="500" [disabled]="disableAllFields"></textarea>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label for="createdby">Project WON Number</label>
                  <input type="text" [(ngModel)]="wonnumber" name="wonnumber" class="form-control" [disabled]="disableAllFields" />
                </div>
              </div>
            </div>
            <!-- rajat -->
            <div class="row margin-zero mar-top-20">
              <div class="col-md-3">
                <div class="form-group">
                  <label>Next Steps/Notes from previous review</label>
                  <textarea [(ngModel)]="nextstepfrompreviousreview" style="width:100%;" name="nextstep" rows="4" cols="45" [disabled]="disableAllFields"></textarea>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    Won FTE
                    <span style="color: #ff0000">*</span>
                  </label>
                  <input type="text" [(ngModel)]="wonfte" name="wonfte" class="form-control" [disabled]="disableAllFields" />
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Anticipated/Actual Start Date
                  </label>
                  <my-date-picker name="ActaulStartDate" [options]="myDatePickerOptions" [(ngModel)]="actualstartdate" required [disabled]="disableAllFields"></my-date-picker>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    WIN Verbatim
                    <span style="color: #ff0000">*</span>
                  </label>
                  <input type="text" [(ngModel)]="winverbatim" name="winverbatim" class="form-control" [disabled]="disableAllFields" />
                </div>
              </div>
            </div>
            <div class="row margin-zero mar-top-20">


              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    WIN Reason
                    <span style="color: #ff0000">*</span>
                  </label>
                  <angular2-multiselect [data]="winreasonvalues" [(ngModel)]="ddlWinReason" [settings]="dropdownSettingWin" name="skills" [disabled]="disableAllFields">
                  </angular2-multiselect>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    Deal Ageing
                  </label>
                  <input type="text" [(ngModel)]="dealageing" name="dealageing" class="form-control" [disabled]="true" />
                </div>
              </div>

              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    WIN date
                    <span style="color: #ff0000">*</span>
                  </label>
                  <my-date-picker name="windate" [options]="myDatePickerOptions" [(ngModel)]="windate" required [disabled]="disableAllFields"></my-date-picker>
                </div>
              </div>
            </div>
            <div class="row margin-zero mar-top-20">
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Won/Final TCV (in MM USD)
                    <span style="color: #ff0000">*</span>
                  </label>
                  <input type="text" [(ngModel)]="wonfinaltcv" name="wonfinaltcv" class="form-control" (keyup)="FormatInputTCV($event)" />
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label for="createdby">No Of Revenue Months in CFY</label>
                  <input type="text" [(ngModel)]="currentfiscal" name="currentfiscal" class="form-control" [disabled]="disableAllFields" />
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>Duration of Training</label>
                  <input type="text" [(ngModel)]="durationofTraining" maxlength="4" class="form-control" placeholder="Days" (keypress)="AllowNumeric($event)"
                         [disabled]="disableAllFields" />
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>No of Associates for Onsite Training</label>
                  <input type="text" [(ngModel)]="onsiteTraining" maxlength="4" class="form-control" (keypress)="AllowNumeric($event)" [disabled]="disableAllFields" />
                </div>
              </div>
            </div>
            <!-- rajat -->
            <div class="row margin-zero">
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Shortlist Date
                    <span style="color: #ff0000">*</span>
                  </label>
                  <my-date-picker name="ToDate" [options]="myDatePickerOptions" [(ngModel)]="shortlistDate" required [disabled]="disableAllFields"></my-date-picker>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Selection Date
                    <span style="color: #ff0000">*</span>
                  </label>
                  <my-date-picker name="ToDate" [options]="myDatePickerOptions" [(ngModel)]="selectionDate" required [disabled]="disableAllFields"></my-date-picker>
                </div>
              </div>

              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    TPA
                  </label>
                  <br>
                  <div class="btn-group btn-toggle">
                    <button (click)="ActiveTPA()" id="yesTPA" class="btn btn-default" [disabled]="disableAllFields">Yes</button>
                    <button (click)="InActiveTPA()" id="noTPA" class="btn btn-default" [disabled]="disableAllFields">No</button>
                  </div>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'&&showTPAName">
                <div class="form-group">
                  <label>
                    TPA Name
                  </label>
                  <input type="text" class="form-control" [(ngModel)]="TPAName" id="TPAName" [disabled]="disableAllFields" />
                </div>
              </div>
            </div>
            <div class="row margin-zero mar-top-20">
              <div class="col-md-3">
                <div class="form-group">
                  <label for="createdby">Status Update</label>
                  <textarea class="form-control" [(ngModel)]="statusupdate" style="width:100%;" name="statusupdate" rows="4" cols="45" [disabled]="disableAllFields"></textarea>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>Next Step</label>
                  <textarea class="form-control" [(ngModel)]="nextstep" style="width:100%;" name="nextstep" rows="4" cols="45" [disabled]="disableAllFields"></textarea>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>Status Update History</label>
                  <textarea [(ngModel)]="statusUpdateHistory" [disabled]="disable" style="width:100%;" rows="4" cols="45"></textarea>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>Next Step History</label>
                  <textarea [(ngModel)]="nextstepHistory" [disabled]="disable" style="width:100%;" name="nextstep" rows="4" cols="45"></textarea>
                </div>
              </div>
            </div>
            <div class="row margin-zero mar-top-20">
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    ignio&trade; Scope
                    <span style="color: #ff0000">*</span>
                  </label>
                  <br>
                  <div class="btn-group btn-toggle">
                    <button (click)="ActiveIS()" id="yesIS" class="btn btn-default">Yes</button>
                    <button (click)="InActiveIS()" id="noIS" class="btn btn-default">No</button>
                  </div>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    ignio&trade; Scope Detail
                    <span *ngIf="showIS=='Yes'" style="color: #ff0000">*</span>
                  </label>
                  <textarea [(ngModel)]="ignioTMScope" style="width:100%;" name="ignioTMScope" (keypress)="AllowPattern($event)" id="ignioTMScope"
                            maxlength="200" rows="4" cols="45"></textarea>
                </div>
              </div>

              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    Offering Type
                    <span style="color: #ff0000">*</span>
                  </label>
                  <select [(ngModel)]="OfferingTypeID" class="form-control" (ngModelChange)="DisableOfferingType()">
                    <option value="0">--Select--</option>
                    <option *ngFor="let item of iOfferingType" value={{item.offeringType}}>
                      {{item.offeringTypeName}}
                    </option>
                  </select>
                </div>
              </div>
            </div>
            <div class="row margin-zero">
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    Traditional Offering
                    <span style="color: #ff0000">*</span>
                  </label>
                  <select [(ngModel)]="CoreOfferingID" class="form-control" [disabled]="disableTraditionalOffering">
                    <option value="0">--Select--</option>
                    <option *ngFor="let item of iICoreoffering" value={{item.Core_OfferingID}}>
                      {{item.Core_OfferingName}}
                    </option>
                  </select>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    New and Modern Offering
                    <span style="color: #ff0000">*</span>
                  </label>
                  <select [(ngModel)]="modernisedOffering" class="form-control" [disabled]="disableNewMOdernOffering">
                    <option [value]=0>--Select--</option>
                    <option *ngFor="let item of modernisedList" value={{item.Modernised_ID}}>
                      {{item.Modernised_Name}}
                    </option>
                  </select>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    Cognitive Solutions
                    <span style="color: #ff0000">*</span>
                  </label>
                  <select [(ngModel)]="cognitiveSolutions" class="form-control">
                    <option [value]=0>--Select--</option>
                    <option *ngFor="let item of solutionList" value={{item.CognitiveSolution_ID}}>
                      {{item.CognitiveSolution_Name}}
                    </option>
                  </select>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    Service Practice
                    <span style="color: #ff0000">*</span>
                  </label>
                  <select [(ngModel)]="ServicePracticeID" class="form-control">
                    <option value="0">--Select--</option>
                    <option *ngFor="let item of iServicePractices" value={{item.Service_PracticesID}}>
                      {{item.Service_PracticesName}}
                    </option>
                  </select>
                </div>
              </div>
            </div>
            <div class="row margin-zero mar-top-20">
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label for="date">
                    Delivery Location Proposed
                    <span style="color: #ff0000"> *</span>
                  </label>
                  <angular2-multiselect [data]="mainDeliveryLocationList" [(ngModel)]="ddlDeliveryLocation" [settings]="dropdownSettingLocation"
                                        name="skills">
                  </angular2-multiselect>
                </div>
              </div>
              <div class="col-md-3">
                <div class="form-group">
                  <label>
                    Contract Closure date
                    <span style="color: #ff0000">*</span>
                  </label>
                  <my-date-picker name="ToDate" [options]="myContractDatePickerOptions" [(ngModel)]="contractCloserdate" required></my-date-picker>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    CBOI Offering

                  </label>
                  <select [(ngModel)]="cboiofferingvalue" class="form-control">
                    <option value="0">--Select--</option>
                    <option *ngFor="let item of cboiofferingdata" value={{item.id}}>
                      {{item.itemName}}
                    </option>
                  </select>
                </div>
              </div>
              <div class="col-md-3" *ngIf="userUnit=='1'">
                <div class="form-group">
                  <label>
                    Deal Flag

                  </label>
                  <select [(ngModel)]="dealflagvalue" class="form-control">
                    <option value="0">--Select--</option>
                    <option *ngFor="let item of DealFlag" value={{item.id}}>
                      {{item.itemName}}
                    </option>
                  </select>
                </div>
              </div>


            </div>
            <div class="row margin-zero mar-top-20">
              <div class="col-md-4 col-lg-4 col-md-4">
                <div class="form-group">
                  <p class="rfi">Proposal Factory Details:</p>
                </div>
              </div>
            </div>
            <div class="row margin-zero mar-top-20" style="margin-left:1.8%">
              <div class="col-md-4 col-lg-4">
                <div class="form-group">
                  <label for="createdby">
                    Was Proposal Factory support taken on this deal
                    <sup>*</sup>
                  </label>
                  <div class="btn-group btn-toggle pull-left" id="yesno" style="margin: 4px;">
                    <button id="YeIWasProposal" (click)="YesWasProposal()" class="btn btn-default" [disabled]="disableAllFields">YES</button>
                    <button id="NIWasProposal" (click)="NoWasProposal()" class="btn btn-default" [disabled]="disableAllFields">NO</button>
                  </div>
                </div>
              </div>
              <div class="col-md-4 col-lg-4">
                <div class="form-group">
                  <label>Comments</label>
                  <textarea style="width:100%;" [(ngModel)]="proposalComments" name="proposalComments" rows="4" cols="45" [disabled]="disableAllFields"></textarea>
                  <span>(Your feedback would be deeply appreciated)</span>
                </div>
              </div>
            </div>
            <div *ngIf="showWasproposal=='Yes'" class="row margin-zero mar-top-20">
              <div class="col-md-4 col-lg-4">
                <div class="form-group">
                  <label>
                    Please rate your experience on the proposal factory support taken on the deal
                    <sup>*</sup>
                  </label>
                  <select id="Pleaseratetheproposal" [(ngModel)]="pleaseratetheproposal" class="form-control" [disabled]="disableAllFields">
                    <option value="0">--Select--</option>
                    <option *ngFor="let item of proactiveProposalList" value={{item.Value}}>
                      {{item.Text}}
                    </option>
                  </select>
                </div>
              </div>
            </div>
            <div class="text-center">
              <ul class="pull-left">
                <li (click)="openAddFiscalOffering()">
                  <fa name="plus-square-o" class="fis" id="fisfa"></fa>
                  <span>Fiscal & Offering </span>
                </li>
              </ul>
              <ul class="pull-left" style="margin-left:12px;">
                <li (click)="openAddProjection()">
                  <fa name="plus-square-o" class="fis" id="fisfa"></fa>
                  <span>Add Projections</span>
                </li>
              </ul>

              <button style="margin-left:10%" data-toggle="modal" data-target="#myModal" class="btn btn-default btncsssave" [disabled]="disableAllFields">Submit</button>
              <div class="pull-right display-inline-block btncssp">
                <button matStepperPrevious class="btn btn-default btncss">Previous</button>

              </div>
              <div id="fiscalbox" class="fiscalbox">
                Fisacl & Offering content
              </div>

            </div>
          </div>
        </mat-step>

        <mat-step label="Additional Information">
          <div class="step-content">

            <!-- Newly added tables starts ..... -->
            <div class="row  margin-zero mar-top-20" style="margin-left:1.8%">
              <div id="SMT" name="SMT" *ngIf="userUnit=='1'||userUnit=='3'">
                <div class="row margin-zero">
                  <div class="col-md-12 posr">
                    <div class="table-responsive">

                      <table class="table table-bordered" id="addTable">
                        <thead style="background: #ccc;border-bottom-width: 0">
                          <tr>
                            <th>Verticals</th>
                            <th>Offering</th>
                            <th>FTE's</th>
                            <th>
                              Solution Lead
                            </th>
                            <th>TCV ($)</th>
                            <th>Add</th>
                            <th>Delete</th>
                          </tr>
                        </thead>
                        <tbody>
                          <tr>
                            <td colspan="7">
                              <span style="color:#3f51b5">*Note : Please click on individual SAVE after updating any row details</span>

                            </td>
                          </tr>
                          <tr *ngFor="let item of verticalDomainList;let i=index;">
                            <td>

                              <select [(ngModel)]="verticalgrid" name="VerticalBFSI" class="form-control" (change)="Get_Level1_Vertical($event.target.value,item)" [disabled]="true">
                                <option [value]=0>--Select--</option>
                                <option [selected]="business.BUSINESS_ID==item.BUSINESS_ID" *ngFor="let business of domainBusinessBFSList" value={{business.BUSINESS_ID}}>
                                  {{business.BUSINESS_NAME}}
                                </option>
                              </select>
                            </td>
                            <td>
                              <select [(ngModel)]="verticalDomainList[i].LEVEL_ID" name="VerticalBFSI" class="form-control" (change)="Get_PresalesLead_VerticalWise($event.target.value,item)">
                                <option [value]=0>--Select--</option>
                                <option [selected]="offer.LEVEL_ID==item.LEVEL_ID" *ngFor="let offer of verticalDomainListLevel" value={{offer.LEVEL_ID}}>
                                  {{offer.LEVEL_NAME}}
                                </option>
                              </select>
                            </td>
                            <td class="text-right">
                              <input type="text" (keypress)="AllowNumeric($event)" [(ngModel)]="verticalDomainList[i].FTE" [value]="item.FTE" class="form-control"
                                     name="txtVerticalFTE">
                            </td>
                            <td>
                              <input type="text" maxlength="200" [(ngModel)]="verticalDomainList[i].SOLUTION_LEAD" [value]="item.SOLUTION_LEAD" class="form-control"
                                     name="txtSolutionLead">
                            </td>
                            <td class="text-right">
                              <input type="text" MaxLength="13" [(ngModel)]="verticalDomainList[i].TCV" [value]="item.TCV" class="form-control" name="txtVerticalTCVValue" (keyup)="FormatInputTCV($event)">
                            </td>
                            <td class="text-center" colspan="2">
                              <button class="addnewupdate" title="Save Row" (click)="SaveVerticalDomain(verticalDomainList[i])">
                                <fa class="size" name="save"></fa>
                              </button>


                              <button class="addnewupdate" title="Delete Row" (click)="DeleteRowVerticalDomain(verticalDomainList[i])">
                                <fa class="size" name="remove"></fa>
                              </button>
                            </td>
                          </tr>
                        </tbody>
                      </table>
                      <button class="addnewupdate" (click)="AddNewRowVerticalDomain()" [disabled]="disableAllFields">
                        <fa name="plus-square-o"></fa>Add
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-md-4">

              </div>
              <div class="col-md-4">
              </div>
              <div class="col-md-4">
              </div>
            </div>
            <!-- SERVICEs -->
            <div class="row  margin-zero mar-top-20" style="margin-left:1.8%">
              <div id="SMT" name="SMT">
                <div class="row margin-zero">
                  <div class="col-md-12 posr">
                    <div class="table-responsive">
                      <table class="table table-bordered" id="addTable">
                        <thead style="background: #ccc;border-bottom-width: 0">
                          <tr>
                            <th>Services</th>
                            <th>Offering</th>
                            <th>FTE's</th>
                            <th>
                              Solution Lead
                            </th>
                            <th>TCV ($)</th>
                            <th>Add</th>
                            <th>Delete</th>
                          </tr>
                        </thead>
                        <tbody>
                          <tr>
                            <td colspan="7">
                              <span style="color:#3f51b5">*Note : Please click on individual SAVE after updating any row details</span>

                            </td>
                          </tr>
                          <tr *ngFor="let item of serviceDataList;let i=index;">
                            <td>
                              <select [(ngModel)]="serviceDataList[i].HorizontalId" name="VerticalBFSI" class="form-control" (change)="Get_Level1_Services($event.target.value,item)">
                                <option [value]=0>--Select--</option>
                                <option [selected]="service.HorizontalId==item.HorizontalId" *ngFor="let service of serviceNameList" value={{service.HorizontalId}}>
                                  {{service.HorizontalName}}
                                </option>
                              </select>
                            </td>
                            <td>
                              <select [(ngModel)]="serviceDataList[i].LEVEL_ID" name="VerticalBFSI" class="form-control">
                                <option [value]=0>--Select--</option>
                                <option [selected]="offer.LEVEL_ID==item.LEVEL_ID" *ngFor="let offer of serviceDataList[i].offeringList" value={{offer.LEVEL_ID}}>
                                  {{offer.LEVEL_NAME}}
                                </option>
                              </select>
                            </td>
                            <td class="text-right">
                              <input type="text" (keypress)="AllowNumeric($event)" [(ngModel)]="serviceDataList[i].FTE" [value]="item.FTE" class="form-control"
                                     name="txtVerticalFTE">
                            </td>
                            <td>
                              <input type="text" maxlength="200" [(ngModel)]="serviceDataList[i].SOLUTION_LEAD" [value]="item.SOLUTION_LEAD" class="form-control"
                                     name="txtSolutionLead">
                            </td>
                            <td class="text-right">
                              <input type="text" MaxLength="13" [(ngModel)]="serviceDataList[i].TCV" [value]="item.TCV" class="form-control" name="txtVerticalTCVValue" (keyup)="FormatInputTCV($event)">
                            </td>
                            <td class="text-center" colspan="2">
                              <button class="addnewupdate" title="Save Row" (click)="Save_ServiceOppdate(serviceDataList[i])">
                                <fa class="size" name="save"></fa>
                              </button>


                              <button class="addnewupdate" title="Delete Row" (click)="DeleteRowService(serviceDataList[i])">
                                <fa class="size" name="remove"></fa>
                              </button>
                            </td>
                          </tr>
                        </tbody>
                      </table>
                      <button class="addnewupdate" (click)="AddNewRowService()" [disabled]="disableAllFields">
                        <fa name="plus-square-o"></fa>Add
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-md-4">

              </div>
              <div class="col-md-4">
              </div>
              <div class="col-md-4">
              </div>
            </div>
            <!-- Newly added tables Ends ..... -->
            <div class="row margin-zero mar-top-20" style="margin-left:1.8%">
              <div class="col-md-4 col-lg-4">
                <div class="form-group">
                  <span class="pull-left">Platform</span>
                  <span style="color: #ff0000">*</span>
                  <div class="btn-group btn-toggle pull-right" id="yesno" style="margin: 4px;">
                    <button (click)="YesPlatform()" id='YPlatform' class="btn btn-default" [disabled]="disableAllFields">YES</button>
                    <button (click)="NoPlatform()" id='NPlatform' class="btn btn-default" [disabled]="disableAllFields">NO</button>
                  </div>
                </div>
              </div>
              <div *ngIf="ShowPlatform=='Yes'">
                <div class="col-md-4 col-lg-4">
                  <div class="form-group">
                    <angular2-multiselect [data]="iPlatformList" [(ngModel)]="ddlplatformMultiselect" [settings]="dropdownSettingPlatform" name="skills">
                    </angular2-multiselect>
                  </div>
                </div>
              </div>
            </div>
            <div class="row margin-zero mar-top-20">
              <div class="col-md-4 col-lg-4">
                <div class="form-group">
                  <p class="rfi">
                    Competition:
                    <span style="color: #ff0000;font-size: 13px;">*</span>
                  </p>
                </div>
              </div>
            </div>
            <div class="row  margin-zero mar-top-20" style="margin-left:1.8%">
              <div class="col-md-3">
                <div class="additional form-group">
                  <angular2-multiselect [data]="iCompetitorList" [(ngModel)]="ddlCompetition" [settings]="dropdownSetting" name="skills" [disabled]="disableAllFields">
                  </angular2-multiselect>
                </div>
              </div>
            </div>
            <div class="row margin-zero mar-top-20">
              <div class="col-md-4 col-lg-4">
                <div class="form-group">
                  <p class="rfi"> Deal Info:</p>
                </div>
              </div>
            </div>
            <div class="row mar-top-20 margin-zero" style="margin-left:1.8%" *ngIf="userUnit=='2'">
              <div class="col-md-4 col-lg-4">
                <div class="form-group">
                  <label for="name" style="margin-right: 10px">Deal qualified</label>
                  <div class="btn-group btn-toggle" id="Deal">
                    <button id='yDealqualified' (click)="YesDealqualified()" class="btn btn-default" [disabled]="disableAllFields">YES</button>
                    <button id='nDealqualified' (click)="NoDealqualified()" class="btn btn-default" [disabled]="disableAllFields">NO</button>
                  </div>
                </div>
              </div>
              <div *ngIf="showDealqualified=='No' " class="col-md-8 col-lg-8">
                <div class="form-group">
                  <input type="text" name="dealqualifiedtxt" [(ngModel)]="dealqualifiedtxt" placeholder="Reason for Disqualified" class="form-control reason"
                         [disabled]="disableAllFields">
                </div>
              </div>
            </div>
            <div class="row margin-zero mar-top-20" *ngIf="userUnit=='2'">
              <div class="col-md-4 col-lg-4">
                <div class="form-group">
                  <p class="rfi">Other Deal Details</p>
                </div>
              </div>
            </div>
            <div class="row mar-top-20 margin-zero" style="margin-left:1.8%">
              <div class="col-md-6 col-lg-6">
                <div class="form-group">
                  <label for="name">
                    Key Customer Expectation
                    <span style="color: #ff0000">*</span>
                  </label>
                  <textarea class="form-control" name="txtKeyCustExp" [(ngModel)]="txtKeyCustExp" (keypress)="AllowPattern($event)" required
                            pattern="/^[a-zA-Z]*$/" maxlenght="500" rows="5" [disabled]="disableAllFields"></textarea>
                </div>
              </div>
              <div class="col-md-6 col-lg-6">
                <div class="form-group">
                  <label for="name">
                    Winning Theme
                    <sup>*</sup>
                  </label>
                  <textarea class="form-control" name="winningTheme" (keypress)="AllowPattern($event)" required pattern="/^[a-zA-Z]*$/" maxlenght="500"
                            [(ngModel)]="winningTheme" rows="5" [disabled]="disableAllFields"></textarea>
                </div>
              </div>

            </div>
            <!-- rajat -->
            <div class="row mar-top-20 margin-zero" style="margin-left:1.8%">
              <div class="col-md-4 col-lg-4">
                <div class="form-group">
                  <label>
                    Win Reason 1
                    <span style="color: #ff0000">*</span>
                  </label>
                  <select [(ngModel)]="dealReason1" class="form-control" [disabled]="disableAllFields" (ngModelChange)="CheckSameWinReason(1)">
                    <option value="0">--Select--</option>
                    <option *ngFor="let item of windata" [value]="item.DEAL_REASON_ID">{{item.DEAL_REASON_NAME}}</option>
                  </select>
                  <span style="color: #ff0000" *ngIf="showMsgWin1">Please select different WIN Reason</span>

                </div>
              </div>
              <div class="col-md-4 col-lg-4">
                <div class="form-group">
                  <label>
                    Win Reason 2
                    <span style="color: #ff0000">*</span>
                  </label>
                  <select [(ngModel)]="dealReason2" class="form-control" [disabled]="disableAllFields" (ngModelChange)="CheckSameWinReason(2)">
                    <option value="0">--Select--</option>
                    <option *ngFor="let item of windata" [value]="item.DEAL_REASON_ID">{{item.DEAL_REASON_NAME}}</option>
                  </select>
                  <span style="color: #ff0000" *ngIf="showMsgWin2">Please select different WIN Reason</span>
                </div>
              </div>
              <div class="col-md-4 col-lg-4">
                <div class="form-group">
                  <label>
                    Win Reason 3
                    <span style="color: #ff0000">*</span>
                  </label>
                  <select [(ngModel)]="dealReason3" class="form-control" [disabled]="disableAllFields" (ngModelChange)="CheckSameWinReason(3)">
                    <option value="0">--Select--</option>
                    <option *ngFor="let item of windata" [value]="item.DEAL_REASON_ID">{{item.DEAL_REASON_NAME}}</option>
                  </select>
                  <span style="color: #ff0000" *ngIf="showMsgWin3">Please select different WIN Reason</span>
                </div>
              </div>
            </div>
            <!-- rajat -->
            <div class="text-center">
              <ul class="pull-left">
                <li (click)="openAddFiscalOffering()">
                  <fa name="plus-square-o" class="fis" id="fisfa"></fa>
                  <span>Fiscal & Offering </span>
                </li>
              </ul>
              <ul class="pull-left" style="margin-left:12px;">
                <li (click)="openAddProjection()">
                  <fa name="plus-square-o" class="fis" id="fisfa"></fa>
                  <span>Add Projections</span>
                </li>
              </ul>

              <button style="margin-left:10%" data-toggle="modal" data-target="#myModal" class="btn btn-default btncsssave" [disabled]="disableAllFields">Submit</button>
              <div class="pull-right display-inline-block btncssp">
                <button matStepperPrevious class="btn btn-default btncss">Previous</button>

              </div>
              <div id="fiscalbox" class="fiscalbox">
                Fisacl & Offering content
              </div>

            </div>
          </div>
        </mat-step>

      </mat-horizontal-stepper>
      <div class="modal fade" id="myModal" role="dialog">
        <div class="modal-dialog">
          <!-- Modal content-->
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal">&times;</button>
              <h4 class="modal-title">Confirm</h4>
            </div>
            <div class="modal-body">
              <p>
                This will submit the opportunity and thereafter no more changes can be made against this opportunity.Do
                you want to Continue?
              </p>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-default" data-dismiss="modal" (click)="Submit('5','0','0')">OK</button>
              <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>


</div>


.ts

//************************************************************************
//File Name   : Stage9.Component.ts
//Description : It's Save the Stage9 details and assign another Stage to customer
//Created By  : Vinoth Raju
//************************************************************************
import { Component, OnInit, ViewChild, Pipe, PipeTransform, Compiler } from '@angular/core';
import { Stage5Service } from './../Services/stage5.service';
import { Stage9Service } from './../Services/stage9.service';
import { Stage8Service } from './../Services/stage8.service';
import { ValidationMessage } from '../ValidationMessage/validation-message'
import { error } from 'selenium-webdriver';
import { DatePipe } from '@angular/common';
import { ActivatedRoute } from '@angular/router';
import { Router } from '@angular/router';
import { OnHoldService } from '../Services/OnHold.service';
import { ISUService } from '../Services/ISU.Service';
import { AddFiscalOfferingComponent } from '../UserControls/add-fiscal-offering/add-fiscal-offering.component';
import { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';
import { FormsModule, FormControl, ReactiveFormsModule } from '@angular/forms'
import { ISU } from '../Interface/ISU/ISU';
import { UserService } from '../Services/User.Service';
import { IVertical } from '../Interface/Vertical/vertical';
import { VerticalService } from '../Services/Vertical.service';
import { ICustomerType } from '../Interface/Customer/CustomerType';
import { CreateNewOpportunityService } from '../Services/CreateNewOpportunity.service';
import { DdlIOUComponent } from '../UserControls/DdlIOU/DdlIOU.Component';
import { DdlSubIouComponent } from '../UserControls/DdlSubIOU/ddl-sub-iou.component';
import { IFiscalYear } from '../Interface/FiscalYear/FiscalYear';
import { IBPSOffering } from '../Interface/BPSOffering/BPSOffering';
import { BpsofferingService } from '../Services/BPSOffering.service';
import { INewOpportunity } from '../Interface/NewOpportunity/NewOpportunity';
import { IGeographyIP } from '../Interface/Geography/Geographyip';
import { IGeography } from '../Interface/Geography/Geography';
import { Constant } from '../Constant'
import { ICreateNewOpportunity } from '../Interface/CreateNewOpportunity/CreateNewOpportunity';
import { DdlISUComponent } from '../UserControls/ddlISU/ddlISU.Component';
import { QueryList } from '@angular/core/src/linker/query_list';
import { DdlGeographyComponent } from '../UserControls/DdlGeography/ddl-geography.component';
import { AccountSalesOwnerComponent } from '../UserControls/DdlAccountSalesOwner/account-sales-owner.component'
import { DdlGetDigitalTransformationComponent } from '../UserControls/DdlGetDigitalTransformation/ddl-get-digital-transformation.component'
import { DdlOffshorePresalesLeadHorizontalComponent } from '../UserControls/Ddloffshorepresalesleadhorizontal/ddl-offshore-presales-lead-horizontal.component'
import { DdlOffshorePresalesLeadVerticalComponent } from '../UserControls/Ddloffshorepresalesleadvertical/ddl-offshore-presales-lead-vertical.component'
import { DdlValusBpsComponent } from '../UserControls/DdlValueBPS/ddl-valus-bps.component'
import { DdlDealCategoryComponent } from '../UserControls/DdlDealCategory/ddl-deal-category.component'
import { CustomerTypeComponent } from '../UserControls/DdlCustomerType/customer-type.component'
import { DdlVerticalComponent } from '../UserControls/DdlVertical/ddl-vertical.component'
import { DdlCountryComponent } from '../UserControls/DdlCountry/ddl-country.component'
import { DdlDealOwner1Component } from '../UserControls/DdlDealOwner1/ddl-deal-owner1.component'
import { GeographySalesOwnerComponent } from '../UserControls/DdlGeographySalesOwner/geography-sales-owner.component'
import { DdlBpsofferingComponent } from '../UserControls/DdlBPSOffering/ddl-bpsoffering.component'
import { IndustryPracticeComponent } from '../UserControls/DdlIndustryPractice/industry-practice.component'
import { DdlClusterComponent } from '../UserControls/DdlCluster/ddl-cluster.component'
import { DdlServiceComponent } from '../UserControls/DdlService/ddl-service.component'
import { DdlDealOwner2Component } from '../UserControls/DdlDealOwner2/ddl-deal-owner2.component'
import { ExecutiveSponsorComponent } from '../UserControls/DdlExecutiveSponsor/executive-sponsor.component'
import { DdlDealStageComponent } from '../UserControls/DdlDealstage/ddl-deal-stage.component'
import { ICluster } from '../Interface/Cluster/Cluster';
import { IServiceName } from '../Interface/ServiceName/ServiceName';
import { IExecutiveSponsor } from '../Interface/ExecutiveSponsor/ExecutiveSponsor';
import { isNullOrUndefined } from 'util';
import { CookieService } from 'ngx-cookie-service';
import { IMyDpOptions } from 'mydatepicker';
import { ICategory } from '../Interface/Category/Category';
import { IPricingType } from '../Interface/PricingType/PricingType';
import { IPlatform } from '../Interface/Platform/Platform';
import { ICompetitor } from '../Interface/Competitor/Competitor';
import { IBusinessBFS } from '../Interface/BusinessBFS/BusinessBFS';
import { DdlDealStageService } from '../Services/DealStage.service';
import { DealCategoryService } from '../Services/DealCategory.service';
import { IDealCategory } from '../Interface/DealCategory/DealCategory';
import { CreateNewOppurtunityStage0Service } from '../Services/create-new-oppurtunity-stage0.service';
import { Alert, AlertPromise } from 'selenium-webdriver';
import { IConfiguration } from '../Interface/Configuration/configuration';
import { MatStepper } from '@angular/material';
import { Stage4Service } from '../Services/stage4.service';
import { FiscalOfferingService } from '../Services/fiscal-offering.service';
import { PresalesService } from '../Services/presales.service';

import { AddQuarterProjectionComponent } from '../UserControls/add-quarter-projection/add-quarter-projection.component';
import { IdentificationService } from '../Services/Identification.service';
import { ResourcingService } from '../Services/Resourcing.service';
import { Stage3Service } from '../Services/stage3.service';
import { OfferingType } from '../Interface/OfferingType/OfferingType';
import { ICoreoffering } from '../Interface/CoreOffering/CoreOffering'
import { IServicePractices } from '../interface/ServicePractices/ServicePractices'
import { IDealStatus } from '../Interface/DealStatus/DealStatus'
import { ICoreOfferingName } from '../Interface/CoreOfferingsName/CoreOfferingsName'
import { unescape } from 'lodash';
import { CrmStageComponent } from '../UserControls/DdlCRMStage/crmstage.component'
declare var $: any;
import * as moment from 'moment';

@Component({
    selector: 'app-BD_Stage9',
    templateUrl: './BD_Stage9.component.html',
    styleUrls: ['./BD_Stage9.component.css'],
    providers: [DatePipe]
})
export class BDStage9Component implements OnInit {

    info = "./assets/info.png";
    isLinear: false;
    deal = "./assets/deal.png"
    downarrow = "./assets/downarrow.png"
    @ViewChild('stepper') stepper;

    title = "Primary Information"

    stepname = this.title;

    ngDoCheck() {
        switch (this.stepper.selectedIndex) {
            case 0:
                {
                    this.title = "Primary Information"
                    break;
                }
            case 1:
                {
                    this.title = "General Information"
                    break;
                }
            case 2: {
                this.title = "Additional Information"
                break;
            }
            case 3: {
                this.title = "Resourcing & Transition"
                break;
            }
            case 4: {
                this.title = "Deal Stage"
                break;
            }
            default: {

                break;
            }
        }
    }



    onClick() {
        $('#sales').find('.btn').toggleClass('active');


        if ($('#sales').find('.btn-primary').length > 0) {
            $('#sales').find('.btn').toggleClass('btn-primary');
        }
    }

    fiscalBox() {

        $('.fiscalbox').slideToggle();
        $("#fisfa i").toggleClass('fa-plus-square-o fa-minus-square-o');


    }




    me(event) {

        var id = event.srcElement.attributes.id.nodeValue;
        id = '#' + id;
        $(id).toggleClass('click');

    }


    @ViewChild(DdlISUComponent) ISUComp: DdlISUComponent;
    @ViewChild(DdlGeographyComponent) GeographyComponent: DdlGeographyComponent;
    @ViewChild(DdlSubIouComponent) SubIouComp: DdlSubIouComponent;
    @ViewChild(AccountSalesOwnerComponent) AccountSalesOwner: AccountSalesOwnerComponent
    @ViewChild(DdlGetDigitalTransformationComponent) getDigitalTransformation: DdlGetDigitalTransformationComponent
    @ViewChild(DdlOffshorePresalesLeadHorizontalComponent) OffshorePresalesLeadHorizontal: DdlOffshorePresalesLeadHorizontalComponent
    @ViewChild(DdlOffshorePresalesLeadVerticalComponent) OffshorePresalesLeadVertical: DdlOffshorePresalesLeadVerticalComponent
    @ViewChild(DdlValusBpsComponent) ValusBps: DdlValusBpsComponent
    @ViewChild(DdlDealCategoryComponent) DealCategory: DdlDealCategoryComponent
    @ViewChild(CustomerTypeComponent) CustomerType: CustomerTypeComponent
    @ViewChild(DdlVerticalComponent) DdlVertical: DdlVerticalComponent
    @ViewChild(DdlDealOwner1Component) DdlDealOwner1: DdlDealOwner1Component
    @ViewChild(GeographySalesOwnerComponent) GeographySalesOwner: GeographySalesOwnerComponent
    @ViewChild(DdlBpsofferingComponent) DdlBpsoffering: DdlBpsofferingComponent
    @ViewChild(IndustryPracticeComponent) IndustryPractice: IndustryPracticeComponent
    @ViewChild(DdlClusterComponent) DdlCluster: DdlClusterComponent
    @ViewChild(DdlServiceComponent) DdlService: DdlServiceComponent
    @ViewChild(DdlDealOwner2Component) DdlDealOwner2: DdlDealOwner2Component
    @ViewChild(DdlIOUComponent) DdlIOU: DdlIOUComponent
    @ViewChild(DdlCountryComponent) DdlCountry: DdlCountryComponent
    @ViewChild(DdlDealStageComponent) DealStagecomp: DdlDealStageComponent
    @ViewChild(ExecutiveSponsorComponent) ExecutiveSponsor: ExecutiveSponsorComponent
    @ViewChild(CrmStageComponent) CRMStage: CrmStageComponent



    newDate:any=new Date();
    myDatePickerOptions: IMyDpOptions = {
        // Date options...
        dateFormat: 'dd.mm.yyyy',
        editableDateField: false,
        inline: false
       
    };

    myContractDatePickerOptions: IMyDpOptions = {
        // Date options...
        dateFormat: 'dd.mm.yyyy',
        editableDateField: false,
        inline: false,
        disableUntil: { year: this.newDate.getFullYear(), month: this.newDate.getMonth() + 1, day: this.newDate.getDate() - 1 }
    };
    
    noStage: any;
    validateActualRFPSubDate: any;
    validateProbableRFISubDate: any;
    public daterange: any = {};

    showMultiTower: any;
    dealStageList: any[] = new Array();
    dealCategoryList: IDealCategory[];
    probabilityofwin: any;
    ddlCompetition: any[] = new Array();
    resourcingRequired: any;
    bFLag: any;
    strError: any;
    nextstep: any;
    nextstepduedt: any;
    proposalComments: any;
    stagePrIInfo: any;
    yeWasProposal: any;
    teamNumber: any;
    deliveryTeamNumber: any;
    txtKeyCustExp: any;
    statusupdate: any;
    txtVerticalFTE: any;
    txtSolutionLead: any;
    txtVerticalTCVValue: any;
    categoryid: any;
    showWasproposal: any;
    oppstatusflag: any;
    strcontractCloserdate: any;
    DealstatusID: any;
    iDealStatus: IDealStatus[];
    ServicePracticeID: any;
    CoreOfferingID: any;
    iServicePractices: IServicePractices[];
    iICoreoffering: ICoreoffering[];
    lblEmpNotFound3: any;
    lblError1: any;
    primary: any;
    lblError2: any;
    generalInfo: any;
    additionalInf: any;
    resourcing: any;
    pricingtypeid: any;
    stageGenInfo: any;
    stageFNA: any;
    stageRSC: any;
    nextStepDueDate: any;
    yesNOProposal: any;
    iOfferingType: OfferingType[];
    OfferingTypeID: any;
    yesPIBS: any;
    yesTGA: any;
    yesTPA: any;

    lblOpportunityDescription: any;
    strCustomerID: any;
    strCustTypeID: any;
    oppDate: any;
    closureDate: any;
    bmonth: number;
    expectedDealClosure: any;
    varOpportunityTrackedBy: any;
    lastUpdatedby: any;
    txtIOUName: any;
    dealStage: any;
    txtCustomerName: any;
    geographyId: any;
    strStageId: string
    cRMStage: any = 0;
    cRMTCV: any;
    strCRMTCV: string;
    strlblOpp: any
    dealTerm: any;
    cRMid: string;
    strIsuCd: string
    strTCVMail: string
    lblError0: string
    strTotalContractValue: number;
    dealqualifiedtxt: any;
    otherDealDetails: any;
    winningTheme: any;
    yDealqualified: any;
    getDigital: number;
    opportunityFlag: any;
    pricingType: any;
    count: number;
    validateActualRFISubDate: any;
    isuOwnerId: any;
    empId: any;
    shoWProactiveProposal: any;
    newOpportunityList: INewOpportunity[];
    iBusinessBFSList: IBusinessBFS[];
    createNewOpportunity: ICreateNewOpportunity[];
    iCategoryList: ICategory[];
    iCompetitorList: ICompetitor[] = new Array();
    iPricingTypeList: IPricingType[];
    iPlatformList: IPlatform[];
    checkStatus: string;

    otherDT: string;
    disabledODT: boolean;
    horizontalSave: any;
    checkHorizontal: any;
    oppReceivedDate: any;
    expectedRevenueQtr: string;
    strYear: string = null;
    strYear1: string = null;
    a: number;
    strFiscalYr: string = null;
    year: any;

    lblNoOfDelviryTeamMemberError: any;
    lblNoOfTeamMemberError: any;
    tabIndex: any;
    month: any;
    proactiveProposalY: any;
    shoWPibs: any;
    showTGA: string;
    showTPA: string;
    showOfferings: string;
    showIS: string;
    showDF: string;
    proactiveProposalN: any;
    date: any;
    country: number;
    isumain: number;
    disabled: boolean;
    disabledgeo: boolean;
    disabledIP: boolean;
    custType: number;
    dealCategory: number;
    ip: number;
    isu: number;
    iou: number;
    subiou: number;
    lblEmpNotFound2: any;
    lblEmpNotFound1: any;
    lblBidNotFound: any;
    lblBidOwnertxt: any;
    customer: number;
    cluster: number;
    dealOwner1: number;
    service: number;
    validateClosureDate: any;
    validateoppReceivedDate: any;
    disable: boolean;
    serviceList: IServiceName[];
    vertical: number;
    bpsofferingDomain: any[] = new Array();
    bpsoffering: number = 0;
    expectedRevenueFY: any;
    geographyList: IGeography[];
    iouList: ISU[];
    clusterList: ICluster[];
    subiouList: ISU[];
    bpsofferingList: IBPSOffering[];
    verticalList: IVertical[];
    customerNameList: ICustomerType[] = new Array();
    fiscalYearList: IFiscalYear[];
    getgeographyList: IGeographyIP[];
    validationMessage: string;
    ddlplatform: any;
    opportunityId: string;
    opportunityDescription: string;
    proactiveProposal: string;
    potentialFTE: string;
    otherDigitalTransformationValue: string
    pibs: string
    saveButton: string;
    opportunityTrackedBy: any
    totalContractValue: any
    digitalTransformation: number
    yVERTICAL: any;
    saveStrDTValue: any;
    intMaxStage: number;
    strTCV: string;
    dbTCV: any;
    oldOpportunityDescription: any = null;
    executiveSponsorList: IExecutiveSponsor[];
    txtGeography: any;
    disablecustomername: boolean;

    disableDealStage: boolean;
    disableCustomertype: boolean;
    disableIPname: boolean;
    disableIOU: boolean;
    disableSubIOU: boolean;
    disableOtherDigitalTransformation: boolean;
    disableGeography: boolean;
    strOppOfferingId: string = "";
    disableOpportunityTrackedBy: boolean;
    disableOppRecievedDate: boolean;
    industryPracticeid: any;
    intResult: any;
    strOpportunityId: any;
    disableExpected: any;
    strOppDesc: any;
    strOldOppDesc: any;
    strGeography: any;
    strCustomer: any;
    strCustType: any;
    strGeosalesOwner: any;
    strIP: any;
    varnextstepduedt: any;
    strISU: any;
    strOffPracOwner: any;
    strRemark: any = "";
    strOppDate: any;
    strClosureDate: any;
    strDealstage: any;
    strOnsiteOwner: any;
    oldDescVisibale: any;
    strProbWin: any;
    strOffShoreBDLead: any;
    strISUOwner: any;
    contractCloserdate: any;
    strContractLength: any;
    strPlatform: any;
    strMultiTower: any;
    intAdvisoryId: any;
    intStatusFlag: any;
    strNextStep: any;
    ShowPlatform: any;
    strBusinessId: any;
    strProductId: any;
    strCompetencyId: any;
    strSubCompetency: any;
    strAnnualSaleValue: any;
    strAccountSalesOwner: any;
    VerticalBFSI: any;
    strExeSponser: any;
    strProactiveProposal: any;
    strValBPSCon: any;
    strIsuMain: any;
    strPlatformNew: any;
    strStatusUpdate: any;
    strCategoryId: any;
    strCountryId: any;
    StageId: any = -1;
    strNextStepDueDt: any;
    strBidExeName: any;
    strDealOwner: any;
    strDealOwner2: any;
    strRFIRwDt: any;
    strRFPRwDt: any;
    strRFIBy: any;
    strRFPBy: any;
    strNGM: any;
    dealCategoryId: number = 0;
    strPibsSaleValue: any;
    strCRMReason: any;
    strBidExeEmpId: any;
    strDisqual: any;
    strAddDeal: any;
    strSUBIOU: any;
    nextstepHistory: any
    NextStepArray: any[] = new Array();
    statusUpdateHistory: any;
    StatusUpdateArray: any[] = new Array();
    successMessage: any;
    ICoreOfferingName: ICoreOfferingName[];
    CoreOfferingsNameID: any;
    YFAO: any;
    NFAO: any;
    FAOFTE: any;
    FAOSolutionLeader: any;
    FAOTCV: any;
    strCluster: any;
    YHRO: any;
    NHRO: any;
    HROFTE: any;
    HROSolutionLeader: any;
    HROTCV: any;
    YSCM: any;
    NSCM: any;
    SCM: any;
    SCMSolutionLeader: any;
    SCMTCV: any;
    YLPO: any;
    NLPO: any;
    LPO: any;
    DropDownID: any;
    LPOSolutionLeader: any;
    LPOTCV: any;
    YVertical: any;
    NVertical: any;
    Vertical: any;
    verticalSolutionLeader: any;
    VerticalTCV: any;
    YCEM: any;
    NCEM: any;
    CEM: any;
    CEMSolutionLeader: any;
    CEMTCV: any;
    YBPM: any;
    NBPM: any;
    BPM: any;
    BPMSolutionLeader: any;
    BPMTCV: any;
    YMultitowerDeal: any;
    NMultitowerDeal: any;
    YPlatform: any;
    NPlatform: any;
    SCMFTE: any;
    LPOFTV: any;
    VerticalFTA: any;
    CEMFTA: any;
    BPMFTA: any;
    showResourcing: any;
    disableFAOFTE: boolean
    disableFAOSolutionLeader: boolean
    disableFAOTCV: boolean
    disableCountry: boolean
    disabledplatform: boolean
    disableAccountSalesOwner: boolean
    disableOffshoreExecutiveSponsor: boolean
    disableGeographySalesOwner: boolean
    showPleaseratetheproposal: any;
    stageName: any;
    disableHROFTE: boolean
    disableHROSolutionLeader: boolean
    disableHROTCV: boolean

    disableSCM: boolean
    disableSCMSolutionLeader: boolean
    disableSCMTCV: boolean

    disableLPO: boolean
    disableLPOSolutionLeader: boolean
    disableLPOTCV: boolean

    disableVerticalFTA: boolean
    disableVerticalSolutionLeader: boolean
    disableVerticalTCV: boolean

    disableCEMFTA: boolean
    disableCEMSolutionLeader: boolean
    disableCEMTCV: boolean

    disableBPM: boolean
    disableBPMSolutionLeader: boolean
    disableBPMTCV: boolean



    YResourcingRequired: any
    NResourcingRequired: any

    NoofTeamMember: any
    disableISUName: boolean
    disableNoofTeamMember: boolean
    dropdownSetting: any;
    dropdownSettingWin: any;
    dropdownSettingPlatform: any;
    deliveryTeamMember: any
    disableDeliveryTeamMember: boolean
    bidOwnertxt1: any
    showDealqualified: any
    bidOwnertxt2: any
    disableBidOwnertxt2: boolean
    disableOffshorePresalesLead: boolean
    disablevertical: boolean
    disableTraditionalOffering : boolean
    disableNewMOdernOffering : boolean

    bidManagertxt1: any

    bidManagertxt2: any
    disableBidManagertxt2: boolean

    pricingOwnertxt1: any
    pricingOwnertxt2: any
    disablePricingOwnertxt2: boolean

    solutionLeadertxt1: any
    solutionLeadertxt2: any
    disableSolutionLeadertxt2: boolean


    transitionReqd: any
    disableTransitionReqd: boolean

    transitionManagertxt1: any
    disableTransitionManagertxt1: boolean
    transitionManagertxt2: any
    disableTransitionManagertxt2: boolean

    expectedStartDate: any
    disableExpectedStartDate: boolean

    FTERequiredForDD: any
    disableFTERequiredForDD: boolean

    transitionType: any
    disableTransitionType: boolean

    transitionApproach: any
    disableTransitionApproach: boolean

    transitionModel: any
    disableTransitionModel: boolean
    pleaseratetheproposal: any;
    verticalDataList: ICreateNewOpportunity[] = new Array();
    noOfTeamMemberList: ICreateNewOpportunity[] = new Array();
    noOfDelivertList: ICreateNewOpportunity[] = new Array();
    stake: any
    unitText: string = String(atob(this.cookieService.get(('unitText'))));
    userUnit: any;
    strEmpName: string;
    strEmpEmail: string;
    strCustomerName: string;
    strUserLoginFullName: string;
    strSendMailEmpID: string = null;
    strSendMailName: string = null;
    strSendMailEmail: string = null;
    strEventType: string;
    strOppId: string;
    intApplicationId: number;
    strTemplateType: string;
    strTCVMail1: any;
    strExpectedClosuredateMail1: any;
    strStatusUpdateMail1: any;
    Stage: number;
    userId: any;
    userRole: any;
    validateProbableRFPSubDate: any;
    dealOwner2: any;
    currentUrl: string = window.location.href;
    currentPageQuery: string;
    hostAddress: string;
    noPIBS: any;
    YWasProposal: any;
    NWasProposal: any;
    DealqualifiedY: any;
    DealqualifiedN: any;
    PlatformY: any;
    PlatformN: any;
    currencyList: any[] = new Array();
    BCPorDRPLocationList: any[] = new Array();
    BCPorDRPLocation: any;
    currency: any;
    proactiveProposalList: any;
    winList: any[] = new Array();
    FTEOffshore: any;
    FTEOnsite: any;
    RFIReceivedDate: any;
    strRFIReceivedDate: any = null;
    RFIReviewDate: any;
    strRFIReviewDate: any = null;
    probableRFISubDate: any;
    strProbableRFISubDate: any = null;
    actualRFISubDate: any;
    strActualRFISubDate: any = null;
    ITISScopeActive: any;
    ITISScopeInActive: any;
    ContractRenewalActive: any;
    ContractRenewalInActive: any;
    RFPReceivedDate: any;
    strRFPReceivedDate: any = null;
    RFPReviewDate: any;
    strRFPReviewDate: any = null;
    probableRFPSubDate: any;
    strProbableRFPSubDate: any = null;
    actualRFPSubDate: any;
    strActualRFPSubDate: any = null;
    RFIReviewReqd: any = null;
    RFPReviewReqd: any = null;
    daysElapsedOppDate: any;
    validateRFPReceivedDate: any;
    configurationList: IConfiguration[];
    nextstageName: string;
    nextStageId: any;
    showTPAName: boolean;
    TPAName: string;
    itIsScope: any;
    disabledContractRenewal: any;
    isCheckUserUnitID: any;
    contractRenewal: any;
    ContractRenewalValue: any;

    expectedRevenueQtrYr: any;
    expectedRevenueQtrYrList: any;

    shwSubSP: boolean;
    subSPId: number;
    iSubSPList: any[];

    cRMBeacon: any;
    strcRMBeacon: string;

    digitalTcv: number;
    strDigitalTcv: any;
    domainBusinessBFSList: IBusinessBFS[] = new Array();
    offeringList: any[] = new Array();
    verticalDomainList: any[] = new Array();
    serviceDataList: any[] = new Array();
    offeringServiceList: any[] = new Array();
    serviceNameList: any[] = new Array();
    //Changess
    identificationId: any;
    resourcingId: any;
    iIdentificationList: any[];
    iResourcingList: any[];
    durationofTraining: any = null;
    onsiteTraining: any = null;
    selectionDate: any;
    shortlistDate: any;
    strShortlistDate: any = null;
    strSelectionDate: any = null;
    validateShortlistDate: any;
    validateSelectionDate: any;

    //rajat
    wonnumber: number;
    nextstepfrompreviousreview: string;
    wonfte: number;
    actualstartdate: any;
    revenue: any;
    winverbatim: any;
    ddlWinReason: any[] = new Array();
    winreasonvalues: any[];
    dealageing: any;
    contractclosuredate: any;
    windate: any;
    currentfiscal: any;
    wonfinaltcv: any;
    categoryrag: any = 0;
    categoryraglist: any;
    validateWinDate: any;
    strWinDate: string;
    stractualstartdate: string;
    strshoertlistdate: string;
    strcontractclosuredate: string;
    strselectiondate: string;
    windata: any[];
    dealReason1: number = 0;
    dealReason2: number = 0;
    dealReason3: number = 0;
    disableAllFields: boolean = false;
    disableStage: string = "false";
    actualclosedate: any;
    showaftersubmit: boolean = false;
    dealClosureReason: any;
    modernisedList: any[] = new Array();
    solutionList: any[] = new Array();
    modernisedOffering: any;
    cognitiveSolutions: any;
    opportunityDescDetails: string;
    ignioTMScope: string;
    strExpectedStartDate: any;
    proposalSubmissionDate: any;
    proposalSubmissionDt: any;
    salesStageMovedOnDate: any;
    salesStageMovedOnDt: any;
    mainDeliveryLocationList: any;
    ddlDeliveryLocation: any[] = new Array();
    deliveryLocationID: string = '';
    previousDealStage: any;
    daysElapsedRFXAcSubDt: any;
    RFIRecieveDate: any;
    ProbableRFISubmissiondate: any;
    RFIReviewReqdby: any;
    RFIReviewdate: any;
    ActualRFISubmissionDate: any;
    RFIReviewReqdBy: any;
    IfYes: boolean = false;
    verticalgrid: any;
    verticalDomainListLevel: any[] = new Array();
    ddlPricingType: any[] = new Array();
    dropdownSettingPricing: any;    
   
   
  
    validateRFIReviewDate:any;
    oppFlagColor: any;
    seatColor: any;
    resourcingColor: any;
    disableContractRenewal: any;
    showMsgWin2: boolean = false;
    showMsgWin3: boolean = false;
    showMsgWin1: boolean = false;
    ddlplatformMultiselect: any[];
    dropdownSettingOffering:any;
    porbabilityColor:any;
    cboiofferingdata:INewOpportunity[];
    DealFlag:INewOpportunity[];
    cboiofferingvalue:any;
    dealflagvalue;
    dealStatusColor:any;

    constructor(private stage3Service: Stage3Service, private stage9Service: Stage9Service, private fiscalOfferingService: FiscalOfferingService, private stage4Service: Stage4Service, private stage5Service: Stage5Service, private dialog: MatDialog, private onHoldService: OnHoldService, private router: Router, private _compiler: Compiler, private userService: UserService, private dealCategoryService: DealCategoryService, private DealStageService: DdlDealStageService, private activatedroute: ActivatedRoute, private isuService: ISUService, private cookieService: CookieService, private createNewOppurtunityStage0Service: CreateNewOppurtunityStage0Service, private createNewOpportunityService: CreateNewOpportunityService, private verticalService: VerticalService, private bpsofferingService: BpsofferingService, private constant: Constant, private datepipe: DatePipe,
        private presalesService: PresalesService, private identificationService: IdentificationService, private resourcingService: ResourcingService, private stage8Service: Stage8Service) {
        this._compiler.clearCache();

        this.userId = this.cookieService.get('userId');
        this.userUnit = this.cookieService.get('userUnit')
        this.userUnit = atob(this.userUnit);
        this.userRole = this.cookieService.get('userRole')
        this.userRole = atob(this.userRole);
        this.activatedroute.params.subscribe(params => {

            this.opportunityId = atob(params['strOppId'])
            this.StageId = atob(params['strStage'])
            this.stake = atob(params['strStake'])

        });


        if (this.userUnit != null && this.userUnit != undefined && this.userRole != null && this.userRole != undefined)
            this.userService.LogUserAccess(this.userId, btoa(this.currentUrl), btoa(this.currentPageQuery), btoa(this.hostAddress)).subscribe(resultArray => {


            })
    }

    ngAfterViewInit() {
        this.Get_Stage();
    }

    ngAfterViewChecked() {

    }

    ngOnInit() {
       

            this.RFIRecieveDate = "RFI Recieve Date";
            this.ProbableRFISubmissiondate = "Probable RFI Submission date"
            this.RFIReviewReqdby = "RFI -Review Reqd by"
            this.RFIReviewdate = "RFI - Review date"
            this.ActualRFISubmissionDate = "Actual RFI Submission Date"
        
        this.cookieService.set('StageId', btoa(""));
        if (this.userUnit == "1") {
            this.showTPA = null;
            this.showTGA = null;
            this.showOfferings = null;
            this.showDF = null;
            this.showIS = null;
      
        }
        else {
            this.showTPA = null;
            this.showTGA = null;
            this.showOfferings = null;
            this.showDF = null;
            this.showIS = null;
  
        }
        this.showTPAName = false;

        this.userId = atob(this.userId);
        this.GetDealStage();
        this.PopulateCategory();
        this.BCPorDRPLocation = 0;
        this.currency = 0;
        $('.btn-toggle').click(function () {

            $(this).find('.btn').toggleClass('active');

            if ($(this).find('.btn-primary').length > 0) {
                $(this).find('.btn').toggleClass('btn-primary');
            }

            if ($('#check').hasClass('active')) {
                $('#checkdigi').show();
            }
            else {
                $('#checkdigi').hide();
            }
        });



        $('#info').hover(function ($event) {
            $('#infor').toggle();
        });



        $('#name').hide();
        $('#stagetog').click(function () {
            $("#name").slideToggle();
        });

        $('#name li').click(function () {
            $('#name li').removeClass('active');
            $(this).addClass('active');
            $('#stagenumber').text($(this).find('span').text());
            $('#stagename').text($(this).find('p').text());
        });

        $('#catname').hide();

        $('#catname li').click(function () {
            $('#categorynumber').text($(this).find('span').text());
        });
        $("ul.enterleave").on("mouseleave", function () {
            $("#name").slideUp()
            $("#catname").slideUp();
        });
        this.disable = true;
        this.disableExpected = true;
        this.transitionReqd = 2;
        this.subSPId = 0;
        this.transitionType = 0;
        this.transitionApproach = 0;
        this.transitionModel = 0;
        this.pleaseratetheproposal = "0";
        this.cboiofferingvalue=0;
        this.dealflagvalue=0;

        this.getDigital = 0;
        this.showDealqualified = null;
        this.bidOwnertxt1 = "";
        this.strStageId = this.StageId;
        this.count = 0;
        this.disabledODT = true;
        this.GetFiscalYear();
        this.custType = 0;
        this.isu = 0;
        this.opportunityTrackedBy = 0;
        this.expectedRevenueQtr = "";
        this.ip = 0;
        this.ddlplatform = 0;
        this.vertical = 0;
        this.subiou = 0;
        this.customer = 0;
        this.dealCategory = 0;
        this.GeographyComponent.geography = 0;
        this.expectedRevenueFY = 0;
        this.categoryid = 0;

        this.disablecustomername = true;

        this.disableDealStage = true;
        this.disableCustomertype = true;
        this.disableIPname = true;
        this.deliveryTeamNumber = 'No';
        this.disableIOU = true;
        this.disableSubIOU = true;
        this.VerticalBFSI = 0;
        this.disableGeography = true;
        this.disableOpportunityTrackedBy = true;
        this.disableOppRecievedDate = true;
        this.probabilityofwin = "0";
        this.pricingtypeid = 0;
        this.modernisedOffering = 0;
        this.cognitiveSolutions = 0;
        this.teamNumber = "No";
        this.ShowPlatform = null;
        this.oppstatusflag = 0;
        this.CheckUserUnitID();
        this.itIsScope = null;
        this.showResourcing = null;
        this.GetCategory();
        if (this.userUnit == '1') {
            this.Get_PricingType();
        }
        else if (this.userUnit == '2') {
        this.GetPricingType();
        }
        this.GetPlatform();
        this.Get_Selected_Platform();
        this.PopulateQtrFiscalExpectedDate();
        this.SetDefaultValues()

        this.GetVertical();
        this.StageGetBPSOffering();
        this.disableBidManagertxt2 = true;
        this.disablePricingOwnertxt2 = true;
        this.disableSolutionLeadertxt2 = true;
        this.bFLag = true;
        this.strError = "";
        this.disableBidOwnertxt2 = true;
        this.disableTransitionManagertxt1 = true;
        this.disableTransitionManagertxt2 = true;
        this.disableExpectedStartDate = true;
        this.disableFTERequiredForDD = true;
        this.disableTransitionType = true;
        this.disableTransitionApproach = true;
        this.disableTransitionModel = true;
        this.showMultiTower = 0;

        this.GetCognitiveSolutions();
        this.GetModernisedOffering();
        this.GetCBOIOffering();
        this.GetDealFlag();
        this.Get_Competitor();
        this.PopulateCurrency();
        this.PopulateBCP();
        this.PopulateProbabilityofWIN();
        this.PopulateProactiveProposal();
        this.GetgenInfoStage();
        this.Get_SelectedPricingType(this.opportunityId);
        this.Get_SelectedCompetitor(this.opportunityId);
        this.ServicePracticeID = 0;
        this.CoreOfferingID = 0;
        this.GetServicePractices();
        this.GetCoreoffering();
        this.GetDealStatus();
        this.DealstatusID = 0;
        this.GetSubSP();
        this.PopulateWinReason();
        this.PopulateDealReason();
        this.PopulateCategoryRag();
        this.Get_WinReason();
        this.PopulateLocation();
        this.Get_SelectedLocation(this.opportunityId);
        this.CoreOfferingsNameID = 0;
        this.GetCoreofferingName();
        this.GetofferingType();
        this.OfferingTypeID = 0;
        //changess
        this.resourcingId = 0;
        this.identificationId = 0;

        if (this.userUnit == '1') {
            this.GetResourcing();
            this.GetSeatIdentification();
        }
        //End
        if (this.userUnit == "1") {
            this.shwSubSP = true;
        }
        this.disableContractRenewal = 0;
        this.dropdownSettingPricing = {
            
                        singleSelection: false,
            
                        text: "Please Select the Pricing Type",
            
                        selectAllText: 'Select All',
            
                        unSelectAllText: 'UnSelect All',
            
            classes: "myclass multi-class",
            badgeShowLimit: 1,
            enableSearchFilter: true
            
            
            
    }
        this.dropdownSetting = {

            singleSelection: false,

            text: "Please Select the Competitor",

            selectAllText: 'Select All',

            unSelectAllText: 'UnSelect All',

            classes: "myclass multi-class",
            badgeShowLimit: 1,
            enableSearchFilter: true
        }

        this.dropdownSettingPlatform = {
            
            singleSelection: false,
            text: "Please Select the Platform",
            selectAllText: 'Select All',
            unSelectAllText: 'UnSelect All',
            enableSearchFilter: true,
            classes: "myclass multi-class",
            badgeShowLimit: 1,



        }
        this.dropdownSettingOffering = {

            singleSelection: false,

            text: "Please Select the BPS Offering",

            selectAllText: 'Select All',

            unSelectAllText: 'UnSelect All',

            classes: "myclass multi-class",
            badgeShowLimit: 1,
            enableSearchFilter: true

        }

        this.dropdownSettingWin = {

            singleSelection: false,
            text: "Select Win Reason",
            selectAllText: 'Select All',
            unSelectAllText: 'UnSelect All',
            classes: "myclass multi-class",
            badgeShowLimit: 1,
            enableSearchFilter:true

        }

        
      
    }

    //Changess
    Get_WinReason() {

        this.stage8Service.Stage9_Get_Opp_Win_Loss_Reason(this.opportunityId).subscribe(

            resultArray => this.ddlWinReason = resultArray,

            error => { throw error; },

        )


    }
    PopulateCategoryRag() {

        this.stage9Service.PopulateCategoryRAG().subscribe(result => {

            this.categoryraglist = result;

        })

    }
    PopulateWinReason() {

        this.stage9Service.PopulateWinReason().subscribe(result => {

            this.winreasonvalues = result;
        })
    }

    PopulateDealReason() {

        this.stage9Service.PopulateDealReason().subscribe(result => {

            this.windata = result;
        })
    }

    GetCountry() {
        if (this.GeographyComponent.geography != 0) {

            this.createNewOpportunityService.GetCountry(this.GeographyComponent.geography).subscribe(
                resultArray => {
                    this.DdlCountry.countryList = resultArray
                    if (this.DdlCountry.countryList.length == 1) {
                        this.DdlCountry.country = this.DdlCountry.countryList[0].CountryID,
                            this.DdlCountry.country = this.DdlCountry.countryList[0].CountryID
                    }


                },
                error => { throw error; },
            )
        }
        else {
            this.DdlCountry.countryList = null;
            this.DdlCountry.country = 0;
        }
    }



    GetSeatIdentification() {

        this.identificationService.GetSeatIdentification().subscribe(

            resultArray => this.iIdentificationList = resultArray,

            error => { throw error; },
        )
    }

    GetResourcing() {

        this.resourcingService.GetResourcing().subscribe(

            resultArray => this.iResourcingList = resultArray,

            error => { throw error; },

        )
    }
    //End
    PopulateProbabilityofWIN() {
        this.stage5Service.GetProbabilityofWIN(this.userUnit).subscribe(
            resultArray => this.winList = resultArray,
            error => { throw error; }
        )
    }
    PopulateProactiveProposal() {
        this.onHoldService.GetProactiveProposal().subscribe(

            resultArray => this.proactiveProposalList = resultArray,
            error => { throw error; },

        )
    }
    PopulateBCP() {
        this.onHoldService.GetBCP().subscribe(
            resultArray => {
                this.BCPorDRPLocationList = resultArray
            },
            error => { throw error; },
        )
    }
    PopulateCurrency() {
        this.onHoldService.GetCurrency().subscribe(
            resultArray => {
                this.currencyList = resultArray
            },
            error => { throw error; },
        )
    }

    SetFYQtr() {
        if (this.expectedRevenueQtr != "" && !isNullOrUndefined(this.expectedRevenueQtr) && this.expectedRevenueFY != "" && !isNullOrUndefined(this.expectedRevenueFY)) {
            this.expectedRevenueQtrYr = this.expectedRevenueQtr + " - " + this.expectedRevenueFY;
        }
    }

    GetDealStage() {
        let StageID: number = 0;
        this.DealStageService.GetDealStage().subscribe(
            resultArray => {
                this.dealStageList = resultArray
                this.stage9Service.Stage9_Populate_Get_stage9(this.opportunityId, this.constant.Stage9ID).subscribe(
                    resultArray => {
                        this.newOpportunityList = resultArray;
                        if (this.newOpportunityList.length > 0) {
                            if (this.newOpportunityList[0].StageID != "") {
                                StageID = this.newOpportunityList[0].StageID;
                            }
                        }
                        if (!isNullOrUndefined(StageID)) {
                            for (let i = 0; i < this.dealStageList.length; i++) {
                                if (this.dealStageList[i].StageID == StageID) {
                                    if (parseInt(this.strStageId) < 10) {
                                        $('#stagenumber').text(this.dealStageList[i].StageID);
                                        $('#stagename').text(this.dealStageList[i].STAGE_NAME.substring(2));
                                    }
                                    else if (parseInt(this.strStageId) >= 10) {
                                        $('#stagenumber').text(this.dealStageList[i].StageID);
                                        $('#stagename').text(this.dealStageList[i].STAGE_NAME.substring(3));
                                    }
                                }
                            }
                            if (this.userUnit == "1") {
                                this.dealStageList.find(x => x.StageID == 13).STAGE_NAME = "13-Closed/Disqualified";
                            }
                        }
                    });

            },
            error => { throw error; }
        )
    }
    PopulateCategory() {
        this.dealCategoryService.GetDealCategory().subscribe(

            resultArray => {
                this.dealCategoryList = resultArray
            },
            error => { throw error; }
        )
    }
    AllowPattern(event) {
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        var regex = new RegExp("[-A-Za-z0-9&() ]");
        if (regex.test(key)) {
            return key;
        }
        else {
            event.preventDefault();
            return false;
        }
    }
    AllowPatternWithComma(event) {
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        var regex = new RegExp("[-A-Za-z0-9&(), ]");
        if (regex.test(key)) {
            return key;
        }
        else {
            event.preventDefault();
            return false;
        }
    }
    SetDefaultValues() {

        if (this.unitText == "2") {

        }
        else {
            this.DdlVertical.vertical = 1;

        }
    }

    GetSubSP() {

        this.createNewOpportunityService.GetSubSP().subscribe(
            resultArray => this.iSubSPList = resultArray,
            error => { throw error; },
        )
    }

    ChangeFYQTR(event: any) {
        let qtr: number;
        let fys: number;
        let fye: number;
        if (event != 0) {
            this.expectedDealClosure = event;
        }
        else if (event == 0) {
            this.expectedRevenueQtrYr = { FiscalYear:  this.expectedRevenueQtr + " - " + this.expectedRevenueFY, Qtr: this.expectedRevenueQtr, Fyr: this.expectedRevenueFY };
        }
        this.expectedRevenueQtrYrList = [];

        if (this.expectedDealClosure != undefined) {


            if (this.expectedDealClosure.date.month >= 1 && this.expectedDealClosure.date.month <= 3) {
                qtr = 4;
            }
            else if (this.expectedDealClosure.date.month >= 4 && this.expectedDealClosure.date.month <= 6) {
                qtr = 1;
            }
            else if (this.expectedDealClosure.date.month >= 7 && this.expectedDealClosure.date.month <= 9) {
                qtr = 2;
            }
            else if (this.expectedDealClosure.date.month >= 10 && this.expectedDealClosure.date.month <= 12) {
                qtr = 3;
            }
            if (qtr == 4) {
                fys = Number(this.expectedDealClosure.date.year) - 1;
                fye = Number(this.expectedDealClosure.date.year);
                this.expectedRevenueFY = "FY " + fys.toString().substring(2) + '-' + fye.toString().substring(2);
            }
            else {
                fys = Number(this.expectedDealClosure.date.year);
                fye = Number(this.expectedDealClosure.date.year) + 1;
                this.expectedRevenueFY = "FY " + fys.toString().substring(2) + '-' + fye.toString().substring(2);
            }
           
            let k = 0;
            let varUnit = 0;
            if (this.userUnit == '1') {
                varUnit = 4;
            }
            else if (this.userUnit == '2') {
                varUnit = 8;
            }
            while (k < varUnit) {
                for (var j = 0; j < 4; j++) {
                    this.expectedRevenueQtrYrList.push({ FiscalYear: "Q" + qtr + " - FY " + fys.toString().substring(2) + '-' + fye.toString().substring(2), Qtr: qtr, Fyr: "FY " + fys.toString().substring(2) + '-' + fye.toString().substring(2) });
                    if (qtr == 4) {
                        qtr = 1;
                        k++;
                        break;
                    }
                    else {
                        qtr++;
                        k++;
                    }
                    if (k > (varUnit - 1)) {
                        break;
                    }
                }
                fys++;
                fye++;
            }
        }

    }



    Get_Stage() {

        this.Common_Get_MaxStage();
        if (this.userUnit == "1") {
            this.Get_Next_Step();
            this.Get_Status_Update();
        }
        this.stage9Service.Stage9_Populate_Get_stage9(this.opportunityId, this.constant.Stage9ID).subscribe(
            resultArray => {
                this.newOpportunityList = resultArray;
                if (this.newOpportunityList.length > 0) {
                    
                    if (!isNullOrUndefined(this.newOpportunityList[0].Submitted_DT) && this.newOpportunityList[0].Submitted_DT != "") {
                        this.disableAllFields = true;
                        this.disableStage = "true";
                        this.disablevertical = true;
                        this.showaftersubmit = true;
                        this.successMessage = ValidationMessage.SUBMITTED_ID;
                        this.lblError0 = ValidationMessage.SUCCESS;
                    }

                    if (this.newOpportunityList[0].OPPORTUNITY_DATE != "") {
                        let start: any = new Date(this.newOpportunityList[0].OPPORTUNITY_DATE)
                        let end: any = new Date();
                        let diff: any = new Date(end - start);
                        this.dealageing = Math.floor(diff / 1000 / 60 / 60 / 24);
                    }

                    if (this.newOpportunityList[0].ActualCloseDate != "") {
                        this.actualclosedate = this.newOpportunityList[0].ActualCloseDate;
                    }
                    if (this.newOpportunityList[0].DealClosureReason != "") {
                        this.dealClosureReason = this.newOpportunityList[0].DealClosureReason;
                    }
                    if (this.newOpportunityList[0].OpportunityId != "") {
                        this.opportunityId = this.newOpportunityList[0].OpportunityId;
                    }
                    if (this.newOpportunityList[0].OPPORTUNITY_DESC != "") {
                        this.opportunityDescription = this.newOpportunityList[0].OPPORTUNITY_DESC;
                    }
                    if (this.newOpportunityList[0].OpportunityDescDetails != "") {
                        this.opportunityDescDetails = this.newOpportunityList[0].OpportunityDescDetails;
                    }
                    if (this.newOpportunityList[0].StageID != "") {
                        this.stagePrIInfo = this.newOpportunityList[0].StageID;
                    }

                    if (this.newOpportunityList[0].GEOGRAPHY_NAME != "") {
                        this.txtGeography = this.newOpportunityList[0].GEOGRAPHY_NAME;
                    }

                    if (this.newOpportunityList[0].GEOGRAPHY_ID != "") {

                        this.GeographyComponent.geography = parseInt(this.newOpportunityList[0].GEOGRAPHY_ID);
                        this.GetCountry();
                    }
                    if (this.newOpportunityList[0].INDUSTRY_PRACTICE_ID != "") {
                        this.industryPracticeid = parseInt(this.newOpportunityList[0].INDUSTRY_PRACTICE_ID);
                    }
                    if (this.newOpportunityList[0].COUNTRY_ID != "") {
                        this.strCountryId = parseInt(this.newOpportunityList[0].COUNTRY_ID);
                    }

                    if (this.newOpportunityList[0].CUST_NAME != "") {
                        this.txtCustomerName = this.newOpportunityList[0].CUST_NAME;
                    }
                    if (this.newOpportunityList[0].CUST_ID != "") {
                        this.strCustomerID = this.newOpportunityList[0].CUST_ID;
                    }

                    if (this.newOpportunityList[0].CUST_TYPE_ID != "") {
                        this.strCustTypeID = parseInt(this.newOpportunityList[0].CUST_TYPE_ID);
                    }




                    if (this.newOpportunityList[0].ISU_CD != "") {
                        this.strIsuCd = this.newOpportunityList[0].ISU_CD;
                        this.DdlIOU.iou = this.newOpportunityList[0].ISU_CD;
                        this.GetsatgeGetSubIOU(this.strIsuCd);
                    }
                    if (this.newOpportunityList[0].ISU_OWNER_ID != "") {
                        this.isuOwnerId = this.newOpportunityList[0].ISU_OWNER_ID;
                    }


                    if (this.newOpportunityList[0].ISU_NAME != "") {
                        this.txtIOUName = this.newOpportunityList[0].ISU_NAME;
                    }
                    if (this.newOpportunityList[0].GEOGRAPHY_SALES_OWNER_ID != "") {
                        this.GeographySalesOwner.geographySalesOwner = parseInt(this.newOpportunityList[0].GEOGRAPHY_SALES_OWNER_ID);


                    }
                    else {
                        this.GeographySalesOwner.geographySalesOwner = 0;
                    }
                    if (this.newOpportunityList[0].MULTITOWER_DEAL != "") {
                        this.YMultitowerDeal = this.newOpportunityList[0].MULTITOWER_DEAL;
                        this.Get_Business_BFS1();
                        this.LoadVerticalData();
                        this.Get_Domain_Business_BFS1();
                        this.GetServiceName();
                        this.GetVerticalOpportunityDomainData();
                        this.GetServiceOpportunityData();
                        if (this.YMultitowerDeal == 'Yes') {
                            this.showMultiTower = 'Yes';
                            this.IfYes = true;

                            $('#YMultitowerDeal').removeClass('btn-default');
                            $('#YMultitowerDeal').addClass('btn-primary active');
                            $('#NMultitowerDeal').removeClass('btn-primary active');
                            $('#NMultitowerDeal').addClass('btn-default');
                        }
                        else if (this.YMultitowerDeal == 'No') {
                            this.showMultiTower = 'No';
                            $('#NMultitowerDeal').removeClass('btn-default');
                            $('#NMultitowerDeal').addClass('btn-primary active');
                            $('#YMultitowerDeal').removeClass('btn-primary active');
                            $('#YMultitowerDeal').addClass('btn-default');
                        }
                    }

                    if (this.newOpportunityList[0].OPP_TYPE != "") {

                        if (this.newOpportunityList[0].OPP_TYPE == "1") {
                            this.opportunityTrackedBy = 1;

                            $('#TrackedByYes').removeClass('btn-default');
                            $('#TrackedByYes').addClass('btn-primary active');
                            $('#TrackedByNo').removeClass('btn-primary active');
                            $('#TrackedByNo').addClass('btn-default');
                        }
                        else if (this.newOpportunityList[0].OPP_TYPE == "2") {
                            this.opportunityTrackedBy = 2;
                            $('#TrackedByNo').removeClass('btn-default');
                            $('#TrackedByNo').addClass('btn-primary active');
                            $('#TrackedByYes').removeClass('btn-primary active');
                            $('#TrackedByYes').addClass('btn-default');
                        }

                    }
                    
                                        if (this.newOpportunityList[0].PLATFORM != ""){
                                            if(this.newOpportunityList[0].PLATFORM =='Yes')
                                            {
                                                this.YesPlatform();
                                            }
                                            else if(this.newOpportunityList[0].PLATFORM =='No')
                                            {
                                                this.NoPlatform();
                                            }
                                        }
                    
                    if (this.newOpportunityList[0].DEAL_CLOSURE_EXP_DATE != "") {
                        this.expectedDealClosure = this.newOpportunityList[0].DEAL_CLOSURE_EXP_DATE;
                        var check = moment( this.expectedDealClosure, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.expectedDealClosure = { date: { day: this.date, month: this.month, year: this.year } };
                        this.lblError1 = this.expectedDealClosure;



                    }

                    if (this.newOpportunityList[0].BUSINESS_ID != "") {
                        this.DdlVertical.vertical = this.newOpportunityList[0].BUSINESS_ID;
                        this.verticalgrid = this.newOpportunityList[0].BUSINESS_ID;
                        if (this.userUnit == "1") {
                            this.Get_Level1_Vertical(0, 0);
                        }
                    }
                    if (this.newOpportunityList[0].COUNTRY_ID != "") {
                        this.DdlCountry.country = parseInt(this.newOpportunityList[0].COUNTRY_ID);
                    }

                    if (this.newOpportunityList[0].CRM_ID != "") {
                        this.cRMid = this.newOpportunityList[0].CRM_ID;
                        if(this.cRMid=="0-Awaited")
                        {
                            this.cRMid="";
                        }
                    }

                    if (this.newOpportunityList[0].IESTIMATED_FTE_SIZE != "") {
                        this.potentialFTE = this.newOpportunityList[0].IESTIMATED_FTE_SIZE;
                    }
                    if (this.newOpportunityList[0].ContractLength != "") {
                        this.dealTerm = parseInt(this.newOpportunityList[0].ContractLength);
                    }


                    if (this.newOpportunityList[0].ACCOUNT_SALES_OWNER_ID != "") {
                        this.AccountSalesOwner.accountSalesOwner = parseInt(this.newOpportunityList[0].ACCOUNT_SALES_OWNER_ID);
                    }
                    if (this.newOpportunityList[0].CONTRACT_NEGOTIATION_DT != "") {
                        var check = moment( this.newOpportunityList[0].CONTRACT_NEGOTIATION_DT, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.contractCloserdate = { date: { day: this.date, month: this.month, year: this.year } };
                      
                    }

                    if (this.newOpportunityList[0].OFFSHORE_BD_LEAD_ID != "") {
                        
                        
                        this.OffshorePresalesLeadHorizontal.OffShoreHorz = parseInt(this.newOpportunityList[0].OFFSHORE_BD_LEAD_ID);
                    }

                    if (this.newOpportunityList[0].DEAL_BD_LEAD_ID != "") {
                        this.DdlDealOwner1.dealOwner1 = parseInt(this.newOpportunityList[0].DEAL_BD_LEAD_ID);


                    }
                    if (this.newOpportunityList[0].DEAL_BD_LEAD_ID2 != "") {
                        this.DdlDealOwner2.dealOwner2 = parseInt(this.newOpportunityList[0].DEAL_BD_LEAD_ID2);
                    }




                    if (this.newOpportunityList[0].DealCategory != "") {
                        for (let i = 0; i < this.dealCategoryList.length; i++) {
                            if (this.dealCategoryList[i].DealCategoryId == parseInt(this.newOpportunityList[0].DealCategory)) {
                                $('#categorynumber').text(this.dealCategoryList[i].DealCategoryName.slice(0, 1));
                                this.dealCategoryId = this.dealCategoryList[i].DealCategoryId;
                                if ((this.dealCategoryId == 4 || this.dealCategoryId == 3) && this.userUnit == "1") {
                                    this.disableContractRenewal = 1;
                            }
                        }
                    }
                    }
                    if (this.newOpportunityList[0].SERVICE_ID != "") {
                        this.DdlService.service = parseInt(this.newOpportunityList[0].SERVICE_ID);
                        this.service = parseInt(this.newOpportunityList[0].SERVICE_ID);
                        this.GetBPSOffering();
                    }
                    else {
                        if (this.newOpportunityList[0].SERVICE_ID == "0") {
                            this.DdlService.service = 0;

                        }
                        else {
                            this.DdlService.service = parseInt(this.newOpportunityList[0].SERVICE_ID);
                        }
                        this.service = parseInt(this.newOpportunityList[0].SERVICE_ID);

                    }

                    if (this.newOpportunityList[0].BPS_OFFERING_ID != "") {
                       
                        this.bpsoffering = parseInt(this.newOpportunityList[0].BPS_OFFERING_ID);
                    }



                    if (this.newOpportunityList[0].DTOTAL_CONTRACT_VALUE != "") {
                        this.strTCV = this.newOpportunityList[0].DTOTAL_CONTRACT_VALUE;
                        this.dbTCV = Number(this.strTCV);
                        this.totalContractValue = ((this.dbTCV)).toString();
                        this.totalContractValue=this.NewFomattedInput(this.totalContractValue);
                        this.strTCVMail = ((this.dbTCV)).toString();

                    }
                    else {
                        this.totalContractValue = this.newOpportunityList[0].DTOTAL_CONTRACT_VALUE;
                        this.strTCVMail = this.newOpportunityList[0].DTOTAL_CONTRACT_VALUE;

                    }

                    if (this.newOpportunityList[0].EXECUTIVE_SPONSOR != "") {
                        this.ExecutiveSponsor.executivesponsor = parseInt(this.newOpportunityList[0].EXECUTIVE_SPONSOR);
                    }

                    if (this.newOpportunityList[0].PROACTIVE_PROPOSAL != "") {
                        this.proactiveProposalY = this.newOpportunityList[0].PROACTIVE_PROPOSAL;
                        if (this.proactiveProposalY == "Yes") {
                            this.shoWProactiveProposal = 'Yes';

                            $('#proactiveProposalY').removeClass('btn-default');
                            $('#proactiveProposalY').addClass('btn-primary active');
                            $('#proactiveProposalN').removeClass('btn-primary active');
                            $('#proactiveProposalN').addClass('btn-default');
                        }
                        else if (this.proactiveProposalY == "No") {
                            this.shoWProactiveProposal = 'No';
                            $('#proactiveProposalN').removeClass('btn-default');
                            $('#proactiveProposalN').addClass('btn-primary active');
                            $('#proactiveProposalY').removeClass('btn-primary active');
                            $('#proactiveProposalY').addClass('btn-default');
                        }

                    }


                    if (this.newOpportunityList[0].ISU_MAIN != "") {
                        this.isu = parseInt(this.newOpportunityList[0].ISU_MAIN);
                        this.GetIOU(this.isu);
                    }
                    if (this.newOpportunityList[0].SUB_IOU != "") {
                        this.SubIouComp.subiou = parseInt(this.newOpportunityList[0].SUB_IOU);
                    }


                    if (this.newOpportunityList[0].Quarter != "") {
                        this.expectedRevenueQtr = this.newOpportunityList[0].Quarter;
                    }
                    if (this.newOpportunityList[0].FISCAL_YEAR != "") {
                        this.expectedRevenueFY = this.newOpportunityList[0].FISCAL_YEAR;
                    }


                    if (this.newOpportunityList[0].DT_ID != "") {

                        this.getDigitalTransformation.getDigital = parseInt(this.newOpportunityList[0].DT_ID);

                        this.ActiveDF();
                    }
                    else {
                        this.getDigitalTransformation.getDigital = 0;
                        this.InActiveDF();
                    }
                    if (this.newOpportunityList[0].strDigitalTcv != "") {
                        this.strDigitalTcv = this.newOpportunityList[0].strDigitalTcv;
                      
                        this.digitalTcv = ((this.digitalTcv) );
                    }
                    else {
                        this.digitalTcv = 0;
                    }

                    if (this.newOpportunityList[0].LAST_UPDATE != "") {
                        this.lastUpdatedby = this.newOpportunityList[0].LAST_UPDATE;
                    }
                    if (this.newOpportunityList[0].OPPORTUNITY_DATE != "") {
                        this.oppDate = this.newOpportunityList[0].OPPORTUNITY_DATE;
                        var check = moment( this.oppDate, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.oppDate = { date: { day: this.date, month: this.month, year: this.year } };
                        this.nextstepduedt = this.oppDate;
                    }
                    if (this.newOpportunityList[0].ONSITE_OWNER != "") {
                        this.OffshorePresalesLeadHorizontal.OffShoreHorz = this.newOpportunityList[0].ONSITE_OWNER;
                    }
                    if (this.newOpportunityList[0].OFFSHORE_BD_LEAD != "") {
                        this.OffshorePresalesLeadVertical.OffShoreverti = this.newOpportunityList[0].OFFSHORE_BD_LEAD;
                    }

                    if (this.newOpportunityList[0].PROPOSAL_FACTORY != "") {
                        this.yeWasProposal = this.newOpportunityList[0].PROPOSAL_FACTORY.trim();
                        if (this.yeWasProposal.trim() == "Yes") {
                            this.YesWasProposal();
                            $('#YeIWasProposal').removeClass('btn-default');
                            $('#YeIWasProposal').addClass('btn-primary active');
                            $('#NIWasProposal').removeClass('btn-primary active');
                            $('#NIWasProposal').addClass('btn-default');


                        }
                        else {
                            this.NoWasProposal();
                            $('#NIWasProposal').removeClass('btn-default');
                            $('#NIWasProposal').addClass('btn-primary active');
                            $('#YeIWasProposal').removeClass('btn-primary active');
                            $('#YeIWasProposal').addClass('btn-default');

                        }
                    }


                    if (this.newOpportunityList[0].ServicePractice != "") {
                        this.ServicePracticeID = this.newOpportunityList[0].ServicePractice;
                    }

                    if (this.newOpportunityList[0].PROPOSAL_FACTORY_OPTIONS != "") {
                        this.pleaseratetheproposal = this.newOpportunityList[0].PROPOSAL_FACTORY_OPTIONS;

                    }
                    if (this.newOpportunityList[0].PROPOSAL_FACTORY_COMMENTS != "") {
                        this.proposalComments = this.newOpportunityList[0].PROPOSAL_FACTORY_COMMENTS;
                    }



                    if (this.newOpportunityList[0].PIBS != "") {
                        this.yesPIBS = this.newOpportunityList[0].PIBS;
                        if (this.yesPIBS == "Yes") {
                            this.shoWPibs = 'Yes'
                            $('#yesPIBS').removeClass('btn-default');
                            $('#yesPIBS').addClass('btn-primary active');
                            $('#noPIBS').removeClass('btn-primary active');
                            $('#noPIBS').addClass('btn-default');
                        }
                        else if (this.yesPIBS == "No") {
                            this.shoWPibs = 'No'
                            $('#noPIBS').removeClass('btn-default');
                            $('#noPIBS').addClass('btn-primary active');
                            $('#yesPIBS').removeClass('btn-primary active');
                            $('#yesPIBS').addClass('btn-default');
                        }
                    }
                    if (this.userUnit == "1") {
                        if (this.newOpportunityList[0].CoreOffering != "") {
                            this.CoreOfferingID = this.newOpportunityList[0].CoreOffering;
                        }
                        if (this.newOpportunityList[0].DealStatus != "") {
                            this.DealstatusID = this.newOpportunityList[0].DealStatus;
                            this.ChangeDealStatusColor();
                        }
                        if (this.newOpportunityList[0].SEAT_IDENTIFICATION_ID != 0) {
                            this.identificationId = this.newOpportunityList[0].SEAT_IDENTIFICATION_ID;
                            this.identificationId = Number(this.identificationId);
                            this.ChangeSeatColor();
                        }
                        if (this.newOpportunityList[0].RESOURCING_ID != 0) {
                            this.resourcingId = this.newOpportunityList[0].RESOURCING_ID;
                            this.resourcingId = Number(this.resourcingId);
                            this.ChangeResourcingColor();
                        }
                        if (this.newOpportunityList[0].TataGroupAccount != "") {
                            this.yesTGA = this.newOpportunityList[0].TataGroupAccount;

                            if (this.yesTGA == "Yes") {
                                this.showTGA = 'Yes'

                                $('#yesTGA').removeClass('btn-default');
                                $('#yesTGA').addClass('btn-primary active');
                                $('#noTGA').removeClass('btn-primary active');
                                $('#noTGA').addClass('btn-default');


                            }
                            else if (this.yesTGA == "No") {
                                this.showTGA = 'No'
                                $('#noTGA').removeClass('btn-default');
                                $('#noTGA').addClass('btn-primary active');
                                $('#yesTGA').removeClass('btn-primary active');
                                $('#yesTGA').addClass('btn-default');

                            }

                        }
                    }
                    if (!isNullOrUndefined(this.newOpportunityList[0].BCP_DRP_LOCATION) || this.newOpportunityList[0].BCP_DRP_LOCATION != "") {
                        this.BCPorDRPLocation = this.newOpportunityList[0].BCP_DRP_LOCATION;
                    }
                    if (this.newOpportunityList[0].RFI_ReviewDate != "") {
                        
                        var check = moment(this.newOpportunityList[0].RFI_ReviewDate, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.RFIReviewDate = { date: { day: this.date, month: this.month, year: this.year } };
                        
                       
                    }

                    if (this.newOpportunityList[0].RFP_ReviewDate != "") {
                        var check = moment(this.newOpportunityList[0].RFP_ReviewDate, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.RFPReviewDate = { date: { day: this.date, month: this.month, year: this.year } };
                        
                      
                    }
                    if (this.newOpportunityList[0].RFI_ReceivedDate != "") {
                       
                        var check = moment(this.newOpportunityList[0].RFI_ReceivedDate, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.RFIReceivedDate = { date: { day: this.date, month: this.month, year: this.year } };
                       
                    }
                    if (this.newOpportunityList[0].SELECTION_DT != "") {
                       
                        var check = moment(this.newOpportunityList[0].SELECTION_DT, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.selectionDate = { date: { day: this.date, month: this.month, year: this.year } };
                       
                        
                    }
                    if (this.newOpportunityList[0].SHORTLIST_DT != "") {
                        
                        var check = moment(this.newOpportunityList[0].SHORTLIST_DT, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.shortlistDate = { date: { day: this.date, month: this.month, year: this.year } };
                       
                        
                    }
                    if (this.newOpportunityList[0].RFP_ReceivedDate != "") {
                       
                        var check = moment(this.newOpportunityList[0].RFP_ReceivedDate, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.RFPReceivedDate = { date: { day: this.date, month: this.month, year: this.year } };
                     
                       
                    }
                    if (this.newOpportunityList[0].RFI_ProbableSubmissionDate != "") {
                        var check = moment(this.newOpportunityList[0].RFI_ProbableSubmissionDate, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.probableRFISubDate = { date: { day: this.date, month: this.month, year: this.year } };
                     
                      
                    }

                    if (this.newOpportunityList[0].RFP_ProbableSubmissionDate != "") {
                        var check = moment(this.newOpportunityList[0].RFP_ProbableSubmissionDate, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.probableRFPSubDate = { date: { day: this.date, month: this.month, year: this.year } };
                     
                    }

                    if (this.newOpportunityList[0].RFI_ActualSubmissionDate != "") {
                       
                        var check = moment(this.newOpportunityList[0].RFI_ActualSubmissionDate, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.actualRFISubDate = { date: { day: this.date, month: this.month, year: this.year } };
                     
                       
                        
                    }
                    if (this.newOpportunityList[0].RFP_ActualSubmissionDate != "") {
                        
                        var check = moment(this.newOpportunityList[0].RFP_ActualSubmissionDate, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.actualRFPSubDate = { date: { day: this.date, month: this.month, year: this.year } };
                     
                       
                    }
                    if (this.newOpportunityList[0].CURRENCY_ID != null && this.newOpportunityList[0].CURRENCY_ID != 0) {
                        this.currency = this.newOpportunityList[0].CURRENCY_ID;
                    }
                    if (this.newOpportunityList[0].FTEOff != null) {
                        this.FTEOffshore = this.newOpportunityList[0].FTEOff;
                    }
                    if (this.newOpportunityList[0].FTEOn != null) {
                        this.FTEOnsite = this.newOpportunityList[0].FTEOn;
                    }

                    if (this.newOpportunityList[0].TRAINING_DURATION != "" && !isNullOrUndefined(this.newOpportunityList[0].TRAINING_DURATION)) {
                        this.durationofTraining = this.newOpportunityList[0].TRAINING_DURATION;
                    }
                    if (this.newOpportunityList[0].ONSITE_TRAINING_NOS != "" && !isNullOrUndefined(this.newOpportunityList[0].ONSITE_TRAINING_NOS)) {
                        this.onsiteTraining = this.newOpportunityList[0].ONSITE_TRAINING_NOS;
                    }
                    if (this.newOpportunityList[0].RFI_REVIEW_BY != "") {
                        this.RFIReviewReqd = this.newOpportunityList[0].RFI_REVIEW_BY;
                    }
                    if (this.newOpportunityList[0].RFP_REVIEW_BY != "") {
                        this.RFPReviewReqd = this.newOpportunityList[0].RFP_REVIEW_BY;
                    }
                    if (this.newOpportunityList[0].CRM_STAGE != "") {
                        this.cRMStage = this.newOpportunityList[0].CRM_STAGE;
                        this.CRMStage.cRMStage = this.cRMStage;
                    }
                    if (this.newOpportunityList[0].CRM_TCV != "") {
                        this.cRMTCV = this.newOpportunityList[0].CRM_TCV;
                    
                        this.cRMTCV = ((this.cRMTCV)).toString();
                    }

                    if (this.newOpportunityList[0].IsContractRenewal != "") {
                        this.ContractRenewalActive = this.newOpportunityList[0].IsContractRenewal;

                        if (this.ContractRenewalActive == "Yes") {
                            this.contractRenewal = 'Yes';
                            this.CheckContractRenewal(1);
                            $('#ContractRenewalActive').removeClass('btn-default');
                            $('#ContractRenewalActive').addClass('btn-primary active');
                            $('#ContractRenewalInActive').removeClass('btn-primary active');
                            $('#ContractRenewalInActive').addClass('btn-default');
                            if (this.newOpportunityList[0].ContractRenewalValue != "") {
                                this.ContractRenewalValue = this.newOpportunityList[0].ContractRenewalValue;
                            }
                            else {
                                this.ContractRenewalValue = null;

                            }

                        }
                        else if (this.ContractRenewalActive == "No") {
                            this.contractRenewal = 'No';
                            this.CheckContractRenewal(0);
                            $('#ContractRenewalInActive').removeClass('btn-default');
                            $('#ContractRenewalInActive').addClass('btn-primary active');
                            $('#ContractRenewalActive').removeClass('btn-primary active');
                            $('#ContractRenewalActive').addClass('btn-default');

                        }
                    }

                    if (this.newOpportunityList[0].CRM_Beacon != "" && this.userUnit == "1") {
                        this.cRMBeacon = this.newOpportunityList[0].CRM_Beacon;
                        this.cRMBeacon = Number(this.cRMBeacon);
                        this.cRMBeacon = ((this.cRMBeacon) / 1000000.00).toString();

                    }





                    if (this.userUnit == "1") {

                        if (this.newOpportunityList[0].PROPOSAL_SUBMISSION_DATE != null && this.newOpportunityList[0].PROPOSAL_SUBMISSION_DATE != 0) {
                           
                            var check = moment(this.newOpportunityList[0].PROPOSAL_SUBMISSION_DATE, 'DD-MMM-YYYY');
                            this.month = check.format('M');
                            this.date = check.format('D');
                            this.year   = check.format('YYYY');
                    
                            this.proposalSubmissionDate = { date: { day: this.date, month: this.month, year: this.year } };
                         
                         

                        }
                        if (this.newOpportunityList[0].SALES_STAGE_MOVED_ONDATE != null && this.newOpportunityList[0].SALES_STAGE_MOVED_ONDATE != 0) {
                           

                            var check = moment(this.newOpportunityList[0].SALES_STAGE_MOVED_ONDATE, 'DD-MMM-YYYY');
                            this.month = check.format('M');
                            this.date = check.format('D');
                            this.year   = check.format('YYYY');
                    
                            this.salesStageMovedOnDate = { date: { day: this.date, month: this.month, year: this.year } };
                         
                           
                       

                        }

                        this.previousDealStage = this.newOpportunityList[0].Previous_Deal_Stage;
                        if (this.newOpportunityList[0].offeringType != 0) {
                            this.OfferingTypeID = this.newOpportunityList[0].offeringType;
                        }
                        if (this.newOpportunityList[0].CofID != "") {
                            this.CoreOfferingsNameID = this.newOpportunityList[0].CofID;
                        }
                        if (this.newOpportunityList[0].DigitalFlagging != "") {

                            if (this.newOpportunityList[0].DigitalFlagging == "Yes") {
                                this.showDF = 'Yes'
                                $('#yesDF').removeClass('btn-default');
                                $('#yesDF').addClass('btn-primary active');
                                $('#noDF').removeClass('btn-primary active');
                                $('#noDF').addClass('btn-default');
                            }
                            else if (this.newOpportunityList[0].DigitalFlagging == "No") {
                                this.showDF = 'No'
                                $('#noDF').removeClass('btn-default');
                                $('#noDF').addClass('btn-primary active');
                                $('#yesDF').removeClass('btn-primary active');
                                $('#yesDF').addClass('btn-default');

                            }
                        }
                        if (this.newOpportunityList[0].ItisScope != "") {
                            this.ITISScopeActive = this.newOpportunityList[0].ItisScope;

                            if (this.ITISScopeActive == "Yes") {
                                this.itIsScope = 'Yes'

                                $('#ITISScopeActive').removeClass('btn-default');
                                $('#ITISScopeActive').addClass('btn-primary active');
                                $('#ITISScopeInActive').removeClass('btn-primary active');
                                $('#ITISScopeInActive').addClass('btn-default');
                                if (this.newOpportunityList[0].ItisScope != "") {
                                    this.itIsScope = this.newOpportunityList[0].ItisScope;
                                }
                                else {
                                    this.itIsScope = null;
                                }


                            }
                            else if (this.ITISScopeActive == "No") {
                                this.itIsScope = 'No'
                                $('#ITISScopeInActive').removeClass('btn-default');
                                $('#ITISScopeInActive').addClass('btn-primary active');
                                $('#ITISScopeActive').removeClass('btn-primary active');
                                $('#ITISScopeActive').addClass('btn-default');

                            }

                        }

                    }
                    //rajat
                    
                    if (this.newOpportunityList[0].DEAL_REASON1 != 0) {
                        this.dealReason1 = +this.newOpportunityList[0].DEAL_REASON1;
                    }
                    else {
                        this.dealReason1 = 0;
                    }
                    if (this.newOpportunityList[0].DEAL_REASON2 != 0) {
                        this.dealReason2 = +this.newOpportunityList[0].DEAL_REASON2;
                    }
                    else {
                        this.dealReason2 = 0;
                    }
                    if (this.newOpportunityList[0].DEAL_REASON3 != 0) {
                        this.dealReason3 = this.newOpportunityList[0].DEAL_REASON3;
                    }
                    else {
                        this.dealReason3 = 0;
                    }
                    if (this.newOpportunityList[0].PROJECT_WON != "") {
                        this.wonnumber = this.newOpportunityList[0].PROJECT_WON;
                    }
                    if (this.newOpportunityList[0].Next_Step_Notes != "") {
                        this.nextstepfrompreviousreview = this.newOpportunityList[0].Next_Step_Notes;
                    }
                    if (this.newOpportunityList[0].WON_FTE != 0) {
                        this.wonfte = this.newOpportunityList[0].WON_FTE;
                    }

                    if (this.newOpportunityList[0].REVENUE_MONTHS != "") {
                        this.currentfiscal = this.newOpportunityList[0].REVENUE_MONTHS;
                    }
                    if (this.newOpportunityList[0].ANTICIPATED_ACTUAL_STDT != "") {
                        
                        var check = moment(this.newOpportunityList[0].ANTICIPATED_ACTUAL_STDT, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.actualstartdate = { date: { day: this.date, month: this.month, year: this.year } };
                    

                    }
                    if (this.newOpportunityList[0].Contract_Closure_Date != "") {
                       
                        var check = moment(this.newOpportunityList[0].Contract_Closure_Date, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.contractclosuredate = { date: { day: this.date, month: this.month, year: this.year } };
                     
                     

                    }
                    if (this.newOpportunityList[0].WIN_VERBATIM != "") {
                        this.winverbatim = this.newOpportunityList[0].WIN_VERBATIM;
                    }
                    if (this.newOpportunityList[0].WIN_DT != "") {
                        
                        var check = moment(this.newOpportunityList[0].WIN_DT, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.windate = { date: { day: this.date, month: this.month, year: this.year } };
                     
                        

                    }
                    if (this.newOpportunityList[0].CURRENT_FISCAL_REVENUE != "") {
                        this.revenue = this.newOpportunityList[0].CURRENT_FISCAL_REVENUE;
                    }
                    if (this.newOpportunityList[0].WON_FINAL_TCV != "") {
                        this.wonfinaltcv = this.newOpportunityList[0].WON_FINAL_TCV;
                    }
                    if (this.newOpportunityList[0].Category_RAG != "") {
                        this.categoryrag = this.newOpportunityList[0].Category_RAG;
                    }

                }

                if (this.newOpportunityList[0].GEOGRAPHY_ID != "") {
                    if (this.userUnit != "1") {
                        this.disabledgeo = true;
                    }

                }
                else {
                    this.GeographyComponent.geography = 0
                    this.disabledgeo = false;
                }

                if (this.newOpportunityList[0].subSPId != "") {
                    this.subSPId = Number(this.newOpportunityList[0].subSPId);
                }

                if(this.newOpportunityList[0].Cboi_Offering_id!="")
                {
                    this.cboiofferingvalue=this.newOpportunityList[0].Cboi_Offering_id;
                }

                if(this.newOpportunityList[0].Deal_Flag_id!="")
                {
                    this.dealflagvalue=this.newOpportunityList[0].Deal_Flag_id;
                }
                this.DisableOfferingType();
                this.ChangeFYQTR(0);
                this.SetFYQtr();


            },
            error => { throw error; },
        )
    }

    Common_Get_MaxStage() {

        this.createNewOppurtunityStage0Service.Get_MaxStage(this.opportunityId).subscribe(
            resultArray => {
                if (resultArray != null || resultArray != undefined) {
                    if (resultArray > 0) {
                        this.disableCountry = true;
                        this.disabledplatform = true;
                        this.disablevertical = true;
                        this.disableOffshorePresalesLead = true;
                        this.disableAccountSalesOwner = true;
                        this.disableOffshoreExecutiveSponsor = true;
                        this.disableGeographySalesOwner = true;
                        this.disableISUName = true;

                    }
                }
            },
            error => { throw error; },
        )
    }
    Get_TCV_CRM() {
        this.createNewOppurtunityStage0Service.Common_Get_TCV_CRM(this.opportunityId).subscribe(
            resultArray => {
                this.newOpportunityList = resultArray;
                if (this.newOpportunityList.length > 0) {
                    if (this.newOpportunityList[0].CRM_TCV != "") {
                        this.cRMStage = this.newOpportunityList[0].CRM_TCV;
                    }
                    if (this.newOpportunityList[0].CRM_STAGE != "") {
                        this.cRMTCV = this.newOpportunityList[0].CRM_STAGE;
                    }

                }
                else {
                    this.cRMStage = null;
                    this.cRMTCV = null;
                }

            },
            error => { throw error; },
        )
    }

    GetIOU(isuId: number) {
        if (isuId != 0) {
            this.isuService.GetIOU(this.userUnit, isuId).subscribe(
                resultArray => this.iouList = resultArray,
                error => { throw error; },
            )
        }
        else {
            this.iouList = null;
            this.iou = 0;
        }
    }
    GetSubIOU() {
        if (this.iou != 0) {
            this.isuService.GetSubIOU(this.iou).subscribe(
                resultArray => this.subiouList = resultArray,
                error => { throw error; },
            )
        }
        else {
            this.SubIouComp.subiouList = null;
            this.SubIouComp.subiou = 0;
        }

    }
    GetsatgeGetSubIOU(strIsuCd: string) {
        if (strIsuCd != "" || !isNullOrUndefined(strIsuCd)) {
            this.isuService.GetSubIOU(strIsuCd).subscribe(
                resultArray => this.subiouList = resultArray,
                error => { throw error; },
            )
        }
        else {
            this.SubIouComp.subiouList = null;
            this.SubIouComp.subiou = 0;
        }

    }
    GetGeography() {
        if (this.DdlCountry.country != 0) {
            this.createNewOpportunityService.GetGeography(this.DdlCountry.country).subscribe(
                resultArray => {
                    this.getgeographyList = resultArray,
                        this.GeographyComponent.geography = this.getgeographyList[0].GeographyId;
                },
                error => { throw error; },
            )
        }
        else {
            this.GeographyComponent.geography = 0;
        }
    }
    GetCustomerName() {
        this.createNewOpportunityService.GetCustomerName(this.userUnit).subscribe(

            resultArray => this.customerNameList = resultArray,
            error => { throw error; },

        )

    }
    GetFiscalYear() {
        this.createNewOpportunityService.GetFiscalYear().subscribe(

            resultArray => {
                this.fiscalYearList = resultArray;
                this.PopulateQtrFiscalExpectedDate();
                error => { throw error; }
            }

        )
    }
    GetVertical() {

        this.verticalService.GetVerticalWithoutID(btoa(this.userUnit)).subscribe(

            resultArray => this.verticalList = resultArray,

            error => { throw error; },

        )
    }


    GetBPSOffering() {

        if (this.service != -1) {
            this.bpsofferingService.GetBPSOfferingName(this.service, this.userUnit).subscribe(

                resultArray => {
                    this.bpsofferingList = resultArray;
                    this.Get_SelectedBpsOffering(this.opportunityId);
                    this.GetServiceOpportunityData();
                error => { throw error; }

                })
        }
        else {
            this.bpsofferingList = null;
            this.bpsoffering = 0;
        }

    }
    StageGetBPSOffering() {

        this.bpsofferingService.GetBPSOfferingNameWTID(this.userUnit).subscribe(

            resultArray => this.bpsofferingList = resultArray,
            error => { throw error; },

        )
    }
    GetPricingType() {

        this.createNewOppurtunityStage0Service.GetPricingType().subscribe(

            resultArray => this.iPricingTypeList = resultArray,

            error => { throw error; },

        )
    }
    Get_PricingType() {
        
                this.createNewOppurtunityStage0Service.Get_PricingType(this.userUnit).subscribe(
        
                    resultArray => this.iPricingTypeList = resultArray,
        
                    error => { throw error; },
        
                )
    }
    

    Get_SelectedPricingType(OpportunityId: any) {
        
                this.createNewOppurtunityStage0Service.Get_SelectedOppPricingType(OpportunityId).subscribe(
        
                    resultArray => this.ddlPricingType = resultArray,
        
                    error => { throw error; },
        
                )
    }
    
    SaveOppPricingType(): any {
        if (this.userUnit == '1') {
              let bFLag = true;
              let strError = "";
              let Model = <ICreateNewOpportunity>{};
              this.createNewOppurtunityStage0Service.Delete_Opp_PricingType(this.opportunityId).subscribe(data => {
                  if (data != undefined) {
                      this.ddlPricingType.forEach(element => {                   
                          
                                      Model.PRICING_TYPE_ID = element.id;
                                      Model.OpportunityId = this.opportunityId;
                                      Model.UserLogin = this.userId;
                                      
                                      this.createNewOppurtunityStage0Service.Stage1_Save_OppPricingType(Model).subscribe(data => {
                                          if (data != undefined) {                    
                                          }                    
                                      });
                                  });

                  }   
              });

              if (isNullOrUndefined(Model.PRICING_TYPE_ID)) {
                  this.successMessage = ValidationMessage.SELECTPRICINGTYPE;
                  this.strError = ValidationMessage.DANGER;
                  return false;
              }
      }
  }

    GetCategory() {

        this.createNewOppurtunityStage0Service.GetCategory(this.userUnit).subscribe(

            resultArray => this.iCategoryList = resultArray,

            error => { throw error; },

        )
    }
    ChangeOppFlag() {
        for (let item of this.iCategoryList) {
            if (item.Category_Id == this.categoryid) {
                let color = item.Category_Code;
                this.oppFlagColor = color;
            }
        }
        if (this.categoryid == 0) {
            this.oppFlagColor = 'White';
        }  
    }
    ChangeResourcingColor() {
        for (let item of this.iResourcingList) {
            if (item.RESOURCING_ID == this.resourcingId) {
                let color = item.RESOURCING_COLOR;
                this.resourcingColor = color;
            }
        }
        if (this.resourcingId == 0) {
            this.resourcingColor = 'White';
        }  
    }
    ChangeSeatColor() {
        for (let item of this.iIdentificationList) {
            if (item.SEAT_IDENTIFICATION_ID == this.identificationId) {
                let color = item.SEAT_IDENTIFICATION_COLOR;
                this.seatColor = color;
            }
        }
        if (this.identificationId == 0) {
            this.seatColor = 'White';
        }  
    }


    ChangeDealStatusColor(){
        for(let item of this.iDealStatus){
            if(item.Deal_statusID==this.DealstatusID)
            {
                let color = item.Deal_statusColor;
                this.dealStatusColor = color;
            }
        }
        if(this.DealstatusID==0)
        {
            this.seatColor='White';
        }  
    }


    GetPlatform() {

        this.createNewOppurtunityStage0Service.GetPlatform(this.userUnit).subscribe(

            resultArray => this.iPlatformList = resultArray,

            error => { throw error; },

        )
    }
    Get_Competitor() {

        this.createNewOppurtunityStage0Service.Get_Competitor(this.userUnit).subscribe(

            resultArray => this.iCompetitorList = resultArray,

            error => { throw error; },

        )


    }
    PopulateLocation(): void {

        this.fiscalOfferingService.FiscalGetMainDeliveryCentreMultiSelect().subscribe(
            resultArray => this.mainDeliveryLocationList = resultArray

            , error => { throw error; }, );
    }

    Get_SelectedLocation(OpportunityId: any): void {
        this.createNewOppurtunityStage0Service.Get_SelectedLocation(OpportunityId).subscribe(
            resultArray => this.ddlDeliveryLocation = resultArray
            , error => { throw error; });
    }

    Get_SelectedCompetitor(OpportunityId: any) {

        this.createNewOppurtunityStage0Service.Get_SelectedOppCompetitors(OpportunityId).subscribe(

            resultArray => this.ddlCompetition = resultArray,

            error => { throw error; },

        )
    }
    Get_SelectedBpsOffering(OpportunityId: any) {

        this.createNewOppurtunityStage0Service.Get_SelectedOppBpsOffering(OpportunityId).subscribe(

            resultArray => this.bpsofferingDomain = resultArray,

            error => { throw error; },

        )
    }




    GetgenInfoStage() {

        this.createNewOppurtunityStage0Service.GetgenInfoStage(this.opportunityId, this.constant.Stage9ID).subscribe(
            resultArray => {
                this.createNewOpportunity = resultArray;
                if (this.createNewOpportunity.length > 0) {
                    if (this.createNewOpportunity[0].STAGESTS != "") {
                        this.stageGenInfo = this.createNewOpportunity[0].STAGESTS;
                    }
                    if (this.createNewOpportunity[0].PROBABILITY_OF_WIN != "") {
                        this.probabilityofwin = this.createNewOpportunity[0].PROBABILITY_OF_WIN;
                        this.ChangeProbabilityWinColor();
                    }
                    if (this.createNewOpportunity[0].NEXT_STEP != "") {
                        this.nextstep = this.createNewOpportunity[0].NEXT_STEP;
                    }
                    if (this.createNewOpportunity[0].NEXT_STEP_DUE_DT != "") {
                        this.nextstepduedt = this.createNewOpportunity[0].NEXT_STEP_DUE_DT;
                        var check = moment( this.nextstepduedt, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.nextstepduedt = { date: { day: this.date, month: this.month, year: this.year } };

                    }
                    if (this.createNewOpportunity[0].STATUS_UPDATE != "") {
                        this.statusupdate = this.createNewOpportunity[0].STATUS_UPDATE;
                        this.lblError2 = this.statusupdate;

                    }
                    if (this.createNewOpportunity[0].Category_Id != 0) {
                        this.categoryid = this.createNewOpportunity[0].Category_Id;
                        this.ChangeOppFlag();
                    }

                    if (this.createNewOpportunity[0].PRICING_TYPE_ID != "") {
                        this.pricingtypeid = this.createNewOpportunity[0].PRICING_TYPE_ID;
                    }

                    if (this.createNewOpportunity[0].KEY_CUST_EXP != "") {
                        this.txtKeyCustExp = this.createNewOpportunity[0].KEY_CUST_EXP;
                    }
                    if (this.createNewOpportunity[0].WINNING_TEAM != "") {
                        this.winningTheme = this.createNewOpportunity[0].WINNING_TEAM;
                    }
                    this.noStage = this.createNewOpportunity[0].DAYS_IN_THIS_STAGE;

                    let todaydate = new Date();

                    todaydate.setHours(0o0, 0o0, 0o0, 0o0);

                    let oppDate: any;

                    let differenceTime: number;

                    if (this.createNewOpportunity[0].OPPORTUNITY_DATE != "") {

                        oppDate = this.createNewOpportunity[0].OPPORTUNITY_DATE;

                        oppDate = new Date(oppDate);

                        differenceTime = Math.abs(todaydate.getTime() - oppDate.getTime());

                        this.daysElapsedOppDate = Math.ceil(differenceTime / (1000 * 60 * 60 * 24));

                    }

                    else {

                        this.daysElapsedOppDate = new Date().getDate();

                    }

                    if (this.createNewOpportunity[0].RFI_ReceivedDate != "") {
                        var check = moment(this.createNewOpportunity[0].RFI_ReceivedDate, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.RFIReceivedDate = { date: { day: this.date, month: this.month, year: this.year } };
                     
                    }
                    if (this.createNewOpportunity[0].SELECTION_DT != "") {
                        var check = moment(this.createNewOpportunity[0].SELECTION_DT, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.selectionDate = { date: { day: this.date, month: this.month, year: this.year } };
                     
                        
                    }
                    if (this.createNewOpportunity[0].SHORTLIST_DT != "") {
                        
                        var check = moment(this.createNewOpportunity[0].SHORTLIST_DT, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.shortlistDate = { date: { day: this.date, month: this.month, year: this.year } };
                     
                    }
                    if (this.createNewOpportunity[0].RFP_ReceivedDate != "") {

                        var check = moment(this.createNewOpportunity[0].RFP_ReceivedDate, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.RFPReceivedDate = { date: { day: this.date, month: this.month, year: this.year } };
                     
                       
                    }

                    if (this.createNewOpportunity[0].RFI_ProbableSubmissionDate != "") {

                        var check = moment(this.createNewOpportunity[0].RFI_ProbableSubmissionDate, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.probableRFISubDate = { date: { day: this.date, month: this.month, year: this.year } };
                     
                    }

                    if (this.createNewOpportunity[0].RFP_ProbableSubmissionDate != "") {

                        var check = moment(this.createNewOpportunity[0].RFP_ProbableSubmissionDate, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.probableRFPSubDate = { date: { day: this.date, month: this.month, year: this.year } };
                     
                    }

                    if (this.createNewOpportunity[0].RFI_ActualSubmissionDate != "") {

                        var check = moment(this.createNewOpportunity[0].RFI_ActualSubmissionDate, 'DD-MMM-YYYY');
                        this.month = check.format('M');
                        this.date = check.format('D');
                        this.year   = check.format('YYYY');
                
                        this.actualRFISubDate = { date: { day: this.date, month: this.month, year: this.year } };
                     
                    }

                    let acSubDt: any;
                    if (this.userUnit == '1') {
                        if (this.createNewOpportunity[0].RFI_ActualSubmissionDate != "") {
                            acSubDt = this.createNewOpportunity[0].RFI_ActualSubmissionDate;
                            acSubDt = new Date(acSubDt);
                            let dateToday: any = new Date();
                            let diff: any = new Date(dateToday - acSubDt);
                            this.daysElapsedRFXAcSubDt = Math.floor(diff / 1000 / 60 / 60 / 24);
                        }

                    }



                    if (this.createNewOpportunity[0].CURRENCY_ID != null && this.createNewOpportunity[0].CURRENCY_ID != 0) {

                        this.currency = this.createNewOpportunity[0].CURRENCY_ID;

                    }

                    if (this.createNewOpportunity[0].FTEOff != null) {

                        this.FTEOffshore = this.createNewOpportunity[0].FTEOff;

                    }

                    if (this.createNewOpportunity[0].TRAINING_DURATION != "" && !isNullOrUndefined(this.createNewOpportunity[0].TRAINING_DURATION)) {
                        this.durationofTraining = this.createNewOpportunity[0].TRAINING_DURATION;
                    }
                    if (this.createNewOpportunity[0].ONSITE_TRAINING_NOS != "" && !isNullOrUndefined(this.createNewOpportunity[0].ONSITE_TRAINING_NOS)) {
                        this.onsiteTraining = this.createNewOpportunity[0].ONSITE_TRAINING_NOS;
                    }
                    if (this.createNewOpportunity[0].FTEOn != null) {

                        this.FTEOnsite = this.createNewOpportunity[0].FTEOn;

                    }

                }

                if (this.userUnit == "1") {
                    if (this.createNewOpportunity[0].TPA != "") {
                        this.yesTPA = this.createNewOpportunity[0].TPA;

                        if (this.yesTPA == "Yes") {
                            this.showTPA = 'Yes'
                            this.showTPAName = true;
                            $('#yesTPA').removeClass('btn-default');
                            $('#yesTPA').addClass('btn-primary active');
                            $('#noTPA').removeClass('btn-primary active');
                            $('#noTPA').addClass('btn-default');
                            if (this.createNewOpportunity[0].TPA_Name != "") {
                                this.TPAName = this.createNewOpportunity[0].TPA_Name;
                            }
                            else {
                                this.TPAName = null;
                            }

                        }
                        else if (this.yesTPA == "No") {
                            this.showTPA = 'No'
                            $('#noTPA').removeClass('btn-default');
                            $('#noTPA').addClass('btn-primary active');
                            $('#yesTPA').removeClass('btn-primary active');
                            $('#yesTPA').addClass('btn-default');

                        }

                    }
                    if (this.createNewOpportunity[0].Offerings != "") {

                        if (this.createNewOpportunity[0].Offerings == "Yes") {
                            this.showOfferings = 'Yes'
                            $('#yesOfferings').removeClass('btn-default');
                            $('#yesOfferings').addClass('btn-primary active');
                            $('#noOfferings').removeClass('btn-primary active');
                            $('#noOfferings').addClass('btn-default');
                        }
                        else if (this.createNewOpportunity[0].Offerings == "No") {
                            this.showOfferings = 'No'
                            $('#noOfferings').removeClass('btn-default');
                            $('#noOfferings').addClass('btn-primary active');
                            $('#yesOfferings').removeClass('btn-primary active');
                            $('#yesOfferings').addClass('btn-default');

                        }
                    }
                    if (this.createNewOpportunity[0].ModernisedOffering != "") {
                        this.modernisedOffering = this.createNewOpportunity[0].ModernisedOffering;
                    }
                    if (this.createNewOpportunity[0].CognitiveSolutions != "") {
                        this.cognitiveSolutions = this.createNewOpportunity[0].CognitiveSolutions;
                    }
                    if (this.createNewOpportunity[0].IgnioTMScope != "") {

                        if (this.createNewOpportunity[0].IgnioTMScope == "Yes") {
                            this.showIS = 'Yes'
                            $('#yesIS').removeClass('btn-default');
                            $('#yesIS').addClass('btn-primary active');
                            $('#noIS').removeClass('btn-primary active');
                            $('#noIS').addClass('btn-default');
                        }
                        else if (this.createNewOpportunity[0].IgnioTMScope == "No") {
                            this.showIS = 'No'
                            $('#noIS').removeClass('btn-default');
                            $('#noIS').addClass('btn-primary active');
                            $('#yesIS').removeClass('btn-primary active');
                            $('#yesIS').addClass('btn-default');

                        }
                    }
                    if (this.createNewOpportunity[0].IgnioTMScopeDetails != "") {
                        this.ignioTMScope = this.createNewOpportunity[0].IgnioTMScopeDetails;
                    }
                }
            },
            error => { throw error; },
        )
    }



    OnActualRFXSubDateChange(event: any) {
        let acSubDt: any;
        let day: any = this.actualRFISubDate.date.day.toString();
        let month: any = this.actualRFISubDate.date.month.toString();
        let year: any = this.actualRFISubDate.date.year.toString();
        let dateString = month + '.' + day + '.' + year;
        acSubDt = new Date(dateString);
        let dateToday: any = new Date();
        let diff: any = new Date(dateToday - acSubDt);
        this.daysElapsedRFXAcSubDt = Math.floor(diff / 1000 / 60 / 60 / 24);
    }

    ActiveTrackedBy() {

        this.opportunityTrackedBy = 1;

        $('#TrackedByYes').addClass('btn-primary active');
        $('#TrackedByYes').removeClass('btn-default');
        $('#TrackedByNo').addClass('btn-default');
        $('#TrackedByNo').removeClass('btn-primary active');


    }
    InActiveTrackedBy() {

        this.opportunityTrackedBy = 2;

        $('#TrackedByNo').addClass('btn-primary active');
        $('#TrackedByNo').removeClass('btn-default');
        $('#TrackedByYes').addClass('btn-default');
        $('#TrackedByYes').removeClass('btn-primary active');

    }

    ActiveProactiveProposal() {

        this.shoWProactiveProposal = "Yes";

        $('#proactiveProposalY').removeClass('btn-default');
        $('#proactiveProposalY').addClass('btn-primary active');
        $('#proactiveProposalN').removeClass('btn-primary active');
        $('#proactiveProposalN').addClass('btn-default');


    }
    InActiveProactiveProposal() {

        this.shoWProactiveProposal = "No";

        $('#proactiveProposalN').removeClass('btn-default');
        $('#proactiveProposalN').addClass('btn-primary active');
        $('#proactiveProposalY').removeClass('btn-primary active');
        $('#proactiveProposalY').addClass('btn-default');

    }

    ActivePIBS() {

        this.shoWPibs = "Yes";


        $('#yesPIBS').removeClass('btn-default');
        $('#yesPIBS').addClass('btn-primary active');
        $('#noPIBS').removeClass('btn-primary active');
        $('#noPIBS').addClass('btn-default');
    }
    InActivePIBS() {

        this.shoWPibs = "No";

        $('#noPIBS').removeClass('btn-default');
        $('#noPIBS').addClass('btn-primary active');
        $('#yesPIBS').removeClass('btn-primary active');
        $('#yesPIBS').addClass('btn-default');

    }
    ActiveTGA() {

        this.showTGA = "Yes";


        $('#yesTGA').removeClass('btn-default');
        $('#yesTGA').addClass('btn-primary active');
        $('#noTGA').removeClass('btn-primary active');
        $('#noTGA').addClass('btn-default');
    }
    InActiveTGA() {

        this.showTGA = "No";

        $('#noTGA').removeClass('btn-default');
        $('#noTGA').addClass('btn-primary active');
        $('#yesTGA').removeClass('btn-primary active');
        $('#yesTGA').addClass('btn-default');

    }

    ActiveTPA() {

        this.showTPA = "Yes";
        this.showTPAName = true;

        $('#yesTPA').removeClass('btn-default');
        $('#yesTPA').addClass('btn-primary active');
        $('#noTPA').removeClass('btn-primary active');
        $('#noTPA').addClass('btn-default');
    }
    InActiveTPA() {

        this.showTPA = "No";
        this.showTPAName = false;
        this.TPAName = null;
        $('#noTPA').removeClass('btn-default');
        $('#noTPA').addClass('btn-primary active');
        $('#yesTPA').removeClass('btn-primary active');
        $('#yesTPA').addClass('btn-default');

    }
    ActiveOfferings() {

        this.showOfferings = "Yes";
        $('#yesOfferings').removeClass('btn-default');
        $('#yesOfferings').addClass('btn-primary active');
        $('#noOfferings').removeClass('btn-primary active');
        $('#noOfferings').addClass('btn-default');
    }
    InActiveOfferings() {
        this.showOfferings = "No";
        $('#noOfferings').removeClass('btn-default');
        $('#noOfferings').addClass('btn-primary active');
        $('#yesOfferings').removeClass('btn-primary active');
        $('#yesOfferings').addClass('btn-default');

    }
    ActiveDF() {

        this.showDF = "Yes";
        $('#yesDF').removeClass('btn-default');
        $('#yesDF').addClass('btn-primary active');
        $('#noDF').removeClass('btn-primary active');
        $('#noDF').addClass('btn-default');
    }
    InActiveDF() {
        this.showDF = "No";
        $('#noDF').removeClass('btn-default');
        $('#noDF').addClass('btn-primary active');
        $('#yesDF').removeClass('btn-primary active');
        $('#yesDF').addClass('btn-default');

    }
    ActiveIS() {

        this.showIS = "Yes";
        $('#yesIS').removeClass('btn-default');
        $('#yesIS').addClass('btn-primary active');
        $('#noIS').removeClass('btn-primary active');
        $('#noIS').addClass('btn-default');
    }
    InActiveIS() {
        this.showIS = "No";
        $('#noIS').removeClass('btn-default');
        $('#noIS').addClass('btn-primary active');
        $('#yesIS').removeClass('btn-primary active');
        $('#yesIS').addClass('btn-default');

    }
    DTChange(e: number) {
        if (e == 0) {
            this.digitalTransformation = 0;
            if (this.getDigital == 0) {
            }
            else {
                this.getDigital = 0;
            }

        }
        else {
            this.digitalTransformation = 1;

        }
    }



    ChangeDT() {
        if (this.getDigitalTransformation.getDigital == 11) {

            this.getDigital = this.getDigitalTransformation.getDigital;
        }
        else {
            this.getDigital = this.getDigitalTransformation.getDigital;


        }
        if (this.getDigitalTransformation.getDigital != 0) {
            this.ActiveDF();
        }
        else {
            this.InActiveDF();
        }
    }



    public PopulateQtrFiscalExpectedDate(): void {

        var check = moment( this.expectedDealClosure, 'DD-MMM-YYYY');
        this.month = check.format('M');
        this.date = check.format('D');
        this.year   = check.format('YYYY');

        this.month = parseInt(this.month);
        this.year = parseInt(this.year);
        if (this.month >= 4 && this.month <= 6) {
            this.expectedRevenueQtr = "Q1";
            this.strYear = this.year.toString();
            this.strYear = this.strYear.substring(2);
            this.a = this.year + 1;
            this.strYear1 = this.a.toString();
            this.strYear1 = this.strYear1.substring(2);
            this.strFiscalYr = "FY " + this.strYear + "-" + this.strYear1;
            for (let i = 0; i < this.fiscalYearList.length; i++) {
                if (this.fiscalYearList[i].FiscalYear == this.strFiscalYr) {
                    this.expectedRevenueFY = this.fiscalYearList[i].FiscalYearId;
                }
            }
        }
        else if (this.month >= 7 && this.month <= 9) {
            this.expectedRevenueQtr = "Q2";
            this.strYear = this.year.toString();
            this.strYear = this.strYear.substring(2);
            this.a = this.year + 1;
            this.strYear1 = this.a.toString();
            this.strYear1 = this.strYear1.substring(2);
            this.strFiscalYr = "FY " + this.strYear + "-" + this.strYear1;
            for (let i = 0; i < this.fiscalYearList.length; i++) {
                if (this.fiscalYearList[i].FiscalYear == this.strFiscalYr) {
                    this.expectedRevenueFY = this.fiscalYearList[i].FiscalYearId;
                }
            }
        }
        else if (this.month >= 10 && this.month <= 12) {
            this.expectedRevenueQtr = "Q3";
            this.strYear = this.year.toString();
            this.strYear = this.strYear.substring(2);
            this.a = this.year + 1;
            this.strYear1 = this.a.toString();
            this.strYear1 = this.strYear1.substring(2);
            this.strFiscalYr = "FY " + this.strYear + "-" + this.strYear1;
            for (let i = 0; i < this.fiscalYearList.length; i++) {
                if (this.fiscalYearList[i].FiscalYear == this.strFiscalYr) {
                    this.expectedRevenueFY = this.fiscalYearList[i].FiscalYearId;
                }
            }
        }
        else if (this.month >= 1 && this.month <= 3) {
            this.expectedRevenueQtr = "Q4";
            this.strYear = this.year.toString();
            this.strYear = this.strYear.substring(2);
            this.a = this.year + 1;
            this.strYear1 = this.a.toString();
            this.strYear1 = this.strYear1.substring(2);
            this.strFiscalYr = "FY " + this.strYear + "-" + this.strYear1;
            for (let i = 0; i < this.fiscalYearList.length; i++) {
                if (this.fiscalYearList[i].FiscalYear == this.strFiscalYr) {
                    this.expectedRevenueFY = this.fiscalYearList[i].FiscalYearId;
                }
            }
        }
    }
    BlockSpecialChar(event) {
        var k = event.keyCode;
        return ((k > 64 && k < 91) || (k > 96 && k < 123) || k == 8 || (k >= 48 && k <= 57));
    }
    AllowDecimal(event) {
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        var regex = new RegExp("[0-9.]");
        if (regex.test(key)) {
            return key;
        }
        else {
            event.preventDefault();
            return false;

        }
    }

    Allow(event) {
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        var regex = new RegExp("^\d{0,4}(\.\d{1,5})?$");
        if (regex.test(key)) {
            return key;
        }
        else {
            event.preventDefault();
            return false;

    }
    }

    YesMultitowerDeal() {
        this.showMultiTower = 'Yes';
        this.IfYes = true;
        this.Get_Business_BFS1();
        this.LoadVerticalData();
        this.Get_Domain_Business_BFS1();
        this.GetServiceName();
        this.GetVerticalOpportunityDomainData();
        this.GetServiceOpportunityData();
        $('#YMultitowerDeal').removeClass('btn-default');
        $('#YMultitowerDeal').addClass('btn-primary active');
        $('#NMultitowerDeal').removeClass('btn-primary active');
        $('#NMultitowerDeal').addClass('btn-default');


    }

    LoadVerticalData() {
        this.createNewOppurtunityStage0Service.Get_Vertical_Opp_Data(this.opportunityId).subscribe(data => {
            if (data != undefined) {
                this.verticalDataList = data;
                if (this.verticalDataList.length == 0) {
                    let Model = <ICreateNewOpportunity>{};
                    Model.BUSINESS_ID = 0;
                    Model.FTE = '';
                    Model.SOLUTION_LEAD = '';
                    Model.TCV = '';
                    Model.Id = '';
                    this.verticalDataList.push(Model);

                }
            }
            else {
                let Model = <ICreateNewOpportunity>{};
                Model.BUSINESS_ID = 0;
                Model.FTE = '';
                Model.SOLUTION_LEAD = '';
                Model.TCV = '';
                Model.Id = '';
                this.verticalDataList.push(Model);

            }

        });
    }


    Get_Business_BFS1() {
        this.createNewOppurtunityStage0Service.Get_Business_BFS1(this.userUnit).subscribe(
            resultArray => this.iBusinessBFSList = resultArray,
            error => { throw error; },
        )
    }

    Get_Domain_Business_BFS1() {
        this.createNewOppurtunityStage0Service.Get_Business_Domain(btoa(String(this.userUnit))).subscribe(
            resultArray => this.domainBusinessBFSList = resultArray,
            error => { throw error; },
        )
    }
    GetServiceName() {
        this.createNewOppurtunityStage0Service.GetServiceName(btoa(String(this.userUnit))).subscribe(
            resultArray => this.serviceNameList = resultArray,
            error => { throw error; },
        )
    }
    Get_Level1_Vertical(business: number, objVertical: any) {
        this.createNewOppurtunityStage0Service.Get_Level1_Vertical(String(this.verticalgrid)).subscribe(
            resultArray => {

                this.verticalDomainListLevel = resultArray;
            },
            error => { throw error; },
        )
    }
    Get_Level1_Services(service: number, objVertical: any) {

        this.createNewOppurtunityStage0Service.Get_Level1_Services(String(service)).subscribe(
            resultArray => {

                let index: number;
                index = this.serviceDataList.findIndex(x => x.Id == objVertical.Id);
                this.serviceDataList[index].offeringList = resultArray;
            },
            error => { throw error; },
        )
    }



    Get_PresalesLead_VerticalWise(business: number, objVertical: ICreateNewOpportunity) {

        if (business != 0) {

            this.createNewOppurtunityStage0Service.Get_PresalesLead_VerticalWise(this.userUnit, business).subscribe(
                data => {
                    if (!isNullOrUndefined(data) || data.length > 0) {
                        let VerticalList: ICreateNewOpportunity[] = new Array();
                        VerticalList = data;
                        if (VerticalList.length > 0) {
                            if (!isNullOrUndefined(VerticalList[0].PRESALES_LEAD) || VerticalList[0].PRESALES_LEAD != "") {
                                let index: number;
                                index = this.verticalDataList.findIndex(x => x.Id == objVertical.Id);
                                this.verticalDataList[index].SOLUTION_LEAD = VerticalList[0].PRESALES_LEAD;

                            }
                        }
                    }
                })
        }

    }
    NoMultitowerDeal() {
        this.showMultiTower = 'No';
        this.Get_Business_BFS1();
        this.LoadVerticalData();
        this.Get_Domain_Business_BFS1();
        this.GetServiceName();
        this.GetVerticalOpportunityDomainData();
        this.GetServiceOpportunityData();
        this.IfYes = false;
        $('#NMultitowerDeal').removeClass('btn-default');
        $('#NMultitowerDeal').addClass('btn-primary active');
        $('#YMultitowerDeal').removeClass('btn-primary active');
        $('#YMultitowerDeal').addClass('btn-default');
    }


    public CheckTCVAdditional(): any {
        let bFLag = true;
        this.strError = "";
        if (this.totalContractValue == "" || this.totalContractValue == null) {
            this.strError += ValidationMessage.CHECKTHETOTALCONTRACTVALUE;
            this.bFLag = false;
        }
        else {
            let strTotalTCV = this.totalContractValue;
            this.bFLag = false;
            let intTotalTCV = 0;

            let intMultiVerticalDomainTCV = 0;
            let intMultiServicelTCV = 0;
            var total=this.totalContractValue.replace(/\,/g,"");
            let intTotalAddnTCV = Number(total); 

            if (this.userUnit == '1') {
                this.verticalDomainList.forEach(element => {
                    if (!isNullOrUndefined(element.TCV) && element.TCV != "" && element.TCV != 0) {
                        intMultiVerticalDomainTCV += Number((element.TCV).replace(/\,/g,""));
                    }
                });

            }
            this.serviceDataList.forEach(element => {
                if (!isNullOrUndefined(element.TCV) && element.TCV != "" && element.TCV != 0) {
                    intMultiServicelTCV += Number((element.TCV).replace(/\,/g,""));
                }
            });

            intTotalTCV = intMultiVerticalDomainTCV + intMultiServicelTCV;
            if (intTotalTCV > intTotalAddnTCV) {
                if (this.userUnit == '2') {
                    this.strError += ValidationMessage.CheckTCVAdditional_MESSAGE1 + intTotalAddnTCV + ValidationMessage.SERVICETCVONLY;
                    this.bFLag = false;
                }
                else {
                    this.strError += ValidationMessage.CheckTCVAdditional_MESSAGE1 + intTotalAddnTCV + ValidationMessage.CheckTCVAdditional_MESSAGE2;

                    this.bFLag = false;
                }

            }
            else if (intTotalTCV < intTotalAddnTCV && intTotalTCV != 0) {
                
                if (this.userUnit == '1') {
                
                                this.strError += ValidationMessage.CheckTCVAdditional_MESSAGE1 + intTotalAddnTCV + ValidationMessage.CheckTCVAdditional_MESSAGE2;
                                }
                else if (this.userUnit == '2') {
                                    this.strError += ValidationMessage.CheckTCVAdditional_MESSAGE1 + intTotalAddnTCV + ValidationMessage.SERVICETCVONLY;
                                }
                                this.bFLag = false;

            }
        }
        return this.bFLag;
    }

    public CheckFTEAddlnVerticalSave(): any {
        let bFLag = true;
        this.strError = "";
        if (this.potentialFTE == "" || this.potentialFTE == null) {
            this.strError += ValidationMessage.CHECKTHEPOTENTIALFTE;
            this.bFLag = false;
        }
        else {
            let strTotalFTE = this.potentialFTE;
            this.bFLag = false;
            let intTotalFTE = 0;

            let intMultiVerticalDomainFTE = 0;
            let intMultiServicelFTE = 0;

            let intTotalAddnFTE = parseFloat(strTotalFTE);


            if (this.userUnit == '1') {
                this.verticalDomainList.forEach(element => {
                    if (!isNullOrUndefined(element.FTE) && element.FTE != "" && element.FTE != 0) {
                        intMultiVerticalDomainFTE += parseFloat(element.FTE);
                    }
                });
            }

            this.serviceDataList.forEach(element => {
                if (!isNullOrUndefined(element.FTE) && element.FTE != "" && element.FTE != 0) {
                    intMultiServicelFTE += parseFloat(element.FTE);
                }
            });

            intTotalFTE = intMultiVerticalDomainFTE + intMultiServicelFTE;
            if (intTotalFTE > intTotalAddnFTE) {
                if (this.userUnit == '2') {
                    this.strError += ValidationMessage.CHECKFTEADDLNVERTICAL_SAVEMESSAGE1 + intTotalAddnFTE + ValidationMessage.SERVICEFTEONLY;

                    this.bFLag = false;
                }
                else {
                    this.strError += ValidationMessage.CHECKFTEADDLNVERTICAL_SAVEMESSAGE1 + intTotalAddnFTE + ValidationMessage.CHECKFTEADDLNVERTICAL_SAVEMESSAGE2;

                    this.bFLag = false;
                }


            }

            else if (intTotalFTE < intTotalAddnFTE && intTotalFTE != 0) {
                if (this.userUnit == '2') {
                    this.strError += ValidationMessage.POTMESSAGE1 + intTotalAddnFTE + ValidationMessage.POTMESSAGE2;

                    this.bFLag = false;
        }
            }
        }
        return this.bFLag;
    }


    public CheckLessThanTCVAdditional(): any {
        let bFLag = true;
        this.strError = "";
        if (this.totalContractValue == "" || this.totalContractValue == null) {
            this.strError += ValidationMessage.CHECKTHETOTALCONTRACTVALUE;
            this.bFLag = false;
        }
        else {
            let strTotalTCV = this.totalContractValue;
            this.bFLag = false;
            let intTotalTCV = 0;

            let intMultiVerticalDomainTCV = 0;
            let intMultiServicelTCV = 0;
            var total=this.totalContractValue.replace(/\,/g,"");
            let intTotalAddnTCV = Number(total); 

            if (this.userUnit == '1') {
                this.verticalDomainList.forEach(element => {
                    if (!isNullOrUndefined(element.TCV) && element.TCV != "" && element.TCV != 0) {
                        intMultiVerticalDomainTCV += Number((element.TCV).replace(/\,/g,""));
                    }
                });
            }

            this.serviceDataList.forEach(element => {
                if (!isNullOrUndefined(element.TCV) && element.TCV != "" && element.TCV != 0) {
                    intMultiServicelTCV += Number((element.TCV).replace(/\,/g,""));
                }
            });

            if (this.userUnit == '1') {
                if (this.serviceDataList[0].Id == '0' && this.verticalDomainList[0].Id == '0') {
                    this.strError += ValidationMessage.CHECKFTEADDLNVERTICAL_SAVEMESSAGE4 + intTotalAddnTCV + ValidationMessage.CHECKTCVLESSLNVERTICAL_SAVEMESSAGE2;

                    this.bFLag = false;
                }
            }
            intTotalTCV = intMultiVerticalDomainTCV + intMultiServicelTCV;
            if (intTotalTCV < intTotalAddnTCV) {

                this.strError += ValidationMessage.TCVMESSAGE1 + intTotalAddnTCV + ValidationMessage.TCVMESSAGE2;

                this.bFLag = false;

            }



        }
        return this.bFLag;
    }



    public CheckLessThanFTEAddlnVerticalSave(): any {
        let bFLag = true;
        this.strError = "";
        if (this.potentialFTE == "" || this.potentialFTE == null) {
            this.strError += ValidationMessage.CHECKTHEPOTENTIALFTE;
            this.bFLag = false;
        }
        else {
            let strTotalFTE = this.potentialFTE;
            this.bFLag = false;
            let intTotalFTE = 0;

            let intMultiVerticalDomainFTE = 0;
            let intMultiServicelFTE = 0;
            let intTotalAddnFTE = parseFloat(strTotalFTE);

            if (this.userUnit == '1') {
                this.verticalDomainList.forEach(element => {
                    if (!isNullOrUndefined(element.FTE) && element.FTE != "" && element.FTE != 0) {
                        intMultiVerticalDomainFTE += parseFloat(element.FTE);
                    }
                });

            }
            this.serviceDataList.forEach(element => {
                if (!isNullOrUndefined(element.FTE) && element.FTE != "" && element.FTE != 0) {
                    intMultiServicelFTE += parseFloat(element.FTE);
                }
            });

            if (this.userUnit == '1') {
                if (this.serviceDataList[0].Id == '0' && this.verticalDomainList[0].Id == '0') {
                    this.strError += ValidationMessage.CHECKFTEADDLNVERTICAL_SAVEMESSAGE1 + intTotalAddnFTE + ValidationMessage.CHECKFTELESSLNVERTICAL_SAVEMESSAGE2;
  
                    this.bFLag = false;
                }
            }
            intTotalFTE = intMultiVerticalDomainFTE + intMultiServicelFTE;
            if (intTotalFTE < intTotalAddnFTE) {

                this.strError += ValidationMessage.POTMESSAGE1 + intTotalAddnFTE + ValidationMessage.POTMESSAGE2;

                this.bFLag = false;

            }


        }
        return this.bFLag;
    }
    Save_ServiceOppdate(objVertical: any) {
        let Model = <any>{};
        let totalFTE: number = 0;
        let totalTCV: number = 0;



        if (objVertical.HorizontalId != "0" && !isNullOrUndefined(objVertical.HorizontalId)) {
            Model.HorizontalId = objVertical.HorizontalId;
        }
        else {
            this.successMessage = ValidationMessage.SERVICE_ERROR
            this.lblError0 = ValidationMessage.DANGER;
            return false;
        }
        if (objVertical.LEVEL_ID != "0" && !isNullOrUndefined(objVertical.LEVEL_ID)) {
            Model.LEVEL_ID = objVertical.HorizontalId;
        }
        else {
            this.successMessage = ValidationMessage.OFFERING_ERROR
            this.lblError0 = ValidationMessage.DANGER;
            return false;
        }
        if (objVertical.FTE != "" && !isNullOrUndefined(objVertical.FTE)) {
            Model.FTE = objVertical.FTE;
        }
        else {
            this.successMessage = ValidationMessage.FTE;
            this.lblError0 = ValidationMessage.DANGER;
            return false;
        }
        if (objVertical.SOLUTION_LEAD != "" && !isNullOrUndefined(objVertical.SOLUTION_LEAD)) {
            Model.SOLUTION_LEAD = objVertical.SOLUTION_LEAD;
        }
        else {

            this.successMessage = ValidationMessage.SOLUTION_LEAD;
            this.lblError0 = ValidationMessage.DANGER;
            return false;
        }
        if (objVertical.TCV != "" && !isNullOrUndefined(objVertical.TCV)) {
            Model.TCV = objVertical.TCV;
        }
        else {
            this.successMessage = ValidationMessage.TCV;
            this.lblError0 = ValidationMessage.DANGER;
            return false;
        }
        if (objVertical.LEVEL_ID != "" && !isNullOrUndefined(objVertical.LEVEL_ID)) {
            Model.LEVEL_ID = objVertical.LEVEL_ID;
        }
        else {
            this.successMessage = ValidationMessage.LEVEL1;
            this.lblError0 = ValidationMessage.DANGER;
            return false;
        }
        if (objVertical.TCV != "" && objVertical.TCV != null) {
            if (objVertical.TCV.toString().match(/^[0-9,]{0,13}(\.\d{0,2})?$/g) != null) {


                let servicetcv=(objVertical.TCV).replace(/\,/g,"");
                Model.TCV = this.NewFomattedInput(servicetcv);
            }


            else {

                this.successMessage = ValidationMessage.VERTICAL_TCV_MILLION;

                this.lblError0 = ValidationMessage.DANGER;

                return false;

            }

        }
        Model.Id = objVertical.Id;
        Model.strOpportunityId = this.opportunityId;
        Model.UnitId = this.userUnit;
        Model.UserLogin = this.userId;
        Model.LEVEL2_ID = "";

        this.createNewOppurtunityStage0Service.Save_ServiceOppdate(Model).subscribe(data => {
            if (data != undefined) {
                if (data == 1) {

                    this.successMessage = ValidationMessage.SAVE_SERVICE_DATA;
                    this.lblError0 = ValidationMessage.SUCCESS
                }
                else if (data == 2) {
                    this.successMessage = ValidationMessage.UPDATE_SERVICE_DATA;
                    this.lblError0 = ValidationMessage.SUCCESS

                }
                this.createNewOppurtunityStage0Service.GET_SERVICE_OPP_DATA(this.opportunityId).subscribe(data => {
                    if (data != undefined) {
                        let list: any[] = new Array();
                        list = data;
                        let HorizontalId: number;
                        list.forEach((element, index) => {
                            HorizontalId = element.HorizontalId;
                            this.createNewOppurtunityStage0Service.Get_Level1_Services(String(HorizontalId)).subscribe(
                                resultArray => {
                                    if (resultArray != undefined) {
                                        element.offeringList = resultArray;
                                    }
                                },
                                error => { throw error; },
                            )
                        });
                        this.serviceDataList = list;
                    }

                }, error => {

                });


            }

        }, error => {

        });


    }

    SaveVerticalDomain(objVertical: any) {
        let Model = <any>{};
        let totalFTE: number = 0;
        let totalTCV: number = 0;



        if (this.verticalgrid != "0" && !isNullOrUndefined(this.verticalgrid)) {
            Model.BUSINESS_ID = this.verticalgrid;
        }
        else {
            this.successMessage = ValidationMessage.VERTICAL_FTE
            this.lblError0 = ValidationMessage.DANGER;
            return false;
        }
        if (objVertical.LEVEL_ID != "0" && !isNullOrUndefined(objVertical.LEVEL_ID)) {
            Model.LEVEL_ID = objVertical.HorizontalId;
        }
        else {
            this.successMessage = ValidationMessage.OFFERING_ERROR
            this.lblError0 = ValidationMessage.DANGER;
            return false;
        }
        if (objVertical.FTE != "" && !isNullOrUndefined(objVertical.FTE)) {
            Model.FTE = objVertical.FTE;
        }
        else {
            this.successMessage = ValidationMessage.FTE;
            this.lblError0 = ValidationMessage.DANGER;
            return false;
        }
        if (objVertical.SOLUTION_LEAD != "" && !isNullOrUndefined(objVertical.SOLUTION_LEAD)) {
            Model.SOLUTION_LEAD = objVertical.SOLUTION_LEAD;
        }
        else {

            this.successMessage = ValidationMessage.SOLUTION_LEAD;
            this.lblError0 = ValidationMessage.DANGER;
            return false;
        }
        if (objVertical.TCV != "" && !isNullOrUndefined(objVertical.TCV)) {
            Model.TCV = objVertical.TCV;
        }
        else {
            this.successMessage = ValidationMessage.TCV;
            this.lblError0 = ValidationMessage.DANGER;
            return false;
        }
        if (objVertical.LEVEL_ID != "" && !isNullOrUndefined(objVertical.LEVEL_ID)) {
            Model.LEVEL_ID = objVertical.LEVEL_ID;
        }
        else {
            this.successMessage = ValidationMessage.LEVEL1;
            this.lblError0 = ValidationMessage.DANGER;
            return false;
        }
        if (objVertical.TCV != "" && objVertical.TCV != null) {
            if (objVertical.TCV.toString().match(/^[0-9,]{0,13}(\.\d{0,2})?$/g) != null) {


                let verticaltcv=(objVertical.TCV).replace(/\,/g,"");
                Model.TCV = this.NewFomattedInput(verticaltcv);
            }


            else {

                this.successMessage = ValidationMessage.VERTICAL_TCV_MILLION;

                this.lblError0 = ValidationMessage.DANGER;

                return false;

            }

        }
        Model.Id = objVertical.Id;
        Model.strOpportunityId = this.opportunityId;
        Model.UnitId = this.userUnit;
        Model.UserLogin = this.userId;
        Model.LEVEL2_ID = "";

        this.createNewOppurtunityStage0Service.Save_VerticalDomainOppdata(Model).subscribe(data => {
            if (data != undefined) {
                if (data == 1) {

                    this.successMessage = ValidationMessage.SAVE_VERTICAL_DOMAIN_DATA;
                    this.lblError0 = ValidationMessage.SUCCESS
                }
                else if (data == 2) {
                    this.successMessage = ValidationMessage.UPDATE_VERTICAL_DOMAIN_DATA;
                    this.lblError0 = ValidationMessage.SUCCESS

                }
                this.createNewOppurtunityStage0Service.GET_VERTICAL_DOMAIN_OPP_DATA(this.opportunityId).subscribe(data => {
                    if (data != undefined) {
                        let list: any[] = new Array();
                        list = data;
                        let BusinessID: number;
                        list.forEach((element, index) => {
                            BusinessID = element.BUSINESS_ID;
                            this.createNewOppurtunityStage0Service.Get_Level1_Vertical(String(BusinessID)).subscribe(
                                resultArray => {
                                    if (resultArray != undefined) {
                                        element.offeringList = resultArray;
                                    }
                                },
                                error => { throw error; },
                            )
                        });
                        this.verticalDomainList = list;

                    }

                }, error => {

                });
            }

        }, error => {

        });
    }
    AddNewRowVerticalDomain() {

        let index = this.verticalDomainList.length;
        if (this.verticalDomainList.length > 0) {
            if (this.verticalDomainList[index - 1].LEVEL_ID != 0) {
                let Model = <any>{};
                Model.BUSINESS_ID = this.verticalgrid;
                Model.FTE = 0;
                Model.SOLUTION_LEAD = '';
                Model.TCV = '';
                Model.Id = '0';
                Model.offeringList = new Array();
                Model.LEVEL_ID = 0;

                this.verticalDomainList.push(Model);
            }

        }
        else {
            let Model = <any>{};
            Model.BUSINESS_ID = 0;
            Model.FTE = 0;
            Model.SOLUTION_LEAD = '';
            Model.TCV = '';
            Model.Id = '0';
            Model.offeringList = new Array();
            Model.LEVEL_ID = 0;

            this.verticalDomainList.push(Model);

        }

    }
    AddNewRowService() {
        
                let index = this.serviceDataList.length;
                if (this.serviceDataList.length > 0) {
                    if (this.serviceDataList[index - 1].LEVEL_ID != 0) {
                        let Model = <any>{};
                        Model.HorizontalId = this.service;
                        Model.FTE = 0;
                        Model.SOLUTION_LEAD = '';
                        Model.TCV = '';
                        Model.Id = '0';
                        Model.offeringList = new Array();
                        Model.LEVEL_ID = 0;
        
                        this.serviceDataList.push(Model);
                        this.createNewOppurtunityStage0Service.Get_Level1_Services(String(Model.HorizontalId)).subscribe(
                            resultArray => {    
                                this.serviceDataList[index].offeringList = resultArray;
                            },
                            error => { throw error; },
                        )
        
                    }
                }
                else {
                    let Model = <any>{};
                    Model.HorizontalId = this.service;
                    Model.FTE = 0;
                    Model.SOLUTION_LEAD = '';
                    Model.TCV = '';
                    Model.Id = '0';
                    Model.offeringList = new Array();
                    Model.LEVEL_ID = 0;
        
                    this.serviceDataList.push(Model);
                    this.createNewOppurtunityStage0Service.Get_Level1_Services(String(Model.HorizontalId)).subscribe(
                        resultArray => {    
                            this.serviceDataList[0].offeringList = resultArray;
                        },
                        error => { throw error; },
                    )
        
                }
        
            }
    DeleteRowVerticalDomain(objVertical: any): void {
        if (objVertical.Id != "0") {


            let Model = <any>{};
            Model.Id = objVertical.Id;
            Model.strOpportunityId = this.opportunityId;
            Model.UserLogin = this.userId;
            Model.MultiTower = "Yes";
            this.createNewOppurtunityStage0Service.Delete_VerticalDomainOppdate(Model).subscribe(data => {
                if (data != undefined) {
                    this.successMessage = ValidationMessage.DELETE_VERTICAL_DOMAIN_DATA;
                    this.lblError0 = ValidationMessage.DANGER;
                    let index = this.verticalDomainList.indexOf(objVertical);
                    this.verticalDomainList.splice(index, 1);

                    if (this.verticalDomainList.length == 0) {
                        this.AddNewRowVerticalDomain();
                    }
                }
                else {

                }

            }, error => {

            });
        }
    }
    DeleteRowService(objService: any): void {
        if (objService.Id != "0") {

            let Model = <any>{};
            Model.Id = objService.Id;
            Model.strOpportunityId = this.opportunityId;
            Model.UserLogin = this.userId;
            Model.MultiTower = "Yes";
            this.createNewOppurtunityStage0Service.Delete_ServiceOppdate(Model).subscribe(data => {
                if (data != undefined) {
                    this.successMessage = ValidationMessage.DELETE_SERVICE_DATA;
                    this.lblError0 = ValidationMessage.DANGER;
                    let index = this.serviceDataList.indexOf(objService);
                    this.serviceDataList.splice(index, 1);

                    if (this.serviceDataList.length == 0) {
                        this.AddNewRowService();
                    }
                }
                else {

                }
            }, error => {

            });
        }
    }
    GetVerticalOpportunityDomainData() {
        this.createNewOppurtunityStage0Service.GET_VERTICAL_DOMAIN_OPP_DATA(this.opportunityId).subscribe(data => {
            if (data != undefined) {
                let list: any[] = new Array();
                list = data;
                let BusinessID: number;
                list.forEach((element, index) => {
                    BusinessID = element.BUSINESS_ID;
                    this.createNewOppurtunityStage0Service.Get_Level1_Vertical(String(BusinessID)).subscribe(
                        resultArray => {
                            if (resultArray != undefined) {
                                element.offeringList = resultArray;
                            }
                        },
                        error => { throw error; },
                    )
                });
                this.verticalDomainList = list;
                if (list.length == 0) {
                    this.AddNewRowVerticalDomain();
                }

            }
        });
    }
    GetServiceOpportunityData() {
        this.createNewOppurtunityStage0Service.GET_SERVICE_OPP_DATA(this.opportunityId).subscribe(data => {
            if (data != undefined) {
                let list: any[] = new Array();
                list = data;
                let HorizontalId: number;
                list.forEach((element, index) => {
                    HorizontalId = element.HorizontalId;
                    this.createNewOppurtunityStage0Service.Get_Level1_Services(String(HorizontalId)).subscribe(
                        resultArray => {
                            if (resultArray != undefined) {
                                element.offeringList = resultArray;
                            }
                        },
                        error => { throw error; },
                    )
                });
                this.serviceDataList = list;
                if (list.length == 0) {
                    this.AddNewRowService();
                }

            }
        });
    }


    AddNewRow(objVertical: ICreateNewOpportunity) {
        let Model = <ICreateNewOpportunity>{};
        let totalFTE: number = 0;
        let totalTCV: number = 0;
        this.verticalDataList.forEach(element => {
            if (!isNullOrUndefined(element.FTE) && element.FTE != "" && element.FTE != 0) {
                totalFTE = totalFTE + element.FTE;
            }
        });
        let totalFte: number = 0;
        this.verticalDataList.forEach(element => {
            if (!isNullOrUndefined(element.TCV) && element.TCV != "" && element.TCV != 0) {
                totalTCV = totalTCV + element.TCV;
            }
        });



        if (isNullOrUndefined(objVertical.BUSINESS_ID) || objVertical.BUSINESS_ID == "" || isNullOrUndefined(objVertical.FTE) ||
            objVertical.FTE == "" || isNullOrUndefined(objVertical.SOLUTION_LEAD) || objVertical.SOLUTION_LEAD == "" || isNullOrUndefined(objVertical.TCV) || objVertical.TCV == "") {

        }
        else {
            if (objVertical.BUSINESS_ID != "") {
                Model.BUSINESS_ID = objVertical.BUSINESS_ID;
            }
            else {
                this.successMessage = ValidationMessage.VERTICAL_FTE
                this.lblError0 = ValidationMessage.DANGER;
                return false;
            }
            if (objVertical.FTE != "") {
                Model.FTE = objVertical.FTE;
            }
            else {
                this.successMessage = ValidationMessage.FTE;
                this.lblError0 = ValidationMessage.DANGER;
                return false;
            }
            if (objVertical.SOLUTION_LEAD != "") {
                Model.SOLUTION_LEAD = objVertical.SOLUTION_LEAD;
            }
            else {
                this.successMessage = ValidationMessage.SOLUTION_LEAD;
                this.lblError0 = ValidationMessage.DANGER;
                return false;
            }
            if (objVertical.TCV != "") {
                Model.TCV = objVertical.TCV;
            }
            else {
                this.successMessage = ValidationMessage.TCV;
                this.lblError0 = ValidationMessage.DANGER;
                return false;
            }
            if (objVertical.TCV != "" || objVertical.TCV != null) {
                if (objVertical.TCV.toString().match(/^[0-9,]{0,13}(\.\d{0,2})?$/g) != null) {


                    Model.TCV = (objVertical.TCV).toString();
                }


                else {

                    this.successMessage = ValidationMessage.VERTICAL_TCV_MILLION;

                    this.lblError0 = ValidationMessage.DANGER;

                    return false;

                }

            }
            Model.Id = objVertical.Id;
            Model.strOpportunityId = this.opportunityId;
            Model.UnitId = this.userUnit;
            Model.UserLogin = this.userId;

            this.createNewOppurtunityStage0Service.Save_VerticalOppdate(Model).subscribe(data => {
                if (data != undefined) {
                    if (data == 1) {

                        this.successMessage = ValidationMessage.SAVEVERTICAL_DATA;
                        this.lblError0 = ValidationMessage.SUCCESS
                    }
                    else if (data == 2) {
                        this.successMessage = ValidationMessage.UPDATEVERTICAL_DATA;
                        this.lblError0 = ValidationMessage.SUCCESS

                    }
                    this.createNewOppurtunityStage0Service.Get_Vertical_Opp_Data(this.opportunityId).subscribe(data => {
                        if (data != undefined) {
                            this.verticalDataList = data;
                            let Model = <ICreateNewOpportunity>{};
                            Model.BUSINESS_ID = 0;
                            Model.FTE = '';
                            Model.SOLUTION_LEAD = '';
                            Model.TCV = '';
                            Model.Id = '';
                            this.verticalDataList.push(Model);


                        }


                    });
                }
            });
        }



    }

    DeleteRow(objVertical: ICreateNewOpportunity): void {
        if (objVertical.Id != "0") {
            let Model = <ICreateNewOpportunity>{};
            Model.Id = objVertical.Id;
            Model.strOpportunityId = this.opportunityId;
            Model.UserLogin = this.userId;
            Model.MultiTower = "Yes";

            this.createNewOppurtunityStage0Service.Delete_VerticalOppdate(Model).subscribe(data => {
                if (data != undefined) {

                    this.successMessage = ValidationMessage.DELETEVERTICAL_DATA;
                    this.lblError0 = ValidationMessage.DANGER;
                }
                this.LoadVerticalData();
            });
        }
    }


    Upd_WinReason() {

        this.stage8Service.Stage9_Get_Opp_Win_Loss_Reason(this.opportunityId).subscribe(

            resultArray => {
                let selecteddatabaseList: any[] = new Array();
                selecteddatabaseList = resultArray

                selecteddatabaseList.forEach(database => {
                    this.ddlWinReason.forEach(selecteddrop => {
                        if (database.id == selecteddrop.id) {

                            let Model = <ICreateNewOpportunity>{};
                            Model.WIN_LOSS_REASON_ID = selecteddrop.id;

                            Model.OpportunityId = this.opportunityId;
                            Model.UserLogin = this.userId;

                            this.stage8Service.Stage9_Upd_WINLossReason(Model).subscribe(data => {
                                if (isNullOrUndefined(data)) {
                                    this.successMessage = ValidationMessage.ERROR_SELECTWINREASON;
                                    this.lblError0 = ValidationMessage.DANGER;
                                }

                            });
                        }

                    });
                });



            }, error => { throw error; },

        )

        this.SaveOppWinReason();



    }

    SaveOppWinReason(): any {
        let bFLag = true;
        let strError = "";
        let Model = <ICreateNewOpportunity>{};
        this.ddlWinReason.forEach(element => {


            Model.WIN_LOSS_REASON_ID = element.id;
            Model.OpportunityId = this.opportunityId;
            Model.UserLogin = this.userId;
            this.stage8Service.Stage9_Save_OppWINLossReason(Model).subscribe(data => {
                if (data != undefined) {

                }

            });

        });

        if (isNullOrUndefined(Model.WIN_LOSS_REASON_ID)) {
            this.successMessage = ValidationMessage.ERROR_SELECTWINREASON;
            this.strError = ValidationMessage.DANGER;
            return false;
        }


    }

    SaveOppCompetitors(): any {
        let bFLag = true;
        let strError = "";
        let Model = <ICreateNewOpportunity>{};
        this.createNewOppurtunityStage0Service.Upd_Competitors(this.opportunityId).subscribe(data => {
            if (data != undefined) {

           
        this.ddlCompetition.forEach(element => {


            Model.COMPETITOR_ID = element.id;
            Model.OpportunityId = this.opportunityId;
            Model.UserLogin = this.userId;
            this.createNewOppurtunityStage0Service.Stage1_Save_OppCompetitors(Model).subscribe(data => {
                if (data != undefined) {

                }

            });

        });
   

        if (isNullOrUndefined(Model.COMPETITOR_ID)) {
            this.successMessage = ValidationMessage.COMPETITORS;
            this.strError = ValidationMessage.DANGER;
            return false;
        }
    }

});
    }




    Upd_Competitors() {

        this.createNewOppurtunityStage0Service.Get_SelectedOppCompetitors(this.opportunityId).subscribe(

            resultArray => {
                let selecteddatabaseList: any[] = new Array();
                selecteddatabaseList = resultArray

                selecteddatabaseList.forEach(database => {
                    this.ddlCompetition.forEach(selecteddrop => {
                        if (database.id == selecteddrop.id) {

                            let Model = <ICreateNewOpportunity>{};
                            Model.COMPETITOR_ID = selecteddrop.id;

                            Model.OpportunityId = this.opportunityId;
                            Model.UserLogin = this.userId;

                            this.createNewOppurtunityStage0Service.Upd_Competitors(Model).subscribe(data => {
                                if (data != undefined) {

                                }

                            });
                        }

                    });
                });



            }, error => { throw error; },

        )

        this.SaveOppCompetitors();



    }

//rajat

ValidateBpsOffering(): any {

    let bFLag = true;
    let strError = "";


    if (this.bpsofferingDomain.length < 1) {
        this.strError = ValidationMessage.BpsOffering;
        this.bFLag = false;

    }

    return this.bFLag;
}
SaveOppBpsOffering(): any {
        
    this.createNewOppurtunityStage0Service.Upd_BpsOffering(this.opportunityId).subscribe(data => {
        if (data != undefined) {

    let bFLag = true;
        let strError = "";
        let Model = {};
                var array = [];

                for (var i = 0; i < this.bpsofferingDomain.length; i++) {
                    Model = {
                        "BPSOfferingID": this.bpsofferingDomain[i].id,
                        "OpportunityId": this.opportunityId,
                        "UserLogin": this.userId,
                        "ServiceId": null
                    };
            array.push(Model);

        }
      
    
        this.createNewOppurtunityStage0Service.Stage1_Save_OppBpsOffering(array).subscribe(data => {
            if (data != undefined) {

                    }
        
                });
            }

        });
        




}




Upd_BpsOffering() {

    this.createNewOppurtunityStage0Service.Get_SelectedOppBpsOffering(this.opportunityId).subscribe(

        resultArray => {
            let selecteddatabaseList: any[] = new Array();
            selecteddatabaseList = resultArray

            selecteddatabaseList.forEach(database => {
                this.bpsofferingDomain.forEach(selecteddrop => {
                    if (database.id == selecteddrop.id) {

                        let Model = <ICreateNewOpportunity>{};
                        Model.BPSOfferingID = selecteddrop.id;

                        Model.OpportunityId = this.opportunityId;
                        Model.UserLogin = this.userId;
                       
                        this.createNewOppurtunityStage0Service.Upd_BpsOffering(this.opportunityId).subscribe(data => {
                            if (data != undefined) {

                            }

                        });
                    }

                });
            });



        }, error => { throw error; },

    )





}

//rajat
    YesPlatform() {
        this.ShowPlatform = 'Yes';

        $('#YPlatform').removeClass('btn-default');
        $('#YPlatform').addClass('btn-primary active');
        $('#NPlatform').removeClass('btn-primary active');
        $('#NPlatform').addClass('btn-default');
    }
    NoPlatform() {
        this.ShowPlatform = 'No';
        $('#NPlatform').removeClass('btn-default');
        $('#NPlatform').addClass('btn-primary active');
        $('#YPlatform').removeClass('btn-primary active');
        $('#YPlatform').addClass('btn-default');
    }
    YesDealqualified() {
        this.showDealqualified = 'Yes';
        $('#yDealqualified').removeClass('btn-default');
        $('#yDealqualified').addClass('btn-primary active');
        $('#nDealqualified').removeClass('btn-primary active');
        $('#nDealqualified').addClass('btn-default');

    }
    NoDealqualified() {
        this.showDealqualified = 'No';

        $('#nDealqualified').removeClass('btn-default');
        $('#nDealqualified').addClass('btn-primary active');
        $('#yDealqualified').removeClass('btn-primary active');
        $('#yDealqualified').addClass('btn-default');
    }
    YesWasProposal() {
        this.showWasproposal = 'Yes';
        this.showPleaseratetheproposal = 'Yes';

        $('#YeIWasProposal').removeClass('btn-default');
        $('#YeIWasProposal').addClass('btn-primary active');
        $('#NIWasProposal').removeClass('btn-primary active');
        $('#NIWasProposal').addClass('btn-default');


    }
    NoWasProposal() {
        this.showWasproposal = 'No';
        this.showPleaseratetheproposal = 'No';
        this.pleaseratetheproposal = "0";
        $('#NIWasProposal').removeClass('btn-default');
        $('#NIWasProposal').addClass('btn-primary active');
        $('#YeIWasProposal').removeClass('btn-primary active');
        $('#YeIWasProposal').addClass('btn-default');
    }


    public ValidatePrimaryInfromation(): any {
        let bFLag = true;
        let strError = "";
        this.count = 0;
        let todaysDate = new Date();
        todaysDate.setHours(0, 0, 0, 0);
        this.validationMessage = "";

        let closedate = new Date();

        var check = moment(closedate, 'DD-MMM-YYYY');
        this.month = check.format('M');
        this.date = check.format('D');
        this.year   = check.format('YYYY');

        let day: any = this.date;
        if (day < 10) {
            day = "0" + day
        }
        let month: any = this.month;
        if (month < 10) {
            month = "0" + month
        }
        this.actualclosedate = this.year  + month + day;

        if (this.dealClosureReason == "") {
            this.strError += ValidationMessage.DEAL_CLOSURE_REASON;
            this.bFLag = false;
        }
        if (this.oppDate != undefined) {

            let day = this.oppDate.date.day;
            if (day < 10) {
                day = "0" + day
            }
            let month = this.oppDate.date.month;
            if (month < 10) {
                month = "0" + month
            }
          this.oppReceivedDate = this.oppDate.date.year.toString() + month.toString() + day.toString();
            this.validateoppReceivedDate = month + '-' + day + '-' + this.oppDate.date.year;
        }
        else {
            this.strError += ValidationMessage.SELECT_OPPRECIEVEDDATE;
            this.bFLag = false;

        }
        if (this.validateoppReceivedDate == 0) {
            this.strError += ValidationMessage.SELECT_OPPRECIEVEDDATE;
            this.bFLag = false;
        }


        if (this.expectedDealClosure != undefined) {
            let cday = this.expectedDealClosure.date.day;
            if (cday < 10) {
                cday = "0" + cday
            }
            let cmonth = this.expectedDealClosure.date.month;
            if (cmonth < 10) {
                cmonth = "0" + cmonth
            }
            this.validateClosureDate = cmonth + '-' + cday + '-' + this.expectedDealClosure.date.year
          this.closureDate = this.expectedDealClosure.date.year.toString() + cmonth.toString() + cday.toString();
        }
        else {
            this.strError += ValidationMessage.SELECT_EXPECTEDDEALCLOSURE;
            this.bFLag = false;
        }

        if (this.validateClosureDate == 0) {
            this.strError += ValidationMessage.SELECT_EXPECTEDDEALCLOSURE;
            this.bFLag = false;
        }




        if (new Date() < new Date(this.validateoppReceivedDate)) {
            this.strError += ValidationMessage.FUTUREDATE_OPPORTUNITY_DATE;
            this.bFLag = false;
        }


        if (new Date(this.validateClosureDate) < new Date(this.validateoppReceivedDate)) {
            this.strError += ValidationMessage.DEALCLOSUREEXPECTED_OPPORTUNITYDATE;
            this.bFLag = false;
        }
        if (new Date(this.validateClosureDate) < todaysDate) {
            this.strError += ValidationMessage.DEALCLOSUREEXPECTEDCONNATLESSTHAN_OPPORTUNITYDATE;
            this.bFLag = false;
        }
        if (this.StageId == -1) {

            this.strError += ValidationMessage.SELECTTHEDEAL_STAGE;
            this.bFLag = false;
        }
        if (this.dealCategoryId == 0) {

            this.strError += ValidationMessage.SELECTTHEDEALCATEGORY_STAGE;
            this.bFLag = false;
        }

        if (this.opportunityDescription == "" || isNullOrUndefined(this.opportunityDescription)) {
            this.strError += ValidationMessage.SELECTTHEOPPORTUNITY_DESCRIPTION;
            this.bFLag = false;
        }

        if (this.GeographyComponent.geography == 0 || isNullOrUndefined(this.GeographyComponent.geography)) {
            this.strError += ValidationMessage.SELECTTHEGEOGRAPHY;
            this.bFLag = false;
        }
        if (this.txtCustomerName == "" || isNullOrUndefined(this.txtCustomerName)) {
            this.strError += ValidationMessage.SELECTTHECUSTOMERNAME
            this.bFLag = false;
        }


        if (this.DdlIOU.iou == 0 || isNullOrUndefined(this.DdlIOU.iou)) {
            this.strError += ValidationMessage.SELECTTHEIOUNAME;
            this.bFLag = false;
        }
        if (this.GeographySalesOwner.geographySalesOwner == 0) {
            this.strError += ValidationMessage.SELECTTHEGEOGRAPHYSALESOWNER;
            this.bFLag = false;
        }

        if (this.DdlVertical.vertical == 0) {
            this.strError += ValidationMessage.SELECTTHE_VERTICAL;
            this.bFLag = false;
        }
        if (this.DdlCountry.country == 0) {
            this.strError += ValidationMessage.SELECTTHECOUNTRY;
            this.bFLag = false;
        }

        if (this.potentialFTE == "" || isNullOrUndefined(this.potentialFTE)) {
            this.strError += ValidationMessage.SELECTTHEPOTENTIALFTE;
            this.bFLag = false;
        }
        if (this.AccountSalesOwner.accountSalesOwner == 0) {
            this.strError += ValidationMessage.SELECTTHEACCOUNTSALESOWNER;
            this.bFLag = false;
        }
        if (this.OffshorePresalesLeadHorizontal.OffShoreHorz == 0) {
            this.strError += ValidationMessage.SELECTTHEOFFSHOREPRESALESLEAD;
            this.bFLag = false;
        }
        if (this.DdlDealOwner1.dealOwner1 == 0) {
            this.strError += ValidationMessage.SELECTTHEDEALOWNER1;
            this.bFLag = false;
        }
        if (this.DdlDealOwner2.dealOwner2 == 0) {
            this.strError += ValidationMessage.SELECTTHEDEALOWNER2;
            this.bFLag = false;
        }
        if (this.DdlDealOwner1.dealOwner1 == this.DdlDealOwner2.dealOwner2) {
            this.strError += ValidationMessage.COMPAREHEDEALOWNER2;
            this.bFLag = false;
        }
        if (this.dealCategoryId == 0) {
            this.strError += ValidationMessage.SELECTTHEDEALCATEGORY;
            this.bFLag = false;
        }
        if (this.DdlService.service == -1) {
            this.strError += ValidationMessage.SELECTTHESERVICES;
            this.bFLag = false;
        }
        if (this.userUnit == "2") {
        if (this.bpsoffering == 0) {
            this.strError += ValidationMessage.SELECTTHEBPSOffering;
            this.bFLag = false;
        }
    }


        if (this.ExecutiveSponsor.executivesponsor == 0) {
            this.strError += ValidationMessage.EXECUTIVESPONSOR;
            this.bFLag = false;
        }
        if (this.shoWProactiveProposal == "" || isNullOrUndefined(this.shoWProactiveProposal)) {
            this.strError += ValidationMessage.SELECTTHEPROACTIVEPROPOSAL;
            this.bFLag = false;
        }

        if (this.SubIouComp.subiou == 0) {
            this.strError += ValidationMessage.SELECTTHESUBIOU;
            this.bFLag = false;
        }
        if (this.expectedRevenueQtr == "") {
            this.strError += ValidationMessage.SELECTTHEEXPECTEDREVENUEQTR;
            this.bFLag = false;
        }
        if (this.expectedRevenueFY == "") {
            this.strError += ValidationMessage.SELECTTHEEXPECTEDREVENUEFY;
            this.bFLag = false;
        }

        if (this.OffshorePresalesLeadVertical.OffShoreverti == 0) {
            this.strError += ValidationMessage.SELECTTHEOFFSHOREPRESALESLEADVertical;
            this.bFLag = false;
        }

        if (this.shoWPibs == "" || this.shoWPibs == undefined) {
            this.strError += ValidationMessage.SELECTTHEPIBS;
            this.bFLag = false;
        }




        if (this.totalContractValue == "" || isNullOrUndefined(this.totalContractValue)) {
            this.totalContractValue = 0;
        }
        if (this.totalContractValue != "" || this.totalContractValue != null || !isNullOrUndefined(this.totalContractValue)) {
            if (this.totalContractValue.toString().match(/^[0-9,]{0,13}(\.\d{0,2})?$/g) != null) {
                var oldvalue=this.totalContractValue;
                var newvalue=oldvalue.replace(/\,/g,"");
                this.strTotalContractValue = Number(newvalue); 
            }
            else {
                this.strError += ValidationMessage.TOTALCONTRACTVALUEDECI;
                this.bFLag = false;
            }

        }

        if ((this.cRMid == "" || isNullOrUndefined(this.cRMid))) {
            this.strError += ValidationMessage.CRM_ID;
            this.bFLag = false;
        }


        if (this.cRMStage == "" || this.cRMStage == "0" || isNullOrUndefined(this.cRMStage)) {
            this.strError += ValidationMessage.VALID_CRM_STAGE;
            this.bFLag = false;
        }
        if (this.cRMTCV != "" && !isNullOrUndefined(this.cRMTCV)) {
            if (this.cRMTCV.toString().match(/^[0-9,]{0,13}(\.\d{0,2})?$/g) != null) {
                let crmtcv=this.cRMTCV.replace(/\,/g,"");
                this.strCRMTCV = this.NewFomattedInput(crmtcv);
            }
            else {
                this.strError += ValidationMessage.VALID_CRM_TCV;
                this.bFLag = false;
            }
        }
        else {
            this.strError += ValidationMessage.VALID_CRM_TCV_VALUE;
            this.strCRMTCV="";
            this.bFLag = false;
        }


        if (this.userUnit == "1") {
            if (this.cRMBeacon != "" && !isNullOrUndefined(this.cRMBeacon)) {
                if (this.cRMBeacon.toString().match(/^[0-9,]{0,13}(\.\d{0,2})?$/g) != null) {
                    this.strcRMBeacon = ((this.cRMBeacon) * 1000000.00).toString();
                }
                else {
                    this.validationMessage += ValidationMessage.VALID_CRM_BEACON;
                    this.bFLag = false;
                }
            }
            else {
                this.strcRMBeacon = null;
            }
        }

        if (this.dealTerm == "" || isNullOrUndefined(this.dealTerm)) {
            this.strError += ValidationMessage.DEAL_TERM_ERROR;
            this.bFLag = false;
        }
        if (this.digitalTransformation == 1 && this.getDigitalTransformation.getDigital == 0) {
            this.strError += ValidationMessage.SELECTTHEDIGITALTRANSFORMATION;
            this.bFLag = false;
        }
        if (this.userUnit != "1") {
            if (this.getDigitalTransformation.getDigital != 0 && !isNullOrUndefined(this.getDigitalTransformation.getDigital)) {
                if ((this.digitalTcv == 0) || (isNullOrUndefined(this.digitalTcv)) || this.digitalTcv.toString() == "") {

                    this.strError += ValidationMessage.DIGITAL_TCV_ERROR;
                    this.bFLag = false;
                }
            }
            if (!isNullOrUndefined(this.digitalTcv)) {

                if (this.digitalTcv.toString().match(/^[0-9,]{0,13}(\.\d{0,2})?$/g) != null) {
                    this.strDigitalTcv = ((this.digitalTcv) ).toString();
                }
                else {

                    this.strError += ValidationMessage.DIGITAL_TCV_DECIMAL_ERROR;
                    this.bFLag = false;
                }

            }
        }

        if (this.contractRenewal == 'Yes') {
            if (isNullOrUndefined(this.ContractRenewalValue)) {
                this.strError += ValidationMessage.MSG_ERROR_CONTRACTRENEWAL;
                this.bFLag = false;
            }
        }
        else {
            this.ContractRenewalValue = "";
        }

        if (this.userUnit == "1") {

            if (this.itIsScope == "" || this.itIsScope == null) {
                this.strError += ValidationMessage.MSG_ERROR_ITISSCOPE;
                this.bFLag = false;
            }
            if (this.DealstatusID == 0) {
                this.strError += ValidationMessage.ERROR_DEALSTATUS;
                this.bFLag = false;
            }
            if (this.salesStageMovedOnDate == 0) {
                this.strError += ValidationMessage.SALES_STAGE_MOVED_ON_DATE_ERROR;
                this.bFLag = false;
            }
            if (this.proposalSubmissionDate == 0) {
                this.strError += ValidationMessage.PROPOSAL_SUBMISSION_DATE_ERROR;
                this.bFLag = false;
            }
            if (this.proposalSubmissionDate != undefined) {
                let cday = this.proposalSubmissionDate.date.day;
                if (cday < 10) {
                    cday = "0" + cday
                }
                let cmonth = this.proposalSubmissionDate.date.month;
                if (cmonth < 10) {
                    cmonth = "0" + cmonth
                }
                let cyear = this.proposalSubmissionDate.date.year;

              this.proposalSubmissionDt = cyear.toString() + cmonth.toString() + cday.toString();
            }
            else {
                this.strError += ValidationMessage.PROPOSAL_SUBMISSION_DATE_ERROR;
                this.bFLag = false;
            }

            if (this.salesStageMovedOnDate != undefined) {
                let cday = this.salesStageMovedOnDate.date.day;
                if (cday < 10) {
                    cday = "0" + cday
                }
                let cmonth = this.salesStageMovedOnDate.date.month;
                if (cmonth < 10) {
                    cmonth = "0" + cmonth
                }
                let cyear = this.salesStageMovedOnDate.date.year;

              this.salesStageMovedOnDt = cyear.toString() + cmonth.toString() + cday.toString();
            }
            else {
                this.strError += ValidationMessage.SALES_STAGE_MOVED_ON_DATE_ERROR;
                this.bFLag = false;
            }

            if (this.opportunityDescDetails == "" || isNullOrUndefined(this.opportunityDescDetails)) {
                this.strError += ValidationMessage.SELECTTHEOPPORTUNITY_DESC_DETAILS;
                this.bFLag = false;
            }
        }
        else {

            this.itIsScope = null;
        }


        if (this.lastUpdatedby == "" || isNullOrUndefined(this.lastUpdatedby)) {
            this.lastUpdatedby = 0;
        }
        if (this.shoWPibs == "" || isNullOrUndefined(this.shoWPibs)) {
            this.shoWPibs = "0";
        }




        return this.bFLag;

    }

    GetQtrFY() {
        this.expectedRevenueQtr = this.expectedRevenueQtrYr.substring(0, 2);

        this.expectedRevenueFY = this.expectedRevenueQtrYr.substring(5, this.expectedRevenueQtrYr.length);
    }

    public SavePrimaryInformation() {
        let objNewOpportunity: any =
            {
                CURRENCY_ID: this.currency,
                FTEOff: this.FTEOffshore,
                FTEOn: this.FTEOnsite,
                RFI_REVIEW_DT: this.strRFIReviewDate,
                RFP_REVIEW_DT: this.strRFPReviewDate,
                RFI_REVIEW_BY: this.RFIReviewReqd,
                RFP_REVIEW_BY: this.RFPReviewReqd,
                RFIReceivedDate: this.strRFIReceivedDate,
                RFIProbableSubmissionDate: this.strProbableRFISubDate,
                RFIActualSubmissionDate: this.strActualRFISubDate,
                RFPReceivedDate: this.strRFPReceivedDate,
                RFPProbableSubmissionDate: this.strProbableRFPSubDate,
                RFPActualSubmissionDate: this.strActualRFPSubDate,
                BCP_DRP_LOCATION: this.BCPorDRPLocation,
                OpportunityId: this.opportunityId,
                OPPORTUNITY_DESC: this.opportunityDescription,
                OLD_OPPORTUNITY_DESC: this.oldOpportunityDescription,
                GEOGRAPHY_ID: this.GeographyComponent.geography,
                CUST_ID: this.strCustomerID,
                CUST_TYPE_ID: this.strCustTypeID,
                INDUSTRY_PRACTICE_ID: this.industryPracticeid,
                StageID: this.StageId,
                GeosalesOwner: this.GeographySalesOwner.geographySalesOwner,
                OffPracOwner: "0",
                RDCrd: '0',
                OffShoreBDLead: this.OffshorePresalesLeadVertical.OffShoreverti,
                OnsiteOwner: this.OffshorePresalesLeadHorizontal.OffShoreHorz,
                PROBABILITY_OF_WIN: this.probabilityofwin,
                ContractLength: this.dealTerm,
                FTE: this.potentialFTE,
                REMARK: '0',
                OppDate: this.oppReceivedDate,
                EmpNo: this.userId,
                ClosureDate: this.closureDate,
                ADVISORY_ID: '0',
                PLATFORM: this.ShowPlatform,
                PRICING_TYPE_ID: this.pricingtypeid,
                NextStep: this.nextstep,
                BUSINESS_ID: this.DdlVertical.vertical,
                PRODUCT_ID: '0',
                COMPETENCY_ID: '0',
                SUB_COMPETENCY_ID: '0',
                AnnualSaleValue: '0',
                AccountSalesOwner: this.AccountSalesOwner.accountSalesOwner,
                ExeSponser: this.ExecutiveSponsor.executivesponsor,
                ProactiveProposal: this.shoWProactiveProposal,
                ValBPSCon: '0',
                IsuMain: this.isu,
                PlatformNew: this.ddlplatform,
                StatusUpdate: this.statusupdate,
                Category_Id: this.categoryid,
                CountryId: this.DdlCountry.country,
                NextStepDueDt: this.varnextstepduedt,
                UnitId: this.userUnit,
                ISU_OWNER_ID: this.isuOwnerId,
                ISU_CD: this.DdlIOU.iou,
                TataGroupAccount: this.showTGA,
                TPA: this.showTPA,
                TPA_Name: this.TPAName,
                PIBS: this.shoWPibs,
                TCSInvestment: '0',
                PIBStartDate: '0',
                PIBSEndDate: '0',
                FTEsEngaged: '0',
                PIBStatus: '0',
                PIBS_OUTCOME_ID: '0',
                PIBStatusRemarks: '0',
                FTE_TYPE: '0',
                FTE_TYPE_COUNT: '0',
                BPODomain: '0',
                DOMAIN_PRESALES_LEAD: '0',
                DealCategory: this.dealCategoryId,
                BPSSubSPID: '0',
                BPSOfferingID: this.bpsoffering,
                DealCoachName: '0',
                DemandType: '0',
                KEY_DEAL: '0',
                ProposedSolution: '0',
                KeyRmk: '0',
                WinningTheme: this.winningTheme,
                KeyCustExp: this.txtKeyCustExp,
                operatingModel: '0',
                PRICING_MODEL: '0',
                Differentiators: '0',
                Risks: '0',
                KeyCustomerConnects: '0',
                BPOOfferingDescription: '0',
                FIRST_TIME_OUTSOURCE: '0',
                INCUMBENTS: '0',
                NAME_OF_INCUMBENTS: '0',
                TCS_OFFERING_CAPABILITY: '0',
                SpecifyOffering: '0',
                CoachAvailable: '0',
                FnA: this.YFAO,
                FnA_FTE: this.FAOFTE,
                HRO: this.YHRO,
                HRO_FTE: this.HROFTE,
                SCM: this.YSCM,
                SCM_FTE: this.SCMFTE,
                KPO: '0',
                KPO_FTE: '0',
                LPO: this.YLPO,
                LPO_FTE: this.LPOFTV,
                VERTICAL: this.YVertical,
                VerticalFTE: this.VerticalFTA,
                Voice: this.YCEM,
                VoiceFTE: this.CEMFTA,
                BPM: this.YBPM,
                BPM_FTE: this.BPMFTA,
                SolTM: this.NoofTeamMember,
                DelTM: this.deliveryTeamMember,
                BID_MANAGER: this.bidOwnertxt2,
                BID_EXEC_OWNER: this.bidManagertxt2,
                PRICING_OWNER: this.pricingOwnertxt2,
                TransitionTeam: '0',
                ExpectedDate: this.strExpectedStartDate,
                TransitionReq: this.transitionReqd,
                Quarter: this.expectedRevenueQtr,
                FiscalYear: this.expectedRevenueFY,
                OPP_NGM: '0',
                CRM_REASON: '0',
                BID_EXECUTIVE_EMPID: this.bidManagertxt1,
                Disqual: this.dealqualifiedtxt,
                AddDeal: this.showDealqualified,
                BID_EXECUTIVE_NAME: this.bidManagertxt2,
                DealOwner: this.DdlDealOwner1.dealOwner1,
                DealOwner2: this.DdlDealOwner2.dealOwner2,
                ImmediateComment: '0',
                FTEDD: this.FTERequiredForDD,
                SolutionLeader: this.solutionLeadertxt2,
                RUR: this.resourcingRequired,
                RTComments: '0',
                SeatRequirements: '0',
                CRM_ID: this.cRMid,
                TCV: this.strTotalContractValue,
                ValueBPS: '0',
                ValueBPSTCV: '0',
                OPP_TYPE: this.opportunityTrackedBy,
                MultiTower: this.showMultiTower,
                StatusFlag: '0',
                FnA_Lead: this.FAOSolutionLeader,
                HRO_Lead: this.HROSolutionLeader,
                SCM_Lead: this.SCMSolutionLeader,
                KPO_Lead: '0',
                LPO_Lead: this.LPOSolutionLeader,
                VERTICAL_LEAD: this.verticalSolutionLeader,
                Voice_Lead: this.CEMSolutionLeader,
                BPM_LEAD: this.BPMSolutionLeader,
                BID_MANAGER_EMPID: this.bidOwnertxt1,
                BID_EXEC_OWNER_EMPID: this.bidManagertxt1,
                PRICING_OWNER_EMPID: this.pricingOwnertxt1,
                SolutionLeaderId: this.solutionLeadertxt1,
                FnATCV: this.FAOTCV,
                HROTCV: this.HROTCV,
                SCMTCV: this.SCMTCV,
                KPOTCV: '0',
                LPOTCV: this.LPOTCV,
                VERTICALTCV: this.VerticalTCV,
                VOICETCV: this.CEMTCV,
                BPMTCV: this.BPMTCV,
                PibsSaleValue: '0',
                ClusterId: '0',
                ServiceId: this.DdlService.service,
                SUBIOU: this.SubIouComp.subiou,
                TransitionEmpId: this.transitionManagertxt1,
                TransitionName: this.transitionManagertxt2,
                TransitionType: this.transitionType,
                TransitionApproach: this.transitionApproach,
                TransitionModel: this.transitionModel,
                Proposalfactory: this.showPleaseratetheproposal,
                ProposalfactoryOptions: this.pleaseratetheproposal,
                ProposalComments: this.proposalComments,
                DTValue: this.getDigitalTransformation.getDigital,
                Other_DT: this.otherDigitalTransformationValue,
                CRM_TCV: this.strCRMTCV,
                CRM_STAGE: this.cRMStage,
                ItisScope: this.itIsScope,
                IsContractRenewal: this.contractRenewal,
                ContractRenewalValue: this.ContractRenewalValue,

                SubSPId: this.subSPId,
                CRM_Beacon: this.strcRMBeacon,
                strDigitalTcv: this.strDigitalTcv,
                //changess
                RESOURCING_ID: this.resourcingId,
                SEAT_IDENTIFICATION_ID: this.identificationId,

                TRAINING_DURATION: this.durationofTraining,
                ONSITE_TRAINING_NOS: this.onsiteTraining,
                SelectionDate: this.strSelectionDate,
                ContractCloserDate: this.strcontractCloserdate,
                DealStatus: this.DealstatusID,
                ServicePractice: this.ServicePracticeID,
                CoreOffering: this.CoreOfferingID,
                ShortListDate: this.strShortlistDate,
                Offerings: this.showOfferings,
                ModernisedOffering: this.modernisedOffering,
                CognitiveSolutions: this.cognitiveSolutions,
                OpportunityDescDetails: this.opportunityDescDetails,
                OfferingType: this.OfferingTypeID,
                CofID: this.CoreOfferingsNameID,
                DigitalFlagging: this.showDF,
                IgnioTMScope: this.showIS,
                IgnioTMScopeDetails: this.ignioTMScope,
                PROPOSAL_SUBMISSION_DATE: this.proposalSubmissionDt,
                SALES_STAGE_MOVED_ONDATE: this.salesStageMovedOnDt,
                DELIVERY_LOCATION_PROPOSED: this.deliveryLocationID,
                Cboi_Offering_id:this.cboiofferingvalue,
                Deal_Flag_id:this.dealflagvalue
            };



        this.stage9Service.SaveStage9Opportunity(objNewOpportunity)
            .subscribe(result => {

                if (result == 1) {
                    this.successMessage = ValidationMessage.DATASUCCESSFULLYADDEDSAVEANDNEXT;
                    this.lblError0 = ValidationMessage.SUCCESS;
                    this.disableAllFields = true;
                    this.disableStage = "true";

                }
                else {
                    this.successMessage = ValidationMessage.SOMEISSUEINSAVINGRECORDS;
                    this.lblError0 = ValidationMessage.DANGER;
                }

            },

            error => { throw error; },
        )
    }



    public ValidateGeneralInformation(): any {
        this.count = 0;
        let strError = "";
        let Varnextstepduedt;
        this.validationMessage = "";
        if (this.nextstepduedt != undefined) {
            let day = this.nextstepduedt.date.day;
            if (day < 10) {
                day = "0" + day
            }
            let month = this.nextstepduedt.date.month;
            if (month < 10) {
                month = "0" + month
            }
          this.varnextstepduedt = this.nextstepduedt.date.year.toString() + month.toString() + day.toString();
        }



        if (this.probabilityofwin == "0" || isNullOrUndefined(this.probabilityofwin)) {
            this.strError += ValidationMessage.PROBABILITYOFWIN;
            this.bFLag = false;
        }
        if (this.categoryid == 0 || isNullOrUndefined(this.categoryid)) {
            this.strError += ValidationMessage.SELECTTHEOPPORTUNITYFLAG
            this.bFLag = false;
        }
        if (this.varnextstepduedt == "" || isNullOrUndefined(this.varnextstepduedt)) {
            this.strError += ValidationMessage.SELECTTHENEXTSTEPDUEDATE
            this.bFLag = false;
        }
        if (this.userUnit == '2' && (this.pricingtypeid == "0" || this.pricingtypeid == "" || isNullOrUndefined(this.pricingtypeid))) {
            this.strError += ValidationMessage.SELECTTHEPRICINGTYPE;
            this.bFLag = false;
        }
        if (this.userUnit == '1' && this.ddlPricingType.length < 1) {
            this.strError = ValidationMessage.SELECTPRICINGTYPE;         
            this.bFLag = false;
        }
        if (isNullOrUndefined(this.currency) || this.currency == 0) {
            this.strError += ValidationMessage.CURRENCY_ERROR;
            this.bFLag = false;
        }
        if (this.FTEOffshore.toString() == undefined || this.FTEOffshore.toString() == null || this.FTEOffshore.toString() == "") {

            this.strError += ValidationMessage.FTE_OFFSHORE_ERROR;

            this.bFLag = false;

        }

        if (this.FTEOnsite.toString() == undefined || this.FTEOnsite.toString() == null || this.FTEOnsite.toString() == "") {

            this.strError += ValidationMessage.FTE_ONSITE_ERROR;

            this.bFLag = false;

        }
        if (this.FTEOffshore != "" && this.FTEOnsite != "") {
            let inTotal: number;
            let inDiffFTE: number;
            inTotal = parseInt(this.FTEOffshore) + parseInt(this.FTEOnsite);
            inDiffFTE = parseInt(this.potentialFTE) - inTotal;
            if (inDiffFTE < 0) {
                this.strError += ValidationMessage.SUM_FTE_ONSITE_AND_OFFSHORE_ERROR;
                this.bFLag = false;
            }
        }

        if (isNullOrUndefined(this.RFPReviewReqd) || this.RFPReviewReqd == "") {
            this.strError += ValidationMessage.RFP_REVIEW_ERROR;
            this.bFLag = false;
        }

        if (this.userUnit == "2") {
          if (this.RFIReviewReqd == "" || isNullOrUndefined(this.RFIReviewReqd)) {
                this.strError += ValidationMessage.ERROR_RFIREVIEWREQDBY;
                this.bFLag = false;
            }
        }

        if (this.RFPReceivedDate != undefined) {
            let day = this.RFPReceivedDate.date.day;
            if (day < 10) {
                day = "0" + day
            }
            let month = this.RFPReceivedDate.date.month;
            if (month < 10) {
                month = "0" + month
            }
            this.validateRFPReceivedDate = month + '-' + day + '-' + this.RFPReceivedDate.date.year;
          this.strRFPReceivedDate = this.RFPReceivedDate.date.year.toString() + month.toString() + day.toString();
        }
        else {
            if (this.userUnit == "2") {
            this.strError += ValidationMessage.RFP_RECEIVED_DATE_ERROR;
            this.bFLag = false;
          }
        }

        if (this.RFPReviewDate != undefined && this.RFPReviewDate != null) {
            let day = this.RFPReviewDate.date.day;
            if (day < 10) {
                day = "0" + day
            }
            let month = this.RFPReviewDate.date.month;
            if (month < 10) {
                month = "0" + month
            }
          this.strRFPReviewDate = this.RFPReviewDate.date.year.toString() + month.toString() + day.toString();
        }
        else {
            if (this.userUnit == "2") {
            this.strError += ValidationMessage.RFP_REVIEW_DATE_ERROR;
            this.bFLag = false;
            }
        }

        if (this.probableRFPSubDate != undefined && this.probableRFPSubDate != null) {
            let day = this.probableRFPSubDate.date.day;
            if (day < 10) {
                day = "0" + day
            }
            let month = this.probableRFPSubDate.date.month;
            if (month < 10) {
                month = "0" + month
            }
            this.validateProbableRFPSubDate = month + '-' + day + '-' + this.probableRFPSubDate.date.year;
          this.strProbableRFPSubDate = this.probableRFPSubDate.date.year.toString() + month.toString() + day.toString();

        }
        else {
            if (this.userUnit == "2") {
            this.strError += ValidationMessage.PROBABLE_RFP_SUBMISSION_DATE_ERROR;
            this.bFLag = false;
          }
        }
        if (new Date(this.validateProbableRFPSubDate) > new Date(this.validateClosureDate)) {
            this.strError += ValidationMessage.PROBABLE_RFP_SUBMISSION_DATE_GREATER;
            this.bFLag = false;
        }

        if (this.contractCloserdate != undefined && this.contractCloserdate != null) {
            let day = this.contractCloserdate.date.day;
            if (day < 10) {
                day = "0" + day
            }
            let month = this.contractCloserdate.date.month;
            if (month < 10) {
                month = "0" + month
            }

          this.strcontractCloserdate = this.contractCloserdate.date.year.toString() + month.toString() + day.toString();
        }
        else {
            this.strError += ValidationMessage.ERROR_CONTRACTCLOSER_DATE;
            this.bFLag = false;
        }





        if (this.actualRFPSubDate != undefined && this.actualRFPSubDate != null) {


            let day = this.actualRFPSubDate.date.day;
            if (day < 10) {
                day = "0" + day
            }
            let month = this.actualRFPSubDate.date.month;
            if (month < 10) {
                month = "0" + month
            }
            this.validateActualRFPSubDate = month + '-' + day + '-' + this.actualRFPSubDate.date.year;
          this.strActualRFPSubDate = this.actualRFPSubDate.date.year.toString() + month.toString() + day.toString();

        }
        else {
            this.strError += ValidationMessage.ACTUAL_RFP_SUBMISSION_DATE_ERROR;
            this.bFLag = false;
        }
        if (new Date(this.validateActualRFPSubDate) > new Date(this.validateClosureDate)) {
            this.strError += ValidationMessage.ACTUAL_RFP_SUBMISSION_DATE_GREATER;
            this.bFLag = false;
        }
        if (this.RFIReviewDate != undefined) {
            let day = this.RFIReviewDate.date.day;
            if (day < 10) {
                day = "0" + day
            }
            let month = this.RFIReviewDate.date.month;
            if (month < 10) {
                month = "0" + month
            }
          this.strRFIReviewDate = this.RFIReviewDate.date.year.toString() + month.toString() + day.toString();
            this.validateRFIReviewDate = month + '-' + day + '-' + this.RFIReviewDate.date.year;
        }
        else {
            if (this.userUnit == "2") {
                this.strError += ValidationMessage.ERROR_RFIREVIEWDATE;
                this.bFLag = false;
            }
        }
        if (this.RFIReceivedDate != undefined && this.RFIReceivedDate != null) {
            let day = this.RFIReceivedDate.date.day;
            if (day < 10) {
                day = "0" + day
            }
            let month = this.RFIReceivedDate.date.month;
            if (month < 10) {
                month = "0" + month
            }
          this.strRFIReceivedDate = this.RFIReceivedDate.date.year.toString() + month.toString() + day.toString();
        }
        else {
            if (this.userUnit == "2") {
                this.strError += ValidationMessage.ERROR_RFIRECEIVEDDATE;
                this.bFLag = false;
            }
        }
        if (this.selectionDate != undefined && this.selectionDate != null) {
            let day = this.selectionDate.date.day;
            if (day < 10) {
                day = "0" + day
            }
            let month = this.selectionDate.date.month;
            if (month < 10) {
                month = "0" + month
            }
            this.validateSelectionDate = month + '-' + day + '-' + this.selectionDate.date.year;
          this.strSelectionDate = this.selectionDate.date.year.toString() + month.toString() + day.toString();
        }
        else {
            this.strError += ValidationMessage.ERROR_SELECTIONDATE;
            this.bFLag = false;
        }
        if (this.shortlistDate != undefined && this.shortlistDate != null) {
            let day = this.shortlistDate.date.day;
            if (day < 10) {
                day = "0" + day
            }
            let month = this.shortlistDate.date.month;
            if (month < 10) {
                month = "0" + month
            }
            this.validateShortlistDate = month + '-' + day + '-' + this.shortlistDate.date.year;
          this.strShortlistDate = this.shortlistDate.date.year.toString() + month.toString() + day.toString();
        }
        else {
            this.strError += ValidationMessage.ERROR_SHORTLISTDATE;
            this.bFLag = false;
        }
        if (new Date(this.validateShortlistDate) > new Date(this.validateSelectionDate)) {
            this.strError += ValidationMessage.COMPARE_SHORTLISTDATE_AND_SELECTIONDATE;
            this.bFLag = false;
        }
        if (this.actualRFISubDate != undefined && this.actualRFISubDate != null) {

            let day = this.actualRFISubDate.date.day;
            if (day < 10) {
                day = "0" + day
            }
            let month = this.actualRFISubDate.date.month;
            if (month < 10) {
                month = "0" + month
            }
            this.validateActualRFISubDate = month + '-' + day + '-' + this.actualRFISubDate.date.year;
          this.strActualRFISubDate = this.actualRFISubDate.date.year.toString() + month.toString() + day.toString();

        }
        else {
            if (this.userUnit == "2") {
                this.strError += ValidationMessage.ERROR_ACTUALRFISUBMISSIONDATE;
                this.bFLag = false;
            }
        }
        if (new Date(this.validateActualRFISubDate) > new Date(this.validateClosureDate)) {
           
                this.strError += ValidationMessage.ACTUAL_RFI_SUBMISSION_DATE_GREATER;
                
        }
        if (this.probableRFISubDate != undefined) {
            let day = this.probableRFISubDate.date.day;
            if (day < 10) {
                day = "0" + day
            }
            let month = this.probableRFISubDate.date.month;
            if (month < 10) {
                month = "0" + month
            }
            this.validateProbableRFISubDate = month + '-' + day + '-' + this.probableRFISubDate.date.year;
          this.strProbableRFISubDate = this.probableRFISubDate.date.year.toString() + month.toString() + day.toString();

        }
        else {
            
            if (this.userUnit == "2") {
                this.strError += ValidationMessage.ERROR_PROBABLERFISUBMISSIONDATE;
                this.bFLag = false;
            }
        }

        if (this.userUnit == "2") {
            if (new Date(this.validateProbableRFISubDate) > new Date(this.validateClosureDate)) {
            
                this.strError += ValidationMessage.PROBABLE_RFI_SUBMISSION_DATE_GREATER;
                this.bFLag = false;
            
         }
        }

        !isNullOrUndefined(this.validateRFIReviewDate)
        {
            if(new Date(this.validateRFIReviewDate)>new Date(this.validateActualRFISubDate)){
        
                this.strError+=ValidationMessage.RFI_REVIEW_GREATER;
                this.bFLag = false;
            }
        }
            !isNullOrUndefined(this.validateActualRFISubDate)
            {
            if (new Date(this.validateRFPReceivedDate) < new Date(this.validateActualRFISubDate)) {
            
                this.strError += ValidationMessage.COMPARE_RFP_RECEIVED_DT_ACTUAL_RFI_SUB_DT;
                this.bFLag = false;
            
            }
        }
        if (new Date(this.validateProbableRFPSubDate) < new Date(this.validateRFPReceivedDate)) {
            this.strError += ValidationMessage.COMPARE_RFP_RECEIVED_DT_PROBABLE_RFP_SUB_DT;
            this.bFLag = false;
        }

        
            !isNullOrUndefined(this.validateActualRFISubDate)
            {
            if (new Date(this.validateProbableRFPSubDate) < new Date(this.validateActualRFISubDate)) {
           
                this.strError += ValidationMessage.COMPARE_PROBABLE_RFP_SUB_DT_ACTUAL_RFI_SUB_DT;
                this.bFLag = false;
            }
        }
        
        if (this.statusupdate == "" || isNullOrUndefined(this.statusupdate)) {
            this.statusupdate = "";
        }
        if (this.nextstep == "" || isNullOrUndefined(this.nextstep)) {
            this.nextstep = "";
        }
        if (this.showWasproposal == null) {
            this.strError += ValidationMessage.SELECTTHEPROPOSALFACTORY;
            this.bFLag = false;
        }
        if (this.showWasproposal == "Yes") {
            if (this.pleaseratetheproposal == "0" || isNullOrUndefined(this.pleaseratetheproposal)) {
                this.strError += ValidationMessage.RATETHEPROPOSALFACTORY;
                this.bFLag = false;
            }
        }
        if (this.proposalComments == "" || isNullOrUndefined(this.proposalComments)) {
            this.proposalComments = "";
        }

        //rajat
        if (isNullOrUndefined(this.wonnumber)) {
            this.wonnumber = 0;
        }
        if (this.nextstepfrompreviousreview == "" || isNullOrUndefined(this.nextstepfrompreviousreview)) {
            this.nextstepfrompreviousreview = "";
        }
        if (this.currentfiscal == "" || isNullOrUndefined(this.currentfiscal)) {
            this.currentfiscal = "";
        }
        if (this.revenue == "" || isNullOrUndefined(this.revenue)) {
            this.revenue = "";
        }
        if (this.categoryrag == "" || isNullOrUndefined(this.categoryrag)) {
            this.categoryrag = "";
        }




        if (isNullOrUndefined(this.wonfte) || this.wonfte == 0) {
            this.strError += ValidationMessage.ENTER_WON_FTE;
            this.bFLag = false;

        }
        if (isNullOrUndefined(this.ddlWinReason) || this.ddlWinReason.length == 0) {
            this.strError += ValidationMessage.WIN_REASON;
            this.bFLag = false;
        }
        if (isNullOrUndefined(this.winverbatim) || this.winverbatim == "") {
            this.strError += ValidationMessage.WIN_VERBATIM;
            this.bFLag = false;

        }
        if (isNullOrUndefined(this.wonfinaltcv) || this.wonfinaltcv == "") {
            this.strError += ValidationMessage.WON_Final_TCV;
            this.bFLag = false;


        }

        if (this.actualstartdate != undefined && this.actualstartdate != null) {
            let day = this.actualstartdate.date.day;
            if (day < 10) {
                day = "0" + day
            }
            let month = this.actualstartdate.date.month;
            if (month < 10) {
                month = "0" + month
            }
          this.stractualstartdate = this.actualstartdate.date.year.toString() + month.toString() + day.toString();
        }




        if (this.contractclosuredate != undefined && this.contractclosuredate != null) {
            let day = this.contractclosuredate.date.day;
            if (day < 10) {
                day = "0" + day
            }
            let month = this.contractclosuredate.date.month;
            if (month < 10) {
                month = "0" + month
            }
          this.strcontractclosuredate = this.contractclosuredate.date.year.toString() + month.toString() + day.toString();
        }

        if (this.windate != undefined) {
            let day = this.windate.date.day;
            if (day < 10) {
                day = "0" + day
            }
            let month = this.windate.date.month;
            if (month < 10) {
                month = "0" + month
            }
            this.validateWinDate = month + '-' + day + '-' + this.windate.date.year;
          this.strWinDate = this.windate.date.year.toString() + month.toString() + day.toString();

        }
        else {
            this.strError += ValidationMessage.ERROR_WINDATE;
            this.bFLag = false;
        }
        //rajat
        if (this.userUnit == "1") {
            if(this.OfferingTypeID==3)
            {          
                if (this.CoreOfferingID == "" || isNullOrUndefined(this.CoreOfferingID) ) {
                    this.strError += ValidationMessage.ERROR_COREOFFERING
                    this.bFLag = false;
                }
            }

            if (this.ServicePracticeID == "" || isNullOrUndefined(this.ServicePracticeID)) {
                this.strError += ValidationMessage.ERROR_SERVICEPRACTICE
                this.bFLag = false;
            }
            if(this.OfferingTypeID==1 || this.OfferingTypeID==2)
            {
                if (this.modernisedOffering == "" || isNullOrUndefined(this.modernisedOffering) || this.modernisedOffering == 0) {
                    this.strError += ValidationMessage.ERROR_MODERNISEDOFFERING
                    this.bFLag = false;
                }
            }
            if (this.cognitiveSolutions == "" || isNullOrUndefined(this.cognitiveSolutions) || this.cognitiveSolutions == 0) {
                this.strError += ValidationMessage.ERROR_COGNITIVESOLUTIONS
                this.bFLag = false;
            }
            if (this.ignioTMScope == "" || isNullOrUndefined(this.ignioTMScope)) {
                if (this.showIS == "Yes") {
                    this.strError += ValidationMessage.IGNIOTMSCOPEDETAILS;
                    this.bFLag = false;
                }
            }
            if (this.showIS == "" || isNullOrUndefined(this.showIS)) {
                this.strError += ValidationMessage.IGNIOTMSCOPE;
                this.bFLag = false;
            }
            if (this.OfferingTypeID == "" || isNullOrUndefined(this.OfferingTypeID) || this.OfferingTypeID == 0) {
                this.strError += ValidationMessage.ERROR_OfferingTypes
                this.bFLag = false;
            }
  
            if (this.ddlDeliveryLocation.length < 1) {
                this.strError += ValidationMessage.DELIVERYLOCATIONPROPOSED;
                this.bFLag = false;
            }
            let check: number;
            let check1: number;
            this.deliveryLocationID = '';
            this.ddlDeliveryLocation.forEach(objDeliveryLocation => {
                if (objDeliveryLocation.id === -1) {
                    check = 1;
                    this.deliveryLocationID = '-1';
                }
                else {
                    check1 = 1;
                    this.deliveryLocationID = this.deliveryLocationID + ',' + objDeliveryLocation.id;
                }
            });
            this.deliveryLocationID = this.deliveryLocationID + ','
            if (check === 1 && check1 === 1) {
                this.deliveryLocationID = '-1';
            }
            else {
                check = 0;
                check1 = 0;
            }
        }
        return this.bFLag;
    }

    public SaveGeneralInformation() {
        let objNewOpportunity: any =
            {
                CURRENCY_ID: this.currency,
                FTEOff: this.FTEOffshore,
                FTEOn: this.FTEOnsite,
                RFI_REVIEW_DT: this.strRFIReviewDate,
                RFP_REVIEW_DT: this.strRFPReviewDate,
                RFI_REVIEW_BY: this.RFIReviewReqd,
                RFP_REVIEW_BY: this.RFPReviewReqd,
                RFIReceivedDate: this.strRFIReceivedDate,
                RFIProbableSubmissionDate: this.strProbableRFISubDate,
                RFIActualSubmissionDate: this.strActualRFISubDate,
                RFPReceivedDate: this.strRFPReceivedDate,
                RFPProbableSubmissionDate: this.strProbableRFPSubDate,
                RFPActualSubmissionDate: this.strActualRFPSubDate,
                BCP_DRP_LOCATION: this.BCPorDRPLocation,
                OpportunityId: this.opportunityId,
                OPPORTUNITY_DESC: this.opportunityDescription,
                OLD_OPPORTUNITY_DESC: this.oldOpportunityDescription,
                GEOGRAPHY_ID: this.GeographyComponent.geography,
                CUST_ID: this.strCustomerID,
                CUST_TYPE_ID: this.strCustTypeID,
                INDUSTRY_PRACTICE_ID: this.industryPracticeid,
                StageID: this.StageId,
                GeosalesOwner: this.GeographySalesOwner.geographySalesOwner,
                OffPracOwner: "0",
                RDCrd: '0',
                OffShoreBDLead: this.OffshorePresalesLeadVertical.OffShoreverti,
                OnsiteOwner: this.OffshorePresalesLeadHorizontal.OffShoreHorz,
                PROBABILITY_OF_WIN: this.probabilityofwin,
                ContractLength: this.dealTerm,
                FTE: this.potentialFTE,
                REMARK: '0',
                OppDate: this.oppReceivedDate,
                EmpNo: this.userId,
                ClosureDate: this.closureDate,
                ADVISORY_ID: '0',
                PLATFORM: this.ShowPlatform,
                PRICING_TYPE_ID: this.pricingtypeid,
                NextStep: this.nextstep,
                BUSINESS_ID: this.DdlVertical.vertical,
                PRODUCT_ID: '0',
                COMPETENCY_ID: '0',
                SUB_COMPETENCY_ID: '0',
                AnnualSaleValue: '0',
                AccountSalesOwner: this.AccountSalesOwner.accountSalesOwner,
                ExeSponser: this.ExecutiveSponsor.executivesponsor,
                ProactiveProposal: this.shoWProactiveProposal,
                ValBPSCon: '0',
                IsuMain: this.isu,
                PlatformNew: this.ddlplatform,
                StatusUpdate: this.statusupdate,
                Category_Id: this.categoryid,
                CountryId: this.DdlCountry.country,
                NextStepDueDt: this.varnextstepduedt,
                UnitId: this.userUnit,
                ISU_OWNER_ID: this.isuOwnerId,
                ISU_CD: this.DdlIOU.iou,
                TataGroupAccount: this.showTGA,
                TPA: this.showTPA,
                TPA_Name: this.TPAName,
                PIBS: this.shoWPibs,
                TCSInvestment: '0',
                PIBStartDate: '0',
                PIBSEndDate: '0',
                FTEsEngaged: '0',
                PIBStatus: '0',
                PIBS_OUTCOME_ID: '0',
                PIBStatusRemarks: '0',
                FTE_TYPE: '0',
                FTE_TYPE_COUNT: '0',
                BPODomain: '0',
                DOMAIN_PRESALES_LEAD: '0',
                DealCategory: this.dealCategoryId,
                BPSSubSPID: '0',
                BPSOfferingID: this.bpsoffering,
                DealCoachName: '0',
                DemandType: '0',
                KEY_DEAL: '0',
                ProposedSolution: '0',
                KeyRmk: '0',
                WinningTheme: this.winningTheme,
                KeyCustExp: this.txtKeyCustExp,
                operatingModel: '0',
                PRICING_MODEL: '0',
                Differentiators: '0',
                Risks: '0',
                KeyCustomerConnects: '0',
                BPOOfferingDescription: '0',
                FIRST_TIME_OUTSOURCE: '0',
                INCUMBENTS: '0',
                NAME_OF_INCUMBENTS: '0',
                TCS_OFFERING_CAPABILITY: '0',
                SpecifyOffering: '0',
                CoachAvailable: '0',
                FnA: this.YFAO,
                FnA_FTE: this.FAOFTE,
                HRO: this.YHRO,
                HRO_FTE: this.HROFTE,
                SCM: this.YSCM,
                SCM_FTE: this.SCMFTE,
                KPO: '0',
                KPO_FTE: '0',
                LPO: this.YLPO,
                LPO_FTE: this.LPOFTV,
                VERTICAL: this.YVertical,
                VerticalFTE: this.VerticalFTA,
                Voice: this.YCEM,
                VoiceFTE: this.CEMFTA,
                BPM: this.YBPM,
                BPM_FTE: this.BPMFTA,
                SolTM: this.NoofTeamMember,
                DelTM: this.deliveryTeamMember,
                BID_MANAGER: this.bidOwnertxt2,
                BID_EXEC_OWNER: this.bidManagertxt2,
                PRICING_OWNER: this.pricingOwnertxt2,
                TransitionTeam: '0',
                ExpectedDate: this.strExpectedStartDate,
                TransitionReq: this.transitionReqd,
                Quarter: this.expectedRevenueQtr,
                FiscalYear: this.expectedRevenueFY,
                OPP_NGM: '0',
                CRM_REASON: '0',
                BID_EXECUTIVE_EMPID: this.bidManagertxt1,
                Disqual: this.dealqualifiedtxt,
                AddDeal: this.showDealqualified,
                BID_EXECUTIVE_NAME: this.bidManagertxt2,
                DealOwner: this.DdlDealOwner1.dealOwner1,
                DealOwner2: this.DdlDealOwner2.dealOwner2,
                ImmediateComment: '0',
                FTEDD: this.FTERequiredForDD,
                SolutionLeader: this.solutionLeadertxt2,
                RUR: this.resourcingRequired,
                RTComments: '0',
                SeatRequirements: '0',
                CRM_ID: this.cRMid,
                TCV: this.strTotalContractValue,
                ValueBPS: '0',
                ValueBPSTCV: '0',
                OPP_TYPE: this.opportunityTrackedBy,
                MultiTower: this.showMultiTower,
                StatusFlag: '0',
                FnA_Lead: this.FAOSolutionLeader,
                HRO_Lead: this.HROSolutionLeader,
                SCM_Lead: this.SCMSolutionLeader,
                KPO_Lead: '0',
                LPO_Lead: this.LPOSolutionLeader,
                VERTICAL_LEAD: this.verticalSolutionLeader,
                Voice_Lead: this.CEMSolutionLeader,
                BPM_LEAD: this.BPMSolutionLeader,
                BID_MANAGER_EMPID: this.bidOwnertxt1,
                BID_EXEC_OWNER_EMPID: this.bidManagertxt1,
                PRICING_OWNER_EMPID: this.pricingOwnertxt1,
                SolutionLeaderId: this.solutionLeadertxt1,
                FnATCV: this.FAOTCV,
                HROTCV: this.HROTCV,
                SCMTCV: this.SCMTCV,
                KPOTCV: '0',
                LPOTCV: this.LPOTCV,
                VERTICALTCV: this.VerticalTCV,
                VOICETCV: this.CEMTCV,
                BPMTCV: this.BPMTCV,
                PibsSaleValue: '0',
                ClusterId: '0',
                ServiceId: this.DdlService.service,
                SUBIOU: this.SubIouComp.subiou,
                TransitionEmpId: this.transitionManagertxt1,
                TransitionName: this.transitionManagertxt2,
                TransitionType: this.transitionType,
                TransitionApproach: this.transitionApproach,
                TransitionModel: this.transitionModel,
                Proposalfactory: this.showPleaseratetheproposal,
                ProposalfactoryOptions: this.pleaseratetheproposal,
                ProposalComments: this.proposalComments,
                DTValue: this.getDigitalTransformation.getDigital,
                Other_DT: this.otherDigitalTransformationValue,
                CRM_TCV: this.strCRMTCV,
                CRM_STAGE: this.cRMStage,
                ItisScope: this.itIsScope,
                IsContractRenewal: this.contractRenewal,
                ContractRenewalValue: this.ContractRenewalValue,

                strDigitalTcv: this.strDigitalTcv,
                //changess
                RESOURCING_ID: this.resourcingId,
                SEAT_IDENTIFICATION_ID: this.identificationId,

                TRAINING_DURATION: this.durationofTraining,
                ONSITE_TRAINING_NOS: this.onsiteTraining,
                SelectionDate: this.strSelectionDate,
                ContractCloserDate: this.strcontractCloserdate,
                DealStatus: this.DealstatusID,
                ServicePractice: this.ServicePracticeID,
                CoreOffering: this.CoreOfferingID,
                ShortListDate: this.strShortlistDate,

                WIN_DT: this.strWinDate,
                WIN_VERBATIM: this.winverbatim,


                PROJECT_WON: this.wonnumber,
                Next_Step_Notes: this.nextstepfrompreviousreview,
                WON_FTE: this.wonfte,
                ANTICIPATED_ACTUAL_STDT: this.stractualstartdate,
                CURRENT_FISCAL_REVENUE: this.revenue,
                Contract_Closure_Date: this.strcontractclosuredate,

                REVENUE_MONTHS: this.currentfiscal,
                WON_FINAL_TCV: this.wonfinaltcv,
                Category_RAG: this.categoryrag,

                Offerings: this.showOfferings,
                ModernisedOffering: this.modernisedOffering,
                CognitiveSolutions: this.cognitiveSolutions,
                OpportunityDescDetails: this.opportunityDescDetails,
                OfferingType: this.OfferingTypeID,
                CofID: this.CoreOfferingsNameID,
                DigitalFlagging: this.showDF,
                IgnioTMScope: this.showIS,
                IgnioTMScopeDetails: this.ignioTMScope,
                PROPOSAL_SUBMISSION_DATE: this.proposalSubmissionDt,
                SALES_STAGE_MOVED_ONDATE: this.salesStageMovedOnDt,
                DELIVERY_LOCATION_PROPOSED: this.deliveryLocationID,
                Cboi_Offering_id:this.cboiofferingvalue,
                Deal_Flag_id:this.dealflagvalue
            };



        this.stage9Service.SaveStage9Opportunity(objNewOpportunity)
            .subscribe(result => {

                if (result == 1) {
                    this.successMessage = ValidationMessage.DATASUCCESSFULLYADDEDSAVEANDNEXT;
                    this.lblError0 = ValidationMessage.SUCCESS;
                    this.disableAllFields = true;
                    this.disableStage = "true";
                }
                else {
                    this.successMessage = ValidationMessage.SOMEISSUEINSAVINGRECORDS;
                    this.lblError0 = ValidationMessage.DANGER;
                }

            },

            error => { throw error; },
        )
    }



    public ValidateAdditionalInformation(): any {
        this.count = 0;
        let Varnextstepduedt;
        let strError = "";
        this.validationMessage = "";


        if (this.dealReason1 == 0 || isNullOrUndefined(this.dealReason1)) {
            this.strError += ValidationMessage.WIN_REASON1;
            this.bFLag = false;
        }
        if (this.dealReason2 == 0 || isNullOrUndefined(this.dealReason2)) {
            this.strError += ValidationMessage.WIN_REASON2;
            this.bFLag = false;
        }
        if (this.dealReason3 == 0 || isNullOrUndefined(this.dealReason3)) {
            this.strError += ValidationMessage.WIN_REASON3;
            this.bFLag = false;
        }


        if (this.winningTheme == "" || isNullOrUndefined(this.winningTheme)) {
            this.strError += ValidationMessage.SelectTheWinningTheme;
            this.bFLag = false;
        }
        if (this.txtKeyCustExp == "" || isNullOrUndefined(this.txtKeyCustExp)) {
            this.strError += ValidationMessage.SELECTTHEKEYCUSTOMEREXPECTATION;
            this.bFLag = false;
            }

        if (this.ShowPlatform == 'Yes') {

            if (this.ddlplatformMultiselect.length <= 0) {
                this.strError += ValidationMessage.SELECTPLATFORMOPTION
                this.bFLag = false;

            }

        }

        if(this.ShowPlatform==null){
            this.strError += ValidationMessage.SELECTPLATFORM
            this.bFLag = false;
        }

        
        if (this.ddlplatform == "" || isNullOrUndefined(this.ddlplatform)) {
            this.ddlplatform = 0;
        }

        if (this.dealqualifiedtxt == "" || isNullOrUndefined(this.dealqualifiedtxt)) {
            this.dealqualifiedtxt = 0;
        }
        if (this.showMultiTower == null) {

            strError += ValidationMessage.SELECTTHEMULTITOWERDEAL;
            this.bFLag = false;

        }
        if (this.userUnit == "2" || this.userUnit == "3") {

            if (this.showMultiTower == 'No') {

                strError += ValidationMessage.SELECTTHEMULTITOWERDEAL;
                this.bFLag = false;

            }
        }
        if (this.userUnit == "2" && this.showMultiTower == 'Yes') {
            if (this.serviceDataList.length > 0) {
                if (this.serviceDataList[0].Id == '0' || this.serviceDataList[0].Id == 0) {
                    this.strError += ValidationMessage.SERVICE_MULTITOWERGRID;
                    this.bFLag = false;
                }
            }
        }


        return this.bFLag;
    }



    public SaveAdditionalInformation() {
        let objNewOpportunity: any =
            {
                CURRENCY_ID: this.currency,
                FTEOff: this.FTEOffshore,
                FTEOn: this.FTEOnsite,
                RFI_REVIEW_DT: this.strRFIReviewDate,
                RFP_REVIEW_DT: this.strRFPReviewDate,
                RFI_REVIEW_BY: this.RFIReviewReqd,
                RFP_REVIEW_BY: this.RFPReviewReqd,
                RFIReceivedDate: this.strRFIReceivedDate,
                RFIProbableSubmissionDate: this.strProbableRFISubDate,
                RFIActualSubmissionDate: this.strActualRFISubDate,
                RFPReceivedDate: this.strRFPReceivedDate,
                RFPProbableSubmissionDate: this.strProbableRFPSubDate,
                RFPActualSubmissionDate: this.strActualRFPSubDate,
                BCP_DRP_LOCATION: this.BCPorDRPLocation,
                OpportunityId: this.opportunityId,
                OPPORTUNITY_DESC: this.opportunityDescription,
                OLD_OPPORTUNITY_DESC: this.oldOpportunityDescription,
                GEOGRAPHY_ID: this.GeographyComponent.geography,
                CUST_ID: this.strCustomerID,
                CUST_TYPE_ID: this.strCustTypeID,
                INDUSTRY_PRACTICE_ID: this.industryPracticeid,
                StageID: this.StageId,
                GeosalesOwner: this.GeographySalesOwner.geographySalesOwner,
                OffPracOwner: "0",
                RDCrd: '0',
                OffShoreBDLead: this.OffshorePresalesLeadVertical.OffShoreverti,
                OnsiteOwner: this.OffshorePresalesLeadHorizontal.OffShoreHorz,
                PROBABILITY_OF_WIN: this.probabilityofwin,
                ContractLength: this.dealTerm,
                FTE: this.potentialFTE,
                REMARK: '0',
                OppDate: this.oppReceivedDate,
                EmpNo: this.userId,
                ClosureDate: this.closureDate,
                ADVISORY_ID: '0',
                PLATFORM: this.ShowPlatform,
                PRICING_TYPE_ID: this.pricingtypeid,
                NextStep: this.nextstep,
                BUSINESS_ID: this.DdlVertical.vertical,
                PRODUCT_ID: '0',
                COMPETENCY_ID: '0',
                SUB_COMPETENCY_ID: '0',
                AnnualSaleValue: '0',
                AccountSalesOwner: this.AccountSalesOwner.accountSalesOwner,
                ExeSponser: this.ExecutiveSponsor.executivesponsor,
                ProactiveProposal: this.shoWProactiveProposal,
                ValBPSCon: '0',
                IsuMain: this.isu,
                PlatformNew: this.ddlplatform,
                StatusUpdate: this.statusupdate,
                Category_Id: this.categoryid,
                CountryId: this.DdlCountry.country,
                NextStepDueDt: this.varnextstepduedt,
                UnitId: this.userUnit,
                ISU_OWNER_ID: this.isuOwnerId,
                ISU_CD: this.DdlIOU.iou,
                TataGroupAccount: this.showTGA,
                TPA: this.showTPA,
                TPA_Name: this.TPAName,
                PIBS: this.shoWPibs,
                TCSInvestment: '0',
                PIBStartDate: '0',
                PIBSEndDate: '0',
                FTEsEngaged: '0',
                PIBStatus: '0',
                PIBS_OUTCOME_ID: '0',
                PIBStatusRemarks: '0',
                FTE_TYPE: '0',
                FTE_TYPE_COUNT: '0',
                BPODomain: '0',
                DOMAIN_PRESALES_LEAD: '0',
                DealCategory: this.dealCategoryId,
                BPSSubSPID: '0',
                BPSOfferingID: this.bpsoffering,
                DealCoachName: '0',
                DemandType: '0',
                KEY_DEAL: '0',
                ProposedSolution: '0',
                KeyRmk: '0',
                WinningTheme: this.winningTheme,
                KeyCustExp: this.txtKeyCustExp,
                operatingModel: '0',
                PRICING_MODEL: '0',
                Differentiators: '0',
                Risks: '0',
                KeyCustomerConnects: '0',
                BPOOfferingDescription: '0',
                FIRST_TIME_OUTSOURCE: '0',
                INCUMBENTS: '0',
                NAME_OF_INCUMBENTS: '0',
                TCS_OFFERING_CAPABILITY: '0',
                SpecifyOffering: '0',
                CoachAvailable: '0',
                FnA: this.YFAO,
                FnA_FTE: this.FAOFTE,
                HRO: this.YHRO,
                HRO_FTE: this.HROFTE,
                SCM: this.YSCM,
                SCM_FTE: this.SCMFTE,
                KPO: '0',
                KPO_FTE: '0',
                LPO: this.YLPO,
                LPO_FTE: this.LPOFTV,
                VERTICAL: this.YVertical,
                VerticalFTE: this.VerticalFTA,
                Voice: this.YCEM,
                VoiceFTE: this.CEMFTA,
                BPM: this.YBPM,
                BPM_FTE: this.BPMFTA,
                SolTM: this.NoofTeamMember,
                DelTM: this.deliveryTeamMember,
                BID_MANAGER: this.bidOwnertxt2,
                BID_EXEC_OWNER: this.bidManagertxt2,
                PRICING_OWNER: this.pricingOwnertxt2,
                TransitionTeam: '0',
                ExpectedDate: this.strExpectedStartDate,
                TransitionReq: this.transitionReqd,
                Quarter: this.expectedRevenueQtr,
                FiscalYear: this.expectedRevenueFY,
                OPP_NGM: '0',
                CRM_REASON: '0',
                BID_EXECUTIVE_EMPID: this.bidManagertxt1,
                Disqual: this.dealqualifiedtxt,
                AddDeal: this.showDealqualified,
                BID_EXECUTIVE_NAME: this.bidManagertxt2,
                DealOwner: this.DdlDealOwner1.dealOwner1,
                DealOwner2: this.DdlDealOwner2.dealOwner2,
                ImmediateComment: '0',
                FTEDD: this.FTERequiredForDD,
                SolutionLeader: this.solutionLeadertxt2,
                RUR: this.resourcingRequired,
                RTComments: '0',
                SeatRequirements: '0',
                CRM_ID: this.cRMid,
                TCV: this.strTotalContractValue,
                ValueBPS: '0',
                ValueBPSTCV: '0',
                OPP_TYPE: this.opportunityTrackedBy,
                MultiTower: this.showMultiTower,
                StatusFlag: '0',
                FnA_Lead: this.FAOSolutionLeader,
                HRO_Lead: this.HROSolutionLeader,
                SCM_Lead: this.SCMSolutionLeader,
                KPO_Lead: '0',
                LPO_Lead: this.LPOSolutionLeader,
                VERTICAL_LEAD: this.verticalSolutionLeader,
                Voice_Lead: this.CEMSolutionLeader,
                BPM_LEAD: this.BPMSolutionLeader,
                BID_MANAGER_EMPID: this.bidOwnertxt1,
                BID_EXEC_OWNER_EMPID: this.bidManagertxt1,
                PRICING_OWNER_EMPID: this.pricingOwnertxt1,
                SolutionLeaderId: this.solutionLeadertxt1,
                FnATCV: this.FAOTCV,
                HROTCV: this.HROTCV,
                SCMTCV: this.SCMTCV,
                KPOTCV: '0',
                LPOTCV: this.LPOTCV,
                VERTICALTCV: this.VerticalTCV,
                VOICETCV: this.CEMTCV,
                BPMTCV: this.BPMTCV,
                PibsSaleValue: '0',
                ClusterId: '0',
                ServiceId: this.DdlService.service,
                SUBIOU: this.SubIouComp.subiou,
                TransitionEmpId: this.transitionManagertxt1,
                TransitionName: this.transitionManagertxt2,
                TransitionType: this.transitionType,
                TransitionApproach: this.transitionApproach,
                TransitionModel: this.transitionModel,
                Proposalfactory: this.showPleaseratetheproposal,
                ProposalfactoryOptions: this.pleaseratetheproposal,
                ProposalComments: this.proposalComments,
                DTValue: this.getDigitalTransformation.getDigital,
                Other_DT: this.otherDigitalTransformationValue,
                CRM_TCV: this.strCRMTCV,
                CRM_STAGE: this.cRMStage,
                ItisScope: this.itIsScope,
                IsContractRenewal: this.contractRenewal,
                ContractRenewalValue: this.ContractRenewalValue,
                strDigitalTcv: this.strDigitalTcv,

                RESOURCING_ID: this.resourcingId,
                SEAT_IDENTIFICATION_ID: this.identificationId,

                TRAINING_DURATION: this.durationofTraining,
                ONSITE_TRAINING_NOS: this.onsiteTraining,
                SelectionDate: this.strSelectionDate,
                ContractCloserDate: this.strcontractCloserdate,
                DealStatus: this.DealstatusID,
                ServicePractice: this.ServicePracticeID,
                CoreOffering: this.CoreOfferingID,
                ShortListDate: this.strShortlistDate,
                DEAL_REASON1: this.dealReason1,
                DEAL_REASON2: this.dealReason2,
                DEAL_REASON3: this.dealReason3,
                Offerings: this.showOfferings,
                ModernisedOffering: this.modernisedOffering,
                CognitiveSolutions: this.cognitiveSolutions,
                OpportunityDescDetails: this.opportunityDescDetails,
                OfferingType: this.OfferingTypeID,
                CofID: this.CoreOfferingsNameID,
                DigitalFlagging: this.showDF,
                IgnioTMScope: this.showIS,
                IgnioTMScopeDetails: this.ignioTMScope,
                PROPOSAL_SUBMISSION_DATE: this.proposalSubmissionDt,
                SALES_STAGE_MOVED_ONDATE: this.salesStageMovedOnDt,
                DELIVERY_LOCATION_PROPOSED: this.deliveryLocationID,
                Cboi_Offering_id:this.cboiofferingvalue,
                Deal_Flag_id:this.dealflagvalue
            };



        this.stage9Service.SaveStage9Opportunity(objNewOpportunity)
            .subscribe(result => {

                if (result == 1) {
                    this.successMessage = ValidationMessage.DATASUCCESSFULLYADDEDSAVEANDNEXT;
                    this.lblError0 = ValidationMessage.SUCCESS;
                    this.disableAllFields = true;
                    this.disableStage = "true";
                }
                else {
                    this.successMessage = ValidationMessage.SOMEISSUEINSAVINGRECORDS;
                    this.lblError0 = ValidationMessage.DANGER;
                }

            },

            error => { throw error; },
        )
    }


    public SaveAll(check: any) {
        let objNewOpportunity: any =
            {
                CURRENCY_ID: this.currency,
                FTEOff: this.FTEOffshore,
                FTEOn: this.FTEOnsite,
                RFI_REVIEW_DT: this.strRFIReviewDate,
                RFP_REVIEW_DT: this.strRFPReviewDate,
                RFI_REVIEW_BY: this.RFIReviewReqd,
                RFP_REVIEW_BY: this.RFPReviewReqd,
                RFIReceivedDate: this.strRFIReceivedDate,
                RFIProbableSubmissionDate: this.strProbableRFISubDate,
                RFIActualSubmissionDate: this.strActualRFISubDate,
                RFPReceivedDate: this.strRFPReceivedDate,
                RFPProbableSubmissionDate: this.strProbableRFPSubDate,
                RFPActualSubmissionDate: this.strActualRFPSubDate,
                BCP_DRP_LOCATION: this.BCPorDRPLocation,
                OpportunityId: this.opportunityId,
                OPPORTUNITY_DESC: this.opportunityDescription,
                OLD_OPPORTUNITY_DESC: this.oldOpportunityDescription,
                GEOGRAPHY_ID: this.GeographyComponent.geography,
                CUST_ID: this.strCustomerID,
                CUST_TYPE_ID: this.strCustTypeID,
                INDUSTRY_PRACTICE_ID: this.industryPracticeid,
                StageID: this.StageId,
                GeosalesOwner: this.GeographySalesOwner.geographySalesOwner,
                OffPracOwner: "0",
                RDCrd: '0',
                OffShoreBDLead: this.OffshorePresalesLeadVertical.OffShoreverti,
                OnsiteOwner: this.OffshorePresalesLeadHorizontal.OffShoreHorz,
                PROBABILITY_OF_WIN: this.probabilityofwin,
                ContractLength: this.dealTerm,
                FTE: this.potentialFTE,
                REMARK: '0',
                OppDate: this.oppReceivedDate,
                EmpNo: this.userId,
                ClosureDate: this.closureDate,
                ADVISORY_ID: '0',
                PLATFORM: this.ShowPlatform,
                PRICING_TYPE_ID: this.pricingtypeid,
                NextStep: this.nextstep,
                BUSINESS_ID: this.DdlVertical.vertical,
                PRODUCT_ID: '0',
                COMPETENCY_ID: '0',
                SUB_COMPETENCY_ID: '0',
                AnnualSaleValue: '0',
                AccountSalesOwner: this.AccountSalesOwner.accountSalesOwner,
                ExeSponser: this.ExecutiveSponsor.executivesponsor,
                ProactiveProposal: this.shoWProactiveProposal,
                ValBPSCon: '0',
                IsuMain: this.isu,
                PlatformNew: this.ddlplatform,
                StatusUpdate: this.statusupdate,
                Category_Id: this.categoryid,
                CountryId: this.DdlCountry.country,
                NextStepDueDt: this.varnextstepduedt,
                UnitId: this.userUnit,
                ISU_OWNER_ID: this.isuOwnerId,
                ISU_CD: this.DdlIOU.iou,
                TataGroupAccount: this.showTGA,
                TPA: this.showTPA,
                TPA_Name: this.TPAName,
                PIBS: this.shoWPibs,
                TCSInvestment: '0',
                PIBStartDate: '0',
                PIBSEndDate: '0',
                FTEsEngaged: '0',
                PIBStatus: '0',
                PIBS_OUTCOME_ID: '0',
                PIBStatusRemarks: '0',
                FTE_TYPE: '0',
                FTE_TYPE_COUNT: '0',
                BPODomain: '0',
                DOMAIN_PRESALES_LEAD: '0',
                DealCategory: this.dealCategoryId,
                BPSSubSPID: '0',
                BPSOfferingID: this.bpsoffering,
                DealCoachName: '0',
                DemandType: '0',
                KEY_DEAL: '0',
                ProposedSolution: '0',
                KeyRmk: '0',
                WinningTheme: this.winningTheme,
                KeyCustExp: this.txtKeyCustExp,
                operatingModel: '0',
                PRICING_MODEL: '0',
                Differentiators: '0',
                Risks: '0',
                KeyCustomerConnects: '0',
                BPOOfferingDescription: '0',
                FIRST_TIME_OUTSOURCE: '0',
                INCUMBENTS: '0',
                NAME_OF_INCUMBENTS: '0',
                TCS_OFFERING_CAPABILITY: '0',
                SpecifyOffering: '0',
                CoachAvailable: '0',
                FnA: this.YFAO,
                FnA_FTE: this.FAOFTE,
                HRO: this.YHRO,
                HRO_FTE: this.HROFTE,
                SCM: this.YSCM,
                SCM_FTE: this.SCMFTE,
                KPO: '0',
                KPO_FTE: '0',
                LPO: this.YLPO,
                LPO_FTE: this.LPOFTV,
                VERTICAL: this.YVertical,
                VerticalFTE: this.VerticalFTA,
                Voice: this.YCEM,
                VoiceFTE: this.CEMFTA,
                BPM: this.YBPM,
                BPM_FTE: this.BPMFTA,
                SolTM: this.NoofTeamMember,
                DelTM: this.deliveryTeamMember,
                BID_MANAGER: this.bidOwnertxt2,
                BID_EXEC_OWNER: this.bidManagertxt2,
                PRICING_OWNER: this.pricingOwnertxt2,
                TransitionTeam: '0',
                ExpectedDate: this.strExpectedStartDate,
                TransitionReq: this.transitionReqd,
                Quarter: this.expectedRevenueQtr,
                FiscalYear: this.expectedRevenueFY,
                OPP_NGM: '0',
                CRM_REASON: '0',
                BID_EXECUTIVE_EMPID: this.bidManagertxt1,
                Disqual: this.dealqualifiedtxt,
                AddDeal: this.showDealqualified,
                BID_EXECUTIVE_NAME: this.bidManagertxt2,
                DealOwner: this.DdlDealOwner1.dealOwner1,
                DealOwner2: this.DdlDealOwner2.dealOwner2,
                ImmediateComment: '0',
                FTEDD: this.FTERequiredForDD,
                SolutionLeader: this.solutionLeadertxt2,
                RUR: this.resourcingRequired,
                RTComments: '0',
                SeatRequirements: '0',
                CRM_ID: this.cRMid,
                TCV: this.strTotalContractValue,
                ValueBPS: '0',
                ValueBPSTCV: '0',
                OPP_TYPE: this.opportunityTrackedBy,
                MultiTower: this.showMultiTower,
                StatusFlag: '0',
                FnA_Lead: this.FAOSolutionLeader,
                HRO_Lead: this.HROSolutionLeader,
                SCM_Lead: this.SCMSolutionLeader,
                KPO_Lead: '0',
                LPO_Lead: this.LPOSolutionLeader,
                VERTICAL_LEAD: this.verticalSolutionLeader,
                Voice_Lead: this.CEMSolutionLeader,
                BPM_LEAD: this.BPMSolutionLeader,
                BID_MANAGER_EMPID: this.bidOwnertxt1,
                BID_EXEC_OWNER_EMPID: this.bidManagertxt1,
                PRICING_OWNER_EMPID: this.pricingOwnertxt1,
                SolutionLeaderId: this.solutionLeadertxt1,
                FnATCV: this.FAOTCV,
                HROTCV: this.HROTCV,
                SCMTCV: this.SCMTCV,
                KPOTCV: '0',
                LPOTCV: this.LPOTCV,
                VERTICALTCV: this.VerticalTCV,
                VOICETCV: this.CEMTCV,
                BPMTCV: this.BPMTCV,
                PibsSaleValue: '0',
                ClusterId: '0',
                ServiceId: this.DdlService.service,
                SUBIOU: this.SubIouComp.subiou,
                TransitionEmpId: this.transitionManagertxt1,
                TransitionName: this.transitionManagertxt2,
                TransitionType: this.transitionType,
                TransitionApproach: this.transitionApproach,
                TransitionModel: this.transitionModel,
                Proposalfactory: this.showPleaseratetheproposal,
                ProposalfactoryOptions: this.pleaseratetheproposal,
                ProposalComments: this.proposalComments,
                DTValue: this.getDigitalTransformation.getDigital,
                Other_DT: this.otherDigitalTransformationValue,
                CRM_TCV: this.strCRMTCV,
                CRM_STAGE: this.cRMStage,
                ItisScope: this.itIsScope,
                IsContractRenewal: this.contractRenewal,
                ContractRenewalValue: this.ContractRenewalValue,
                strDigitalTcv: this.strDigitalTcv,
                //changess
                RESOURCING_ID: this.resourcingId,
                SEAT_IDENTIFICATION_ID: this.identificationId,

                TRAINING_DURATION: this.durationofTraining,
                ONSITE_TRAINING_NOS: this.onsiteTraining,
                SelectionDate: this.strSelectionDate,
                ContractCloserDate: this.strcontractCloserdate,
                DealStatus: this.DealstatusID,
                ServicePractice: this.ServicePracticeID,
                CoreOffering: this.CoreOfferingID,
                ShortListDate: this.strShortlistDate,

                WIN_DT: this.strWinDate,
                WIN_VERBATIM: this.winverbatim,


                PROJECT_WON: this.wonnumber,
                Next_Step_Notes: this.nextstepfrompreviousreview,
                WON_FTE: this.wonfte,
                ANTICIPATED_ACTUAL_STDT: this.stractualstartdate,
                REVENUE_MONTHS: this.currentfiscal,
                Contract_Closure_Date: this.strcontractclosuredate,


                WON_FINAL_TCV: this.wonfinaltcv,
                Category_RAG: this.categoryrag,
                DEAL_REASON1: this.dealReason1,
                DEAL_REASON2: this.dealReason2,
                DEAL_REASON3: this.dealReason3,
                CRM_Beacon: this.strcRMBeacon,
                ActualCloseDate: this.actualclosedate,
                DealClosureReason: this.dealClosureReason,
                Offerings: this.showOfferings,
                ModernisedOffering: this.modernisedOffering,
                CognitiveSolutions: this.cognitiveSolutions,
                OpportunityDescDetails: this.opportunityDescDetails,
                OfferingType: this.OfferingTypeID,
                CofID: this.CoreOfferingsNameID,
                DigitalFlagging: this.showDF,
                IgnioTMScope: this.showIS,
                IgnioTMScopeDetails: this.ignioTMScope,
                PROPOSAL_SUBMISSION_DATE: this.proposalSubmissionDt,
                SALES_STAGE_MOVED_ONDATE: this.salesStageMovedOnDt,
                DELIVERY_LOCATION_PROPOSED: this.deliveryLocationID,
                Cboi_Offering_id:this.cboiofferingvalue,
                Deal_Flag_id:this.dealflagvalue
            };



        this.stage9Service.SaveStage9Opportunity(objNewOpportunity)
            .subscribe(result => {

                if (result == 1) {
                    this.successMessage = ValidationMessage.DATASUCCESSFULLYADDED;
                    this.lblError0 = ValidationMessage.SUCCESS;
                    this.disableAllFields = true;
                    this.disableStage = "true";
                    if (this.userUnit == "2") {
                    this.SendMailBFS();
                    }
                    else {
                        this.strOppDesc = this.opportunityDescription;
                        this.strCustomerName = null;
                        for (let i = 0; i < this.customerNameList.length; i++) {
                            if (this.customerNameList[i].CustomerId == this.customer) {
                                this.strCustomerName = this.customerNameList[i].CustomerName;
                            }
                        }
                        this.strEventType = "New_Opp_Created";
                        this.strTemplateType = "BD_SPOC_BFS";
                        this.strDealstage = this.StageId.toString();
                        this.intApplicationId = 1;
                        this.strEmpName = null;
                        this.strEmpEmail = null;

                        this.onHoldService.GetEmpDetailsMail(this.userId)
                            .subscribe(resultArray => {
                                if (resultArray.length > 0) {
                                    this.strEmpName = resultArray[0].FullName;
                                    this.strEmpEmail = resultArray[0].EmpEmail;
                                    let obj: any = {
                                        strEventType: this.strEventType,
                                        strTemplateType: this.strTemplateType,
                                        intApplicationId: this.intApplicationId,
                                        strSendMailEmpID: this.userId,
                                        strSendMailName: this.strEmpName,
                                        strSendMailEmail: this.strEmpEmail,
                                        strUserLoginFullName: this.strUserLoginFullName,
                                        strOppId: this.opportunityId,
                                        strOppDesc: this.strOppDesc,
                                        strCustomerName: this.strCustomerName,
                                        strDealstage: this.strDealstage,
                                        strUserLoginEmpNo: this.userId,
                                        strTCVMail: "",
                                        strStatusUpdateMail: "",
                                        strExpectedClosuredateMail: ""
                                    }

                                    this.createNewOpportunityService.NewOppEmailAlertDomain(obj)
                                        .subscribe(ObjNewOpportunity => {

                                        },
                                        error => { throw error; },
                                    )
                                }

                            },
                            error => { throw error; },
                        )
                    }
                    this.GotoThePreSale();
                    this.disableAllFields = true;
                    this.disableStage = "true";
                    if (check == 1) {
                        this.GotoTheStage();
                    }
                }
                else {
                    this.successMessage = ValidationMessage.SOMEISSUEINSAVINGRECORDS;
                    this.lblError0 = ValidationMessage.DANGER;
                }

            },

            error => { throw error; },
        )
    }


    public Submit(SaveAll: any, item: any, checkSubmit: any): any {
        let bFLag = true;

        this.strError = "";



        this.tabIndex = "0";

        this.count = 0;

        this.lblError0 = "";

        let checkfiscal: number;

        this.createNewOpportunityService.GetJobStatus().subscribe(

            resultArray => {

                this.newOpportunityList = resultArray

                this.checkStatus = this.newOpportunityList[0].Job_Status;

                if (this.checkStatus.trim() == "Y") {

                    this.successMessage = ValidationMessage.BATCHUPDATE;

                    this.lblError0 = ValidationMessage.DANGER;

                    return false;

                }



                else {


                    if (SaveAll == "5") {



                        if (this.ValidatePrimaryInfromation() != true && this.strError != "") {

                            this.successMessage = "";

                            this.successMessage = this.strError;

                            this.lblError0 = ValidationMessage.DANGER;
                            window.scrollTo(0, 0);
                            return false;



                        }



                        if (this.ValidateGeneralInformation() != true && this.strError != "") {

                            this.successMessage = "";

                            this.successMessage = this.strError;

                            this.lblError0 = ValidationMessage.DANGER;
                            window.scrollTo(0, 0);
                            return false;

                        }



                        if (this.ValidateAdditionalInformation() != true && this.strError != "") {



                            this.successMessage = "";

                            this.successMessage = this.strError;

                            this.lblError0 = ValidationMessage.DANGER;
                            window.scrollTo(0, 0);


                            return false;

                        }



                        if (this.ValidateCompetitors() == false && this.strError != "") {

                            this.successMessage = "";

                            this.successMessage = this.strError;

                            this.lblError0 = ValidationMessage.DANGER;
                            window.scrollTo(0, 0);
                            return false;



                        }
                        if (this.userUnit == "1") {
                            if (this.ValidateBpsOffering() == false && this.strError != "") {

                            this.successMessage = "";

                            this.successMessage = this.strError;

                            this.lblError0 = ValidationMessage.DANGER;
                            window.scrollTo(0, 0);
                            return false;
                            }



                        }



                        if (this.CheckFTEAddlnVerticalSave() == false && this.strError != "") {

                            this.successMessage = "";

                            this.successMessage = this.strError;

                            this.lblError0 = ValidationMessage.DANGER;
                            window.scrollTo(0, 0);
                            return false;

                        }

                        if (this.CheckTCVAdditional() == false && this.strError != "") {

                            this.successMessage = "";

                            this.successMessage = this.strError;

                            this.lblError0 = ValidationMessage.DANGER;
                            window.scrollTo(0, 0);
                            return false;

                        }
                        if (this.showMultiTower == 'Yes' || this.userUnit == "1") {
                        if (this.CheckLessThanFTEAddlnVerticalSave() == false && this.strError != "") {

                            this.successMessage = "";

                            this.successMessage = this.strError;

                            this.lblError0 = ValidationMessage.DANGER;
                            window.scrollTo(0, 0);
                            return false;

                        }



                        if (this.CheckLessThanTCVAdditional() == false && this.strError != "") {

                                this.successMessage = "";

                                this.successMessage = this.strError;

                                this.lblError0 = ValidationMessage.DANGER;
                                window.scrollTo(0, 0);
                                return false;

                            }
                        }


                            if (this.strError == "") {
                            this.SaveOppCompetitors();
                            this.Upd_WinReason();
                            this.SaveOppPlatform();
                            if (this.userUnit == "1") {
                               
                                this.SaveOppBpsOffering();
                            }

                            if (checkSubmit == 1) {
                                this.nextstageName = item.STAGE_NAME;
                                this.nextStageId = item.StageID;
                                this.Save_Next_Step_History();
                                this.Save_Status_Update_History();
                                this.SaveAll(1);
                            }
                            else {
                                this.Save_Next_Step_History();
                                this.Save_Status_Update_History();
                                this.SaveAll(0);
                                if (this.userUnit == "1") {
                                this.stepper.selectedIndex = 2;
                                }
                                else {
                                this.stepper.selectedIndex = 3;
                                }
                            }
                        }

                    }

                }





            },

        )



    }




    public CheckSaveAndContinue(TabIndex: any, stepper: MatStepper) {
        this.strError = "";
        this.bFLag = true;
        this.lblError0 = "";

        if (TabIndex == "1" && this.strError == "") {
            if (this.ValidatePrimaryInfromation() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;

            }

            if (this.strError == "") {
                this.GetQtrFY();
                if (this.userUnit == "1") {
         
                this.SaveOppBpsOffering();
                }
                this.SavePrimaryInformation();
                this.stepper.selectedIndex = 1;
                stepper.next();
            }

        }
        if (TabIndex == "2" && this.strError == "") {

            if (this.ValidatePrimaryInfromation() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;

            }

            if (this.ValidateGeneralInformation() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;

            }
            if (this.strError == "") {
                if (this.userUnit == "1") {
            
                this.SaveOppBpsOffering();
                }
                this.SavePrimaryInformation();
                this.SaveGeneralInformation(); 
                this.SaveOppPricingType();
                this.Save_Next_Step_History();
                this.Save_Status_Update_History();
                this.stepper.selectedIndex = 2;
                stepper.next();
            }


        }

        if (TabIndex == "3" && this.strError == "") {
            if (this.ValidatePrimaryInfromation() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;

            }


            if (this.ValidateGeneralInformation() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;

            }


            if (this.ValidateAdditionalInformation() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;

            }
            if (this.ValidateCompetitors() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;

            }

            if (this.CheckFTEAddlnVerticalSave() != true && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;
            }
            if (this.CheckTCVAdditional() != true && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;
            }
            if (this.showMultiTower == 'Yes' || this.userUnit == "1") {
            if (this.CheckLessThanFTEAddlnVerticalSave() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;
            }

            if (this.CheckLessThanTCVAdditional() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;
            }
        }
            if (this.strError == "") {
                if (this.userUnit == "1") {
            
                this.SaveOppBpsOffering();
                }
                this.SavePrimaryInformation();
                this.SaveGeneralInformation(); 
                this.SaveOppPricingType();
                this.SaveOppCompetitors();
               
                this.SaveAdditionalInformation();
                this.SaveOppPlatform();
                this.stepper.selectedIndex = 3;

            }


        }

        if (TabIndex == "4" && this.strError == "") {
            if (this.ValidatePrimaryInfromation() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;

            }

            if (this.ValidateGeneralInformation() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;

            }


            if (this.ValidateAdditionalInformation() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;

            }
            if (this.ValidateCompetitors() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;

            }

            if (this.CheckFTEAddlnVerticalSave() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;
            }
            if (this.CheckTCVAdditional() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;
            }
            if (this.showMultiTower == 'Yes' || this.userUnit == "1") {
            if (this.CheckLessThanFTEAddlnVerticalSave() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;
            }

            if (this.CheckLessThanTCVAdditional() == false && this.strError != "") {
                this.successMessage = "";
                this.successMessage = this.strError;
                this.lblError0 = ValidationMessage.DANGER;
                window.scrollTo(0, 0);
                return false;
                }
            }


            if (this.strError == "") {
                if (this.userUnit == "1") {
              
                this.SaveOppBpsOffering();
                }
                this.SavePrimaryInformation();
                this.SaveGeneralInformation(); 
                this.SaveOppPricingType();
                
                this.SaveAdditionalInformation();
                this.SaveOppPlatform();
                this.SaveOppCompetitors();
                this.stepper.selectedIndex = 3;
            }




        }


    }
    DealCategoryChange(item) {


        $('#categorynumber').text(item.DealCategoryName.slice(0, 1));
        this.dealCategoryId = item.DealCategoryId;
    }

    DealStageChange(item) {
        this.nextStageId = item.StageID;
        if (item.StageID == 10 || item.StageID == 11 || item.StageID == 12 || item.StageID == 13) {
            this.router.navigate(['OnHold', { strOppId: btoa(String(this.opportunityId)), strStage: btoa(String(this.nextStageId)), strStake: btoa("BD"), strCustName: btoa(unescape(encodeURIComponent(this.txtCustomerName))), strOppDesc: btoa(String(this.opportunityDescription)), strTCV: btoa(this.totalContractValue), strExpectedDate: btoa(this.expectedDealClosure), strDealterm: btoa(this.dealTerm), strEstimatedFTE: btoa(this.potentialFTE), strPrevStage: btoa("0"), strRemark: btoa(String(this.strRemark)) }]);

        }

        else {
            event.preventDefault();
            if (confirm('You are not allowed to go to stage' + ' ' + item.STAGE_NAME + '?')) {
                return false;
            }

        }

    }




    SendMailBFS() {
        this.strEventType = ValidationMessage.EVENTTYPE;
        this.strDealstage = "";
        this.intApplicationId = 1;
        this.strTemplateType = ValidationMessage.TEMPLATETYPE;
        this.strOppId = null;
        this.strOppId = this.opportunityId;
        this.strCustomerName = null;
        if (this.customerNameList.length > 0) {
            for (let i = 0; i < this.customerNameList.length; i++) {
                if (this.customerNameList[i].CustomerId == this.customer) {
                    this.strCustomerName = this.customerNameList[i].CustomerName;
                }
            }
        }
        this.strUserLoginFullName = null;
        this.strDealstage = null;
        if (this.StageId != -1 || isNullOrUndefined(this.StageId)) {
            for (let i = 0; i < this.dealStageList.length; i++) {
                if (this.dealStageList[i].StageID == this.StageId) {
                    this.strDealstage = this.dealStageList[i].STAGE_NAME;
                }
            }
        }

        if (this.totalContractValue == this.lblError0) {
            this.strTCVMail1 = this.totalContractValue + " MMUSD";
        }
        else {
            this.strTCVMail1 = "TCV has been changed from " + this.lblError0 + " MMUSD to " + this.totalContractValue + " MM USD";

        }

        if (this.expectedDealClosure == this.lblError1) {
            this.strExpectedClosuredateMail1 = this.expectedDealClosure;
        }
        else {
            this.strExpectedClosuredateMail1 = "Expected Closure Date has been changed from " + this.lblError1 + " to " + this.expectedDealClosure + "";

        }

        if (this.statusupdate == this.lblError2) {
            this.strStatusUpdateMail1 = ValidationMessage.NOUPDATE;
        }
        else {
            this.strStatusUpdateMail1 = this.statusupdate;

        }
        this.strOppDesc = null;
        this.strOppDesc = this.opportunityDescription;
        this.strSendMailEmpID = null;
        this.strSendMailName = null;
        this.strSendMailEmail = null;
        this.onHoldService.GetEmpDetailsMail(this.userId)
            .subscribe(resultArray => {
                if (resultArray.length > 0) {
                    //Getting User Details from Employee Current
                    this.strUserLoginFullName = resultArray[0].FullName;
                    this.createNewOpportunityService.GetEmpStatus(this.strOppId)
                        .subscribe(resultArray => {
                            if (!isNullOrUndefined(resultArray[0])) {
                                for (let i = 0; i < resultArray[0].length; i++) {
                                    if (!isNullOrUndefined(resultArray[0][i].Employee_Id)) {
                                        this.strSendMailEmpID = resultArray[0][i].Employee_Id;
                                    }
                                    if (!isNullOrUndefined(resultArray[0][i].Emp_Name)) {
                                        this.strSendMailName = resultArray[0][i].Emp_Name;
                                    }
                                    if (!isNullOrUndefined(resultArray[0][i].Emp_Email)) {
                                        this.strSendMailEmail = resultArray[0][i].Emp_Email;
                                    }
                                    if (!isNullOrUndefined(this.strSendMailEmail) || this.strSendMailEmail != "") {
                                        let obj: any = {
                                            strEventType: this.strEventType,
                                            strTemplateType: this.strTemplateType,
                                            intApplicationId: this.intApplicationId,
                                            strSendMailEmpID: this.strSendMailEmpID,
                                            strSendMailName: this.strSendMailName,
                                            strSendMailEmail: this.strSendMailEmail,
                                            strUserLoginFullName: this.strUserLoginFullName,
                                            strOppId: this.strOppId,
                                            strOppDesc: this.strOppDesc,
                                            strCustomerName: this.strCustomerName,
                                            strDealstage: this.strDealstage,
                                            strUserLoginEmpNo: this.userId,
                                            strNextStage: this.strStageId,
                                            strTCVMail: this.strTCVMail1,
                                            strStatusUpdateMail: this.strStatusUpdateMail1,
                                            strExpectedClosuredateMail: this.strExpectedClosuredateMail1
                                        }
                                        this.createNewOpportunityService.EmailAlertBFS(obj)
                                            .subscribe(ObjNewOpportunity => {

                                            },
                                            error => { throw error; },
                                        )
                                    }
                                }
                            }
                            //Solution Team Member
                            if (!isNullOrUndefined(resultArray[1])) {
                                for (let i = 0; i < resultArray[1].length; i++) {
                                    if (!isNullOrUndefined(resultArray[1][i].Employee_Id)) {
                                        this.strSendMailEmpID = resultArray[1][i].Employee_Id;
                                    }
                                    if (!isNullOrUndefined(resultArray[1][i].Emp_Name)) {
                                        this.strSendMailName = resultArray[1][i].Emp_Name;
                                    }
                                    if (!isNullOrUndefined(resultArray[1][i].Emp_Email)) {
                                        this.strSendMailEmail = resultArray[1][i].Emp_Email;
                                    }
                                    if (!isNullOrUndefined(this.strSendMailEmail) || this.strSendMailEmail != "") {
                                        let obj: any = {
                                            strEventType: this.strEventType,
                                            strTemplateType: this.strTemplateType,
                                            intApplicationId: this.intApplicationId,
                                            strSendMailEmpID: this.strSendMailEmpID,
                                            strSendMailName: this.strSendMailName,
                                            strSendMailEmail: this.strSendMailEmail,
                                            strUserLoginFullName: this.strUserLoginFullName,
                                            strOppId: this.strOppId,
                                            strOppDesc: this.strOppDesc,
                                            strCustomerName: this.strCustomerName,
                                            strDealstage: this.strDealstage,
                                            strUserLoginEmpNo: this.userId,
                                            strNextStage: this.strStageId,
                                            strTCVMail: this.strTCVMail1,
                                            strStatusUpdateMail: this.strStatusUpdateMail1,
                                            strExpectedClosuredateMail: this.strExpectedClosuredateMail1
                                        }
                                        this.createNewOpportunityService.EmailAlertBFS(obj)
                                            .subscribe(ObjNewOpportunity => {

                                            },
                                            error => { throw error; },
                                        )
                                    }
                                }
                            }


                            // For Delivery Team Member
                            if (!isNullOrUndefined(resultArray[2])) {
                                for (let i = 0; i < resultArray[2].length; i++) {
                                    if (!isNullOrUndefined(resultArray[2][i].Employee_Id)) {
                                        this.strSendMailEmpID = resultArray[2][i].Employee_Id;
                                    }
                                    if (!isNullOrUndefined(resultArray[2][i].Emp_Name)) {
                                        this.strSendMailName = resultArray[2][i].Emp_Name;
                                    }
                                    if (!isNullOrUndefined(resultArray[2][i].Emp_Email)) {
                                        this.strSendMailEmail = resultArray[2][i].Emp_Email;
                                    }
                                    if (!isNullOrUndefined(this.strSendMailEmail) || this.strSendMailEmail != "") {
                                        let obj: any = {
                                            strEventType: this.strEventType,
                                            strTemplateType: this.strTemplateType,
                                            intApplicationId: this.intApplicationId,
                                            strSendMailEmpID: this.strSendMailEmpID,
                                            strSendMailName: this.strSendMailName,
                                            strSendMailEmail: this.strSendMailEmail,
                                            strUserLoginFullName: this.strUserLoginFullName,
                                            strOppId: this.strOppId,
                                            strOppDesc: this.strOppDesc,
                                            strCustomerName: this.strCustomerName,
                                            strDealstage: this.strDealstage,
                                            strUserLoginEmpNo: this.userId,
                                            strNextStage: this.strStageId,
                                            strTCVMail: this.strTCVMail1,
                                            strStatusUpdateMail: this.strStatusUpdateMail1,
                                            strExpectedClosuredateMail: this.strExpectedClosuredateMail1
                                        }
                                        this.createNewOpportunityService.EmailAlertBFS(obj)
                                            .subscribe(ObjNewOpportunity => {

                                            },
                                            error => { throw error; },
                                        )
                                    }
                                }
                            }






                            // For All Opportunity Owners
                            if (!isNullOrUndefined(resultArray[3])) {
                                for (let i = 0; i < resultArray[3].length; i++) {
                                    if (!isNullOrUndefined(resultArray[3][i].Employee_Id)) {
                                        this.strSendMailEmpID = resultArray[3][i].Employee_Id;
                                    }
                                    if (!isNullOrUndefined(resultArray[3][i].Emp_Name)) {
                                        this.strSendMailName = resultArray[3][i].Emp_Name;
                                    }
                                    if (!isNullOrUndefined(resultArray[3][i].Emp_Email)) {
                                        this.strSendMailEmail = resultArray[3][i].Emp_Email;
                                    }
                                    if (!isNullOrUndefined(this.strSendMailEmail) || this.strSendMailEmail != "") {
                                        let obj: any = {
                                            strEventType: this.strEventType,
                                            strTemplateType: this.strTemplateType,
                                            intApplicationId: this.intApplicationId,
                                            strSendMailEmpID: this.strSendMailEmpID,
                                            strSendMailName: this.strSendMailName,
                                            strSendMailEmail: this.strSendMailEmail,
                                            strUserLoginFullName: this.strUserLoginFullName,
                                            strOppId: this.strOppId,
                                            strOppDesc: this.strOppDesc,
                                            strCustomerName: this.strCustomerName,
                                            strDealstage: this.strDealstage,
                                            strUserLoginEmpNo: this.userId,
                                            strNextStage: this.strStageId,
                                            strTCVMail: this.strTCVMail1,
                                            strStatusUpdateMail: this.strStatusUpdateMail1,
                                            strExpectedClosuredateMail: this.strExpectedClosuredateMail1
                                        }
                                        this.createNewOpportunityService.EmailAlertBFS(obj)
                                            .subscribe(ObjNewOpportunity => {

                                            },
                                            error => { throw error; },
                                        )
                                    }
                                }
                            }




                        },
                        error => { throw error; },
                    )
                }
            },
            error => { throw error; },
        )
    }

    GotoThePreSale() {
        if (this.userRole == "Presales") {
            this.router.navigate(['Presales', btoa(String(this.opportunityId)), btoa(String(this.Stage)), btoa(String("BD"))]);
        }

    }

    openAddFiscalOffering() {
        let dialog = this.dialog.open(AddFiscalOfferingComponent,
            {
                data: { strOppId: this.opportunityId, strStageId: this.constant.Stage9ID, strOppOfferingId: "" }
            });
    }
    openAddProjection() {
        let dialog = this.dialog.open(AddQuarterProjectionComponent,
            {
                data: { strOppId: this.opportunityId, strContractValue: this.totalContractValue, strStageId: this.constant.Stage9ID, strExpDt: this.expectedDealClosure }
            });
    }
    ValidateDealOwner() {
        if (this.DdlDealOwner1.dealOwner1 == this.DdlDealOwner2.dealOwner2) {

            this.successMessage = ValidationMessage.DEALOWNER1ANDDEALOWNER2;
            this.lblError0 = ValidationMessage.DANGER;
            return false;
            }
                        else {
                                this.lblError0 = "";
                            }
    }

    AllowNumeric(event) {
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        var regex = new RegExp("[0-9]");
        if (regex.test(key)) {
            return key;
        }
        else {
            event.preventDefault();
            return false;

        }
    }
    AllowAlphaNumeric(event) {
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        var regex = new RegExp("[A-Za-z0-9-]");
        if (regex.test(key)) {
            return key;
        }
        else {
            event.preventDefault();
            return false;
        }
    }
        
    ValidateCompetitors(): any {

        let bFLag = true;
        let strError = "";


        if (this.ddlCompetition.length < 1) {
            this.strError = ValidationMessage.SELECTTHECOMPETITORS
            this.bFLag = false;

        }

        return this.bFLag;
    }

    StageRedirect(item) {
        let checkfiscal: any;
        if (confirm('Are you sure you want to move to stage' + ' ' + item.STAGE_NAME + '?')) {
           
                    this.Submit(5, item, 1);
           

        }
        else {
            event.preventDefault;
            return false;

        }
    }


    GotoTheStage() {
        let intCRMChk: number = 0;
        let intNextStageCRM: number = 0;
        let resultStage: any[] = new Array();
        this.createNewOppurtunityStage0Service.GetOpportunityChkCRM(this.opportunityId).subscribe(data => {

            let Model = <any>{};
            Model =
                {
                    OpportunityId: this.opportunityId,
                    EmpId: this.userId,
                    CurrentStageID: this.StageId,
                    NextStageID: this.nextStageId
                }
            this.presalesService.ProceedNextStage(Model).subscribe(data1 => {
                if (data1 != undefined) {

                    $('#stagenumber').text(this.nextStageId);

                    if (this.nextStageId.StageID < 10) {
                        $('#stagename').text(this.nextstageName.substring(2));

                    }

                    else if (this.nextStageId.StageID >= 10) {
                        $('#stagename').text(this.nextstageName.substring(3));
                    }

                    if (this.nextStageId == 0) {

                        this.router.navigate(['Stage0', { strOppId: btoa(String(this.opportunityId)), strStage: btoa(String(this.nextStageId)), strStake: btoa("BD") }]);
                    }
                    else if (this.nextStageId == 1) {

                        this.router.navigate(['Stage1', { strOppId: btoa(String(this.opportunityId)), strStage: btoa(String(this.nextStageId)), strStake: btoa("BD") }]);
                    }
                    else if (this.nextStageId == 2) {

                        this.router.navigate(['Stage2', { strOppId: btoa(String(this.opportunityId)), strStage: btoa(String(this.nextStageId)), strStake: btoa("BD") }]);
                    }
                    else if (this.nextStageId == 3) {

                        this.router.navigate(['Stage3', { strOppId: btoa(String(this.opportunityId)), strStage: btoa(String(this.nextStageId)), strStake: btoa("BD") }]);
                    }
                    else if (this.nextStageId == 4) {

                        this.router.navigate(['Stage4', { strOppId: btoa(String(this.opportunityId)), strStage: btoa(String(this.nextStageId)), strStake: btoa("BD") }]);
                    }
                    else if (this.nextStageId == 5) {

                        this.router.navigate(['Stage5', { strOppId: btoa(String(this.opportunityId)), strStage: btoa(String(this.nextStageId)), strStake: btoa("BD") }]);
                    }
                    else if (this.nextStageId == 6) {

                        this.router.navigate(['Stage6', { strOppId: btoa(String(this.opportunityId)), strStage: btoa(String(this.nextStageId)), strStake: btoa("BD") }]);
                    }
                    else if (this.nextStageId == 7) {

                        this.router.navigate(['Stage7', { strOppId: btoa(String(this.opportunityId)), strStage: btoa(String(this.nextStageId)), strStake: btoa("BD") }]);
                    }
                    else if (this.nextStageId == 8) {

                        this.router.navigate(['Stage8', { strOppId: btoa(String(this.opportunityId)), strStage: btoa(String(this.nextStageId)), strStake: btoa("BD") }]);
                    }
                    else if (this.nextStageId == 9) {

                        this.router.navigate(['Stage9', { strOppId: btoa(String(this.opportunityId)), strStage: btoa(String(this.nextStageId)), strStake: btoa("BD") }]);
                    }
                    else if (this.nextStageId == 10) {

                        this.router.navigate(['Stage10', { strOppId: btoa(String(this.opportunityId)), strStage: btoa(String(this.nextStageId)), strStake: btoa("BD") }]);
                    }
                    else if (this.nextStageId == 11) {

                        this.router.navigate(['Stage11', { strOppId: btoa(String(this.opportunityId)), strStage: btoa(String(this.nextStageId)), strStake: btoa("BD") }]);
                    }
                    else if (this.nextStageId == 12) {

                        this.router.navigate(['Stage12', { strOppId: btoa(String(this.opportunityId)), strStage: btoa(String(this.nextStageId)), strStake: btoa("BD") }]);
                    }
                    else if (this.nextStageId == 13) {

                        this.router.navigate(['Stage13', { strOppId: btoa(String(this.opportunityId)), strStage: btoa(String(this.nextStageId)), strStake: btoa("BD") }]);
                    }

                }
            })

        })
    }

    CheckContractRenewal(e: number) {
        if (e == 0) {
            this.contractRenewal = "No";
            this.disabledContractRenewal = true;
        }
        else if (e == 1) {
            if (this.userUnit == "2") {
                this.contractRenewal = "Yes";
            }
            this.disabledContractRenewal = false;

        }
    }

    CheckItIsScope(e: number) {
        if (e == 0) {
            this.itIsScope = "No";
            $('#ITISScopeInActive').removeClass('btn-default');
            $('#ITISScopeInActive').addClass('btn-primary active');
            $('#ITISScopeActive').removeClass('btn-primary active');
            $('#ITISScopeActive').addClass('btn-default');
        }
        else if (e == 1) {
            this.itIsScope = "Yes";
            $('#ITISScopeActive').removeClass('btn-default');
            $('#ITISScopeActive').addClass('btn-primary active');
            $('#ITISScopeInActive').removeClass('btn-primary active');
            $('#ITISScopeInActive').addClass('btn-default');
        }
    }
    CheckUserUnitID() {
        if (this.userUnit == "1") {
            this.isCheckUserUnitID = 1;
        }

    }


    GetModernisedOffering() {

        this.stage3Service.GetModernisedOffering().subscribe(

            resultArray => this.modernisedList = resultArray,

            error => { throw error; },

        )
    }
    GetCognitiveSolutions() {

        this.stage3Service.GetCognitiveSolution().subscribe(

            resultArray => this.solutionList = resultArray,

            error => { throw error; },

        )
    }

    public Save_Next_Step_History() {
        if (this.nextstep != "") {
        let ObjNewOpportunity: any =
            {

                OpportunityId: this.opportunityId,
                NextStep: this.nextstep,
                UnitId: this.userUnit,
                StageID: this.StageId,
                UserLogin: this.userId
            };


        this.createNewOppurtunityStage0Service.INS_NEXT_STEP_HISTORY(ObjNewOpportunity)
            .subscribe(ObjNewOpportunity => {


            },

            error => { throw error; },
        )
    }
    }

    Get_Next_Step() {

        this.createNewOppurtunityStage0Service.Get_Next_Step(this.opportunityId, this.constant.Stage9ID).subscribe(

            resultArray => {
            this.NextStepArray = resultArray

                if (this.NextStepArray[0].NextStep != "") {
                    let tempvalue: string = "";

                    for (let i = 0; i < this.NextStepArray.length; i++) {
                       
                        tempvalue = this.NextStepArray[i].NextStep + ' , ' + tempvalue;
                        
                    }
                    this.nextstepHistory = tempvalue;
                }
            })
    }

    GetofferingType() {

        this.createNewOppurtunityStage0Service.GetOfferingType().subscribe(

            resultArray => this.iOfferingType = resultArray,

            error => { throw error; },

        )
    }


    GetDealStatus() {

        this.createNewOppurtunityStage0Service.Get_DealStatus().subscribe(

            resultArray => this.iDealStatus = resultArray,

            error => { throw error; },

        )
    }
    GetServicePractices() {

        this.createNewOppurtunityStage0Service.Get_Service_Practices().subscribe(

            resultArray => this.iServicePractices = resultArray,

            error => { throw error; },

        )
    }

    GetCoreoffering() {

        this.createNewOppurtunityStage0Service.Get_Core_Offerings().subscribe(

            resultArray => this.iICoreoffering = resultArray,

            error => { throw error; },

        )
    }


    GetCoreofferingName() {

        this.createNewOppurtunityStage0Service.Get_Core_Offerings_Name().subscribe(

            resultArray => this.ICoreOfferingName = resultArray,

            error => { throw error; },

        )
    }
    public Save_Status_Update_History() {
        if (this.statusupdate != "") {
        let ObjNewOpportunity: any =
            {

                OpportunityId: this.opportunityId,
                StatusUpdate: this.statusupdate,
                UnitId: this.userUnit,
                StageID: this.StageId,
                UserLogin: this.userId
            };


        this.createNewOppurtunityStage0Service.INS_STATUS_UPDATE_HISTORY(ObjNewOpportunity)
            .subscribe(ObjNewOpportunity => {


            },

            error => { throw error; },
        )
    }
    }

    Get_Status_Update() {

        this.createNewOppurtunityStage0Service.Get_Status_Update(this.opportunityId, this.constant.Stage9ID).subscribe(

            resultArray => {
            this.StatusUpdateArray = resultArray

                if (this.StatusUpdateArray[0].StatusUpdate != "") {
                    let tempvalue: string = "";

                    for (let i = 0; i < this.StatusUpdateArray.length; i++) {

                        tempvalue = this.StatusUpdateArray[i].StatusUpdate + ' , ' + tempvalue;
                    }
                    this.statusUpdateHistory = tempvalue;
                }
            })
    }

    ChangeVerticalInformation() {

        if (this.userUnit == "1") {
            this.verticalgrid = this.vertical;
            this.Get_Level1_Vertical(0, 0);
        }
    }

    CheckSameWinReason(value: any) {

        if (value == 1) {
            if (this.dealReason1 == this.dealReason2 || this.dealReason1 == this.dealReason3) {
                this.dealReason1 = 0;
                this.showMsgWin1 = true;
            }
            else {
                this.showMsgWin1 = false;
            }
        }
        if (value == 2) {
            if (this.dealReason1 == this.dealReason2 || this.dealReason2 == this.dealReason3) {
                this.dealReason2 = 0;
                this.showMsgWin2 = true;
            }
            else {
                this.showMsgWin2 = false;
            }
        }
        else if (value == 3) {
            if (this.dealReason1 == this.dealReason3 || this.dealReason2 == this.dealReason3) {
                this.dealReason3 = 0;
                this.showMsgWin3 = true;
            }
            else {
                this.showMsgWin3 = false;
            }
        }
        
        

    }

    Get_Selected_Platform() {

        this.createNewOppurtunityStage0Service.GetPlatformMultiselect(this.opportunityId).subscribe(respose => {

            this.ddlplatformMultiselect = respose;

        })
    }

    SaveOppPlatform(): any {
        let bFLag = true;
        let strError = "";
        let Model = {};
        var array = [];


        this.createNewOppurtunityStage0Service.Upd_Platform(this.opportunityId).subscribe(response => {

            if (response != undefined || response != 0) {
                
        

                for (var i = 0; i < this.ddlplatformMultiselect.length; i++) {
                    Model = {
                        "Platform_id": this.ddlplatformMultiselect[i].id,
                        "OpportunityId": this.opportunityId,
                        "UserLogin": this.userId,
                        "UnitId": this.userUnit
                    }
            array.push(Model);

        }
    
    
        this.createNewOppurtunityStage0Service.Stage1_Save_OppPlatfrom(array).subscribe(data => {
            if (data != undefined) {

            }

        });
       
    }
})
    
    

    }
    
    ChangeProbabilityWinColor(){
        for(let item of this.winList){
            if(item.Value==this.probabilityofwin)
            {
                let color = item.Color;
                this.porbabilityColor = color;
            }
        }
        if(this.probabilityofwin==0)
        {
            this.porbabilityColor='White';
        }  
    }
    GetCBOIOffering(){

        this.createNewOppurtunityStage0Service.GetCBOIOffering().subscribe(result=>{

            this.cboiofferingdata=result;
        })
    }

    GetDealFlag(){

        this.createNewOppurtunityStage0Service.GetDealFlag().subscribe(result=>{

            this.DealFlag=result;
        })
    }
    
    DisableOfferingType()
    {
        if(this.OfferingTypeID==1 || this.OfferingTypeID==2)
        {
            this.disableTraditionalOffering = true;
            this.CoreOfferingID=0;
            this.disableNewMOdernOffering =false;
        }
        if(this.OfferingTypeID==3)
        {
            this.disableNewMOdernOffering = true;
            this.modernisedOffering=0;
            this.disableTraditionalOffering = false;
        }
    } 

    FormatInputTCV(event:any)
    {
        
        var $this = $( event.target );
        var input=event.target.value;
        var input = input.replace(/[\D\s\._\-]+/g, "");
        input = input ? parseInt( input, 10 ) : 0;
        $this.val( function() {
            return ( input === 0 ) ? "" : input.toLocaleString( "en-US" );
        } );
    }

    NewFomattedInput(input:any){

        var input = input.replace(/[\D\s\._\-]+/g, "");
        input = input ? parseInt( input, 10 ) : 0;
       
        return ( input === 0 ) ? "" : input.toLocaleString( "en-US" );
       

    }
}


.css

/* new opportunity css */



/* stage css */

.stage{
    height: 50px;
    right: 0;
    top: 15px;
    display: inline-block;
}

.stage>div:first-child{
 
     height: 40px;
     width: 40px;
     border-radius: 50%;
     border:1px solid #ccc;
     display: inline-block;
     text-align: center;
     margin-right: 10px;
     float: left;
     

}
.stage>div:first-child p{
    
    font-size: 12px;
    padding: 6px 0px 2px;
    line-height: 1;
   
   }


.stage>div:nth-child(n+2){
    
        height: 40px;
        width: 229px;
        border:1px solid #ccc;
        display: inline-block;
        margin-right: 10px;
        cursor: pointer;
        float: left;
        
   
   }



   .stage>div:nth-child(n+2)>div.stages span:first-child{
    font-size: 32px;
    line-height: 38px;
    margin-left: 10px;
   }  
     
   .stage>div:nth-child(2)>div.stages span:last-child{
    font-size: 11px;
    line-height: 20px;
    margin-left: 6px;
    margin-top: 17px;
    display: inline-block;
   }  

   .stage>div:nth-child(n+2)>span:first-child{
    font-size: 12px;
    line-height: 15px;
    position: absolute;
    text-align: center;
    top: 4px;
    left: 42px;
    opacity: .8;
   }  

   .stage>div:nth-child(n+2)>span:nth-child(2){
    position: absolute;
    right: 12px;
    bottom: 15px;
   }  


   .stage>div:nth-child(n+2)>ul{
    position: absolute;
    margin: 0;
    padding: 0;
    list-style-type: none;
    border: 1px solid #ccc;
    background: #fff;
    z-index: 24;
    width: 100%;
    font-size: 12px;
   }  

   
   .stage>div:nth-child(n+2)>ul li{
      cursor: pointer;
      padding: 3px 5px;
      background:#555;
      color:#fff;
      margin-bottom: 2px;
      cursor: pointer;

}  

.stage>div:nth-child(n+2)>ul li span{
        margin-right: 3px;
        display: inline-block;
        float: left;      
}  
.stage>div:nth-child(2)>ul li p{
    display: inline-block;
    text-transform: uppercase;
} 

.stage>div:nth-child(n+3)>ul li span{
    float: unset !important;      
}  

.oppid{
    background: #ccc;
    padding: 2px 8px;
}

.oppid p:first-child{
   color:#555;
   font-size: 12px;
   line-height: 16px;
}
.oppid p:last-child{
    color:#fff;
    font-size: 16px;
    line-height: 20px;
 }

/* end */









label.customer{
    margin: 0 15px 7px;
}



input[type=radio] {
    position: absolute;
    visibility: hidden;
    display: none;
    margin:0
    }
    
    label.rad {
        color: #fff;
        display: block;
        cursor: pointer;
        font-weight: normal;
        width: 24%;
        padding: 8px 8px;
        position: relative;
        font-size: 16px;
        float: left;
        margin-right: 1%;
    }
    
    input[type=radio]:checked + label.rad{
    background:#39b54a;
    }
    
    input[type=radio]+ label.rad{
    background:#cc7a00;
    }
    
    
    input[type=radio]:checked + label.rad::after{
     opacity: 1;
    
    }
    #checkdigi{
        display: none;
    }
    
    .radio-group {
    display: block;
    margin: 0px;
    border-radius: 0px;
    overflow: hidden;
    }
    
    label.rad:after {
        content: '\F00C';
        position: absolute;
        opacity: 0;
        top: 0px;
        right: 8px;
        transition: 0.5s;
        font-family: "FontAwesome";
        font-size: 14px;
        width: auto;
        height: 100%;
        padding: 8px 0;
    }
    
button.btn{
    outline: none !important;
}

/* new opportunity css */

label{
    font-size: 15px;
}

#info{
    cursor: pointer;
}

div.infoblock{
    border: 1px solid #555;
    width: 652px;
    height: auto;
    background: #def0f2;
    z-index: 3;
    padding: 15px;
    transition:all .3s;
    font-size: 12px;
    display: none;
}

div.infoblock::after{
    content: "";
    position: absolute;
    top: -18px;
    left: 36%;
    margin-left: -15px;
    border-width: 9px;
    border-style: solid;
    border-color: transparent transparent #def0f2 transparent;
}

ul.infor{
    list-style-type: decimal;
    padding-left:15px; 
}
.mat-step-icon{
    display: none;
}

.step-content{
    position: relative;
   
    max-height: 434px;
   
}

.step-content>div:last-child{
    background: #d8d8d8;
    position: sticky;
    width: 100%;
    bottom: 0;
    left: 0;
    padding: 0 15px;
    height: 50px;
    z-index:2;
} 

.step-content::-webkit-scrollbar {
    width: 5px;
   
}
 
.step-content::-webkit-scrollbar-track {
    -webkit-box-shadow: inset 0 0 2px rgba(0,0,0,0.3);
}
 
.step-content::-webkit-scrollbar-thumb {
  background-color: #636363;
  outline: 1px solid slategrey;
}

fa.fis{
    margin-right: 10px;
    display: inline-block;
    font-size: 24px;
    position: relative;
    top:3px;
}

.step-content>div:last-child ul{
   list-style: none;
   padding: 0;
   margin: 0;
   display: inline-block;
} 

.step-content>div:last-child ul li{
   cursor: pointer;
   display: inline-block;
 } 

 .step-content>div:last-child ul li span{
    padding: 14px 53px 14px 0px;
    display: inline-block;
  } 

  .step-content>div:last-child ul li:last-child span{
    padding-right: 0px;
  } 
  
  .btncss{
    background: transparent;
    box-shadow: none;
    outline: none !important;
    border: none;
    padding: 0 9px;
    font-size: 16px;
  }
  .btncssp{
    padding: 13px;
}

.btncsssave{
    box-shadow: none;
    outline: none !important;
    border: none;
    padding: 14px 9px;
    font-size: 16px;
    display: inline-block;
    background: #555;
    color: #fff;
}



#fiscalbox{
  width:200px;
  height: 200px;
  background:#333;
  padding:15px;
  color: #fff;text-align: left;
  position: absolute;
display: none;
  bottom: 53px;
}

#projectionbox{
    width:200px;
    height: 200px;
    background:#333;
    padding: 15px;
    color: #fff;text-align: left;
    position: absolute;
    bottom: 53px;
    left: 220px;
    display: none;
}


.btn-primary.active, .btn-primary:active, .open>.dropdown-toggle.btn-primary {
    color: #555;
    background-color: #ffd938;
    border-color: #ffd938;
}
button.btn{
outline: none !important;
}

sup{
color:red;
position: absolute;
top: -1px;
right: -9px;
}
.visFalse{
    visibility: hidden;
}



.width21{
    width: 22% !important;
}

.width21 label{
    display: block !important;
}

.width15 label{
    display: block !important;
}

.width15{
    width: 15% !important;
}

.width43{
    width: 41% !important;
}

.fte{
    position: absolute;
    background: #ccc;
    right: 0;
    bottom: 0;
    padding: 6px 3px;
}

input[type=date]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    display: none;
}


input[type="date"]::-webkit-calendar-picker-indicator{
    
       background-position:center;
       background-size:20px 20px;
       background-repeat:no-repeat;
       color:#fff;
       opacity: 0;
       z-index: 9999;
       cursor: pointer;
}

input[type="date"]{

    background-position: 93% !important;
    background-repeat: no-repeat !important;
    
}

.rfi{
    border-bottom: 1px solid #ccc;
    padding-bottom: 0px;
    font-weight: 600;
    margin: 0 15px 12px;
}

.wasP{
    font-size: 14px;
    line-height: 17px;
}
#yes{
    display: block !important;
}
#Deal{
    display: inline-block !important;
}

.reason{
    width: 73%;
    margin-left: 2%;
    display: inline-block;
}

textarea{
    resize: none;
}

.additional{
    border:1px solid #ccc;
}

.additional p{
    background: #ccc;
    color:#555;
    padding: 10px;
    margin-bottom: 10px;
}

.additional ul{
  list-style-type: none;
  padding: 0;
  margin: 0;
  height: 72px;
  overflow-y: auto;
}

.additional ul::-webkit-scrollbar {
    width: 3px;
   
}
 
.additional ul::-webkit-scrollbar-track {
    -webkit-box-shadow: inset 0 0 2px rgba(0,0,0,0.3);
}
 
.additional ul::-webkit-scrollbar-thumb {
  background-color: darkgrey;
  outline: 1px solid slategrey;
}




.additional ul li{
    padding: 0px  5px  0px 50px;
    position: relative;
    font-size: 12px;
}

.additional ul li::before{
    content: "\f00c";
    position: absolute;
    font-family: "FontAwesome";
    left:18px;
    display: none;
    transition:all .2s;
    font-size: 12px;
}

.additional ul li.click::before{
    display: block;
}

.addt >thead>tr>td, .table-bordered>thead>tr>th {
    border-bottom-width: 0px !important;
}

.addt>thead>tr>th:nth-child(2),.addt>thead>tr>th:last-child{
    width: 20% !important;
}

.addt >tbody>tr>td{
  padding: 0 !important;
}

.addt >tbody>tr>td>div span{
    padding: 8px !important;
    height: 42px;
    font-size: 12px;
    line-height: 1;
  }

.addt>tbody>tr>td>div input{
    padding: 0px 0 0 5px;
    height: 42px;
    border:  1px solid transparent !important;
    outline: none;
}

.addt>tbody>tr>td>div input:focus{
    border: 1px solid #c1c1c1 !important;
    background: #f5f2f2;
    outline: none;
    box-shadow: none;
    text-align: left;
}

.addt>thead {
   background: #ccc !important;
}

.addnew,.addnew:focus{
    position: absolute;
    right: 15px;
    bottom: -4px;
    border: none;
    background: #ccc;
    cursor: pointer;
    outline: none;
    box-shadow: none;
}

.addnewupdate{
    border: none;
    background:transparent;
    cursor: pointer;
    outline: none;
    box-shadow: none;
}

.size{
    font-size: xx-large;
}


@media screen and (min-width:1370px) {

    .step-content{
        height: 550px;
    }
    
}

fieldset { 
    padding: 10px;
    border: 1px solid #ccc;
    width:900px;
  }
  
  legend{
    border-style: none;
    border-width: 0;
    font-size: 14px;
    line-height: 20px;
    margin-bottom: 0;
    width: auto;
  }
  
  .width20{
    width: 20% !important;
  }
  
  .form-controltest {
    width: 100%;
    height: 34px;
    padding: 6px 12px;
    font-size: 14px;
    line-height: 1.42857143;
    color: #555;
    background-color: #fff;
    background-image: none;
    border: 1px solid #ccc;
    border-radius: 4px;
    -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
            box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
    -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;
         -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
            transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
  }

  .disabled {
    pointer-events:none; 
    opacity:0.6;        
}
