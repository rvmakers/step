<style id="antiClickjack">body{display:none !important;}</style>
  <script type="text/javascript">
    if (self === top) {
        var antiClickjack = document.getElementById("antiClickjack");
        antiClickjack.parentNode.removeChild(antiClickjack);
    } else {
        top.location = self.location;
    }
    </script>
<div class="wraper">
  <div class="row presalesrow">
    <div class="col-md-12 col-lg-12 col-xs-12 col-sm-12">

        <div class="widget stacked">

          <ol class="breadcrumb">
              <li class="active">
                <a routerLink="/home" class="color-compact">Home</a>
              </li>
              <li class="font-14">{{unitText}}</li>
          </ol>
          <p class="page-header">Presales Inbox</p>


          <div [hidden]="jobstatus">
              <span class="text-danger">Batch run is currently in progress - Request you to login after some time</span>
            </div>
          <div  class="alert alert-info" style="font-size: 13px;">

            <p >1. On Submission of data in Stagewise Data Capture you will be redirected to Presales Inbox
            </p>

            <p >2. Only Deal Owner,Presales Lead and Geo Sales Owner can Update the Key Details

            </p>


            <p>3. Opportunities in Stage Wise data capture can be modified only by Account Sales Owner, Geography Sales Owner,
              Deal Owner, Offshore Presales Lead, Onsite Owner and Solution Team member.
            </p>
          </div>


          <div class="widget-content borderbox">
              <app-lbl-message [MessageType]="messageType" [Messages]="messages"></app-lbl-message>
              <div class="row" style="border:1px solid rgba(20, 20, 20,0.082);margin-left:0px;margin-right:0px">
              <div class="form-group clearfix">
                <div class="col-lg-3 col-md-3 col-sm-3">
                  <div class="col-lg-12 col-md-12 col-sm-12">
                    <div class="form-group clearfix">
                      <label>Opportunity Type</label>
                      <select id="OpportunityType" [disabled]="roleOpportunityType" [(ngModel)]="opportunityTypeValue" (change)="CheckOpportunityType()"
                        class="form-control">
                        <option *ngFor="let OpportunityType of OpportunityTypeList;let i=index;" [value]="OpportunityType.Value">
                          {{OpportunityType.Text}}
                        </option>
                      </select>
                    </div>
                  </div>
                  <div class="col-lg-12 col-md-12 col-sm-12">
                    <div class="form-group clearfix">
                      <label>Opportunity Id/CRM ID</label>
                      <input type="text" [(ngModel)]="strOpportunity" onkeypress="return event.charCode >= 48 && event.charCode <=57" class="form-control">
                    </div>
                  </div>
                </div>
                <div class="col-lg-3 col-md-3 col-sm-3">
                  <div class="col-lg-12 col-md-12 col-sm-12">
                    <div class="form-group clearfix">
                      <label>Unit Status</label>
                      <select id="UnitStatus" class="form-control" [(ngModel)]="unitStatusValue">
                        <option *ngFor="let UnitStatus of unitStatusList" [value]="UnitStatus.Value">
                          {{UnitStatus.Text}}
                        </option>
                      </select>
                    </div>
                  </div>
                  <div class="col-lg-12 col-md-12 col-sm-12">
                    <div class="form-group clearfix">
                      <label>RPM Stage</label>
                      <angular2-multiselect [data]="stageList" [(ngModel)]="selectedStage" [settings]="dropdownSettings"

                        name="skills">
                      </angular2-multiselect>
                    </div>
                  </div>
                </div>
                <div class="col-lg-3 col-md-3 col-sm-3">
                  <div class="col-lg-12 col-md-12 col-sm-12">
                    <div class="form-group clearfix">
                      <label>Customer Name</label>
                      <input type="text" [(ngModel)]="strCustomerName" class="form-control" (keypress)="AllowAlphaNumeric($event)"  >
                    </div>
                  </div>
                  <div class="col-lg-12 col-md-12 col-sm-12">

                    <div class="form-group" [hidden]="checkOportunityType">
                      <label>Opp.Creation From Date</label>
                                        <form #myForm="ngForm" novalidate>
                                            <my-date-picker name="fromDate" [options]="myDatePickerOptions"
                                                            [(ngModel)]="oppCreationFromDate"  required></my-date-picker>
                                        </form>
                    </div>


                  </div>
                </div>
                <div class="col-lg-3 col-md-3 col-sm-3">
                  <div class="col-lg-12 col-md-12 col-sm-12">
                    <div class="form-group clearfix">
                      <app-keydeal></app-keydeal>
                    </div>
                  </div>
                  <div class="col-lg-12 col-md-12 col-sm-12">
                    <div class="form-group" [hidden]="checkOportunityType">
                      <label>Opp.Creation To Date</label>
                       <form #myForm="ngForm" novalidate>
                                            <my-date-picker name="toDate" [options]="myDatePickerOptions"
                                                            [(ngModel)]="oppCreationToDate" required></my-date-picker>
                       </form>
                    </div>


                  </div>
                </div>
                <div class="col-lg-12 col-md-12 col-xs-12 center clear">
                  <button type="button" class="btn btn-primary btnallign" (click)="Submit()">Go</button>
                </div>
              </div>
            </div>

            <div class="form-group clearfix">
              <div clas="col-lg-12 col-md-12 col-sm-12">
                <div class="col-md-2 col-lg-2 col-sm-2 col-lg-offset-5 col-md-offset-5 col-sm-offset-5">
                  <label (click)="AdvancedSearch()" style="color:#00529B">
                    - Advanced Search
                  </label>
                </div>
                <div clas="col-lg-5 col-md-5 col-sm-5">

                </div>
              </div>
            </div>

            <div [hidden]="!showAdvancedSearch" style="border:2px solid rgba(20, 20, 20, 0.082)">
              <div class="form-group clearfix">
                <div class="col-lg-12 col-md-12 col-sm-12" style="margin-top:2%">
                  <div class="col-lg-4 col-md-4 col-sm-4">
                    <div class="form-group clearfix">
                      <div class="col-lg-4 col-md-4 col-sm-4">
                        <label>Customer Type</label>
                      </div>
                      <div class="col-lg-8 col-md-8 col-sm-8">
                        <app-customer-type-multi></app-customer-type-multi>
                      </div>
                    </div>
                  </div>
                  <div class="col-lg-4 col-md-4 col-sm-4">
                    <div class="form-group clearfix">
                      <div class="col-lg-4 col-md-4 col-sm-4">
                        <label>Industry Practice</label>
                      </div>
                      <div class="col-lg-8 col-md-8 col-sm-8">
                        <app-industry-practise></app-industry-practise>
                      </div>
                    </div>
                  </div>
                  <div class="col-lg-4 col-md-4 col-sm-4">
                    <div class="form-group clearfix">
                      <div class="col-lg-4 col-md-4 col-sm-4">
                        <label>Geography</label>
                      </div>
                      <div class="col-lg-8 col-md-8 col-sm-8">
                        <app-geography></app-geography>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div [hidden]="checkReportConditon">
              <p>
                <span class="text-danger">* Please Note : </span>This Report data is Last updated on
                <label>{{lastUpdateDate}}</label>
              </p>
            </div>


            <div *ngIf="opportunityList.length == 0" [hidden]="checkdatetage0to8">
              <label class="text-danger">No data available for opportunities between Stage 0 to 8 & 13 for the selected range .</label>
            </div>
            <div [hidden]="stage0to8" *ngIf="opportunityList.length > 0" style="padding-top:3%">
              <!-- <img src="./assets/table_bg.gif" [hidden]="table_bg" (click)="checkOpportunity1Condition=false;table_bg=true;table_bg1=false">
              <img src="./assets/table_bg1.gif" [hidden]="table_bg1" (click)="checkOpportunity1Condition=true;table_bg1=true;table_bg=false"> -->
              <div class="btn btn-primary" *ngIf="table_bg1" (click)="checkOpportunity1Condition=false;table_bg=true;table_bg1=false">Click to Show Opportunities (0 to 8 &amp; 13) <i class="fa fa-angle-double-down"></i></div>
              <div class="btn btn-primary" *ngIf="table_bg" (click)="checkOpportunity1Condition=true;table_bg1=true;table_bg=false">Click to Hide Opportunities (0 to 8 &amp; 13)  <i class="fa fa-angle-double-up"></i></div>   
            </div>

            <div *ngIf="opportunityList.length > 0" [hidden]="checkOpportunity1Condition" style="padding-top:3%">
              <div class="table-responsive">
                <table class="table-bordered">

                  <thead style="background: #ccc;border-bottom-width: 0">
                    <tr>                      
                      <th>Customer</th>
                      <th>Opp.Desc</th>
                      <th>Opp.Id</th>
                      <th>Geo</th>
                      <th>ISU</th>
                      <th>CRM Stage</th>
                      <th>RPM Stage</th>

                      <th>FTE Size</th>
                      <th>Deal Term(Months)</th>
                      <th>TCV(USD)</th>
                      <th>Prob. Of Win %</th>
                      <th>Opp. Creation Dt</th>
                      <th>Deal CL. Creation Dt</th>
                      <th>Created By</th>
                      <th>Customer Type</th>
                      <th>Recommended DC</th>
                      <th>Next Action By</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr *ngFor="let Opportunity of opportunityList|paginate:{itemsPerPage:10,currentPage:Page1,id:'First',totalItems: TotalRecord1};let i=index;">
                                          
                      <td>
                        <a (click)="GrvOppDetailsRowClick(Opportunity)"style="cursor:Pointer">{{Opportunity.StrCustName}}</a>
                      </td>
                      <td>
                        <span> {{Opportunity.StrOpportunityDescription}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.StrOpportunityId}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.StrGeographyCode}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.StrIndustryCode}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.StageId}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.RpmStageID}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.IntEstimatedFteSize}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.DealTerm}}</span>
                      </td>





                      <td>
                        <span> {{Opportunity.TotalContractValue}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.ProbabilityOfWin}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.StrOppDate}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.ClosureDate}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.StrAssociateDetails}}</span>
                      </td>




                      <td>
                        <span> {{Opportunity.StrCustomerTypeCode}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.StrDcName}}</span>
                      </td>
                      <td>

                        <span [innerHtml]="Opportunity.StrDefaulters"></span>
                      </td>

                    </tr>
                  </tbody>
                </table>
                <pagination-controls (pageChange)="Page1=$event" id="First"></pagination-controls>
              </div>
            </div>
            <div style="min-height: 20px">

            </div>
            <div *ngIf="opportunityListFilteredStage.length==0" [hidden]="checkdatetage9to12" style="padding-bottom:3%;padding-top:3%">
              <label class="text-danger">No data available for opportunities for stage 9,10,11 & 12 for the selected range.</label>
            </div>
            <div [hidden]="stage9to12" *ngIf="opportunityListFilteredStage.length>0" style="padding-bottom:3%">
              <!-- <img src="./assets/table_bg2.gif" [hidden]="table_bg2" (click)="checkOpportunity2Condition=false;table_bg2=true;table_bg3=false">
              <img src="./assets/table_bg3.gif" [hidden]="table_bg3" (click)="checkOpportunity2Condition=true;table_bg3=true;table_bg2=false"> -->
              <span class="btn btn-primary" *ngIf="table_bg3" (click)="checkOpportunity2Condition=false;table_bg2=true;table_bg3=false">Click to Show Opportunities (9,10,11) <i class="fa fa-angle-double-down"></i></span>
              <span class="btn btn-primary" *ngIf="table_bg2" (click)="checkOpportunity2Condition=true;table_bg3=true;table_bg2=false">Click to Hide Opportunities (9,10,11)  <i class="fa fa-angle-double-up"></i></span>   
            </div>
            <div *ngIf="opportunityListFilteredStage.length > 0" [hidden]="checkOpportunity2Condition" style="padding-bottom:3%;padding-top:3%">
              <div class="table-responsive">
                <table class="table-bordered">

                  <thead style="background: #ccc;border-bottom-width: 0">
                    <tr>
                     
                      <th>Customer</th>
                      <th>Opp.Desc</th>
                      <th>Opp.Id</th>
                      <th>Geo</th>
                      <th>ISU</th>
                      <th>CRM Stage</th>
                      <th>RPM Stage</th>

                      <th>FTE Size</th>
                      <th>Deal Term(Months)</th>
                      <th>TCV(USD)</th>
                      <th>Prob. Of Win %</th>
                      <th>Opp. Creation Dt</th>
                      <th>Deal CL. Creation Dt</th>
                      <th>Created By</th>
                      <th>Customer Type</th>
                      <th>Recommended DC</th>
                      <th>Next Action By</th>

                    </tr>
                  </thead>
                  <tbody>
                    <tr *ngFor="let Opportunity of opportunityListFilteredStage|paginate:{itemsPerPage:10,currentPage:Page2,id:'Second',totalItems: TotalRecord2};">
                     
                      <td>



                        <a (click)="GrvOpportunityRowClick(Opportunity)" style="cursor:Pointer">{{Opportunity.StrCustName}}</a>
                      </td>
                      <td>
                        <span> {{Opportunity.StrOpportunityDescription}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.StrOpportunityId}}</span>
                      </td>



                      <td>
                        <span> {{Opportunity.StrGeographyCode}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.StrIndustryCode}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.StageId}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.RpmStageID}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.IntEstimatedFteSize}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.DealTerm}}</span>
                      </td>





                      <td>
                        <span> {{Opportunity.TotalContractValue}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.ProbabilityOfWin}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.StrOppDate}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.ClosureDate}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.StrAssociateDetails}}</span>
                      </td>




                      <td>
                        <span> {{Opportunity.StrCustomerTypeCode}}</span>
                      </td>
                      <td>
                        <span> {{Opportunity.StrDcName}}</span>
                      </td>
                      <td>
                        <span [innerHtml]="Opportunity.StrDefaulters"> </span>
                      </td>

                    </tr>
                  </tbody>
                </table>
                <pagination-controls   (pageChange)="Page2=$event" id="Second"></pagination-controls>
              </div>
            </div>



            <table id="tblHelp" style="width:100%;font-size: 13px;" class="alert alert-info">
              <div >


                <tr>
                  <td style="padding-left: 35px; text-align:left;">
                    <li >Records are shown with opportunity creation date between 'From Date' and 'To Date' fields. </li>
                    <li >Advanced Search Options : On clicking 'Advanced Search' button, there are 3 filters (Cutomer Type, ISU
                      and Geography) to customize the search results.
                    </li>
                    <li >When clicked on 'Go' button, all the opportunities which are in stages 0, 1, 2, 3, 4, 5, 6, 7, 8 and
                      13 are displayed. </li>
                    <li >View Opportunites : On clicking 'Opportunites : Stage 9,10,11 and 12' button, all the opportunities which
                      are in stages 9, 10, 11 and 12 are displayed.
                    </li>
                    <li >Customer Type: EL- Existing LAM, ENL- Existing Non LAM, N- New Customer.
                      <br />
                    </li>


                  </td>
                </tr>
              </div>
            </table>
          </div>
        </div>

    </div>
  </div>
</div>





.ts

//************************************************************************
//File Name	     : perslaes.Component.ts 
//Description    : It's will show all opp in grid 
//Created By     : Anand,Vinoth,Amul,Agrim 
//************************************************************************
import { Component, OnInit, ViewChild, AfterViewChecked, AfterViewInit } from '@angular/core';
import { IStage } from '../Interface/Stage/Stage';
import { ICluster } from '../Interface/Cluster/Cluster';
import { IUnit } from '../Interface/Unit/Unit';
import { IPresales } from '../Interface/Presales/Presales';
import { IkeyDeal } from '../Interface/KeyDeal/ikey-deal';
import { PresalesService } from '../Services/presales.service';
import { MultiSelectKeydealComponent } from '../UserControls/MultiSelectkeydeal/keydeal.component';
import { MultiSelectCustomerTypeComponent } from '../UserControls/MultiSelectCustomerType/customer-type.component';
import { MultiSelectGeographyComponent } from '../UserControls/MultiSelectgeography/geography.component';
import { MultiSelectIndustryPractiseComponent } from '../UserControls/MultiSelectindustrypractise/industry-practise.component';
import { ClusterService } from '../Services/Cluster.service';
import { UnitService } from '../Services/Unit-Service';
import { error } from 'selenium-webdriver';
import { KeyDealService } from '../Services/key-deal.service';
import { INewOpportunity } from '../Interface/NewOpportunity/NewOpportunity';
import { Constant } from '../../app/Constant';
import { CookieService } from 'ngx-cookie-service';
import { IMyDrpOptions } from 'mydaterangepicker';
import { FiscalOfferingService } from '../Services/fiscal-offering.service';
import { LblMessageComponent } from '../UserControls/Lbl-message/lbl-message.component';
import { Router } from '@angular/router';
import { IMyDpOptions } from 'mydatepicker';
declare var $: any;
import { ValidationMessage } from '../ValidationMessage/validation-message'
@Component({
    selector: 'app-presales',
    templateUrl: './presales.component.html',
    styleUrls: ['./presales.component.css']
})
export class PresalesComponent implements OnInit, AfterViewInit {
    @ViewChild(MultiSelectKeydealComponent)
    private keyDealInstance: MultiSelectKeydealComponent;
    @ViewChild(MultiSelectCustomerTypeComponent)
    private customerTypeInstance: MultiSelectCustomerTypeComponent;
    @ViewChild(MultiSelectGeographyComponent)
    private geographyInstance: MultiSelectGeographyComponent;
    @ViewChild(MultiSelectIndustryPractiseComponent)
    private industryPracticeInstance: MultiSelectIndustryPractiseComponent;
    keyDealList: IkeyDeal[];
    strUserId: string = atob(this.cookieService.get('userId'));
    strStake: string = this.constant.strStake;
    strOpportunity: string;
    strCustomerName: string;
    strRole: string;
    stageList: any[] = new Array();
    selectedStage: any[] = new Array();
    selectedRpmStages: string = '';
    dropdownSettings = {};
    opportunityTypeValue: string;
    OpportunityTypeList: IPresales[];
    roleOpportunityType: boolean;
    unitStatusList: IPresales[];
    StrFilter: string;
    itemList = [];
    selectedItems = [];
    showAdvancedSearch: boolean;
    checkOpportunity2Condition: boolean;
    checkOpportunity1Condition: boolean
    CheckOportunityCondition: boolean;
    checkdatetage9to12: boolean;
    checkdatetage0to8: boolean;
    checkReportConditon: boolean = true;
    checkKeyDeals: boolean;
    //As per New requirement keydeal is removed..Please dont remove the below line..
    //checkKeyDealGrid: boolean;
    updateKeyDeals: boolean;
    stage0to8: boolean;
    stage9to12: boolean;
    saveKey: boolean = true;
    table_bg1: boolean
    table_bg: boolean
    table_bg2: boolean
    table_bg3: boolean;
    roleVise: true;
    checkOportunityType: boolean;
    jobstatus: boolean;
    jobstatusList: any[] = new Array();
    oppCreationFromDate: any;
    oppCreationToDate: any;
    opportunityList: any[] = new Array();
    today: any;
    dd: any;
    mm: any;
    yyyyto :any;
    mmto : any;
    ddto : any;
    yyyy: any;
    opportunityListFilteredStage: any[] = new Array();
    //As per New requirement keydeal is removed..Please dont remove the below line..
    // opportunityKeyDealList: any[] = new Array();
    customerTypeID: string = '';
    industryPractiseID: string = '';
    geographyID: string = '';
    //   To check the condition to save the keydeal
    checkkeydeal: number;
    //   To fetch list for gridopportunity_admin
    objPresale: any
    //   To fetch value from other component..
    clusterList: any[] = new Array();
    cluster: number;
    unitList: IUnit[];
    unit: number = Number(atob(this.cookieService.get('userUnit')));
    i: number;
    modalPresales: any;
    fromDate: string;
    toDate: string;
    //   Last Update date for presales role
    lastUpdateDate: string;
    unitStatusValue: string;
    myDatePickerOptions: IMyDpOptions = {
        dateFormat: 'dd.mm.yyyy',
    };

    unitText: string = String(atob(this.cookieService.get(('unitText'))));
    messageType: string = '';
    messages: string;
    //Pagination...
    TotalRecord1: number = 0;
    TotalRecord2: number = 0;
    TotalRecord3: number = 0;
    Page1: number = 1;
    Page2: number = 1;
    Page3: number = 1;



    constructor(private presalesService: PresalesService, private clusterService: ClusterService,
        private unitService: UnitService, private cookieService: CookieService,
    private keyDealService: KeyDealService, private constant: Constant, 
        private fiscalOfferingService: FiscalOfferingService, private router: Router) {
    }
    AllowAlphaNumeric(event) {
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        var regex = new RegExp("[A-Za-z0-9-]");
        if (regex.test(key)) {
            return key;
        }
        else {
            event.preventDefault();
            return false;
        }
    }
    ngAfterViewInit() {
        this.fiscalOfferingService.GetMultiSelectDropdownList('').subscribe(data => {

            this.customerTypeInstance.CustomerTypeList = data[0],
                this.customerTypeInstance.CustomerTypeList.push({ 'id': -1, 'itemName': 'All' });
            this.customerTypeInstance.CustomerType.push({ 'id': -1, 'itemName': 'All' });
            this.geographyInstance.GeographyList = data[2];
            this.geographyInstance.GeographyList.push({ 'id': -1, 'itemName': 'All' });
            this.geographyInstance.Geography.push({ 'id': -1, 'itemName': 'All' });
            this.industryPracticeInstance.IndustryPracticeList = data[1];
            this.industryPracticeInstance.IndustryPracticeList.push({ 'id': -1, 'itemName': 'All' });
            this.industryPracticeInstance.IndustryPractice.push({ 'id': -1, 'itemName': 'All' });
            this.stageList = data,
                this.stageList.push({ 'id': -1, 'itemName': 'All' });
        },
            error => {
            });
    }
    ngOnInit() {

    
        this.table_bg = true;
        this.table_bg1 = false;
        this.table_bg2 = false;
        this.table_bg3 = true;
        this.checkdatetage9to12 = false;
        this.checkdatetage0to8 = false;
        this.strRole = atob(this.cookieService.get('userRole'));
        //this.strRole="Presales";
        this.checkOpportunity1Condition = false;
        this.checkOpportunity2Condition = true;
        this.checkOportunityType = false;
        this.checkKeyDeals = true;
        //As per New requirement keydeal is removed..Please dont remove the below line..
        // this.checkKeyDealGrid = true;
        this.stage0to8 = true;
        this.stage9to12 = true;
        this.jobstatus = true;
        this.saveKey = true;
        this.today = new Date();
        this.dd = this.today.getDate();
        this.mm = this.today.getMonth() + 1; //   January is 0!
        this.yyyy = this.today.getFullYear();
        this.presalesService.CheckJobStatus().subscribe(data => {
            this.jobstatusList = data;
      
            if (this.jobstatusList.length > 0) {
                if (this.jobstatusList[0].Job_Status.trim() == 'Y') {
                    this.jobstatus = false;
                    return;
                }
                else {
                    this.keyDealService.GetKeyDeal().subscribe(datas =>
                        this.keyDealList = datas);
                        //by Agrim
                        this.ddto= this.dd+1;
                        this.mmto = this.mm;
                        this.yyyyto = this.yyyy; 
                        if(this.ddto>31){
                            this.ddto=1;
                            this.mmto=this.mm+1;
                            if(this.mmto>12){
                                this.mmto = 1;
                                this.yyyyto = this.yyyy + 1;
                            }
                        }
                        
                        //End
                    if (this.dd < 10) {
                        this.dd = '0' + this.dd;
                    }
                    if (this.mm < 10) {
                        this.mm = '0' + this.mm;
                    }
                    if (this.ddto < 10) {
                        this.ddto = '0' + this.ddto;
                    }
                    if (this.mmto < 10) {
                        this.mmto = '0' + this.mmto;
                    }

                    let today = new Date();
                    let ddd = today.getDate();
                    let mmm = today.getMonth() + 1;
                    let yyyy = today.getFullYear();
                    this.oppCreationFromDate = { date: { day: '1', month: mmm, year: yyyy } };
                    this.oppCreationToDate = { date: { day: ddd, month: mmm, year: yyyy } };
                    this.checkOpportunity2Condition = true;
                    this.strOpportunity = this.NullEmptyCheck(this.strOpportunity);
                    this.strCustomerName = this.NullEmptyCheck(this.strCustomerName);
                    if (this.strRole == 'Presales' || this.strRole == 'Cluster Administrator') {
            
                        this.objPresale =
                            {
                                'IntStageID': -1,
                                'StrCustTypeId': '-1',
                                'StrIndustry': '-1',
                                'StrGeography': '-1',
                                'StrOpportunity': this.strOpportunity,
                                'IntFromDt': '' + this.yyyy + '' + this.mm + '' + '01',
                                'IntToDt': this.yyyyto + '' + this.mmto + '' + this.ddto,
                                'StrCustomerName': this.strCustomerName,
                                'StrKey': '-1',
                                'StrStageName': '0,1,2,3,4,5,6,7,8,',
                                'StrUserlogin': this.strUserId,
                                'StrTagging': 'All',
                                'strFilter': 'NEW',
                                'intUnitID': this.unit
                            };
                        this.roleVise = true;
                        this.checkReportConditon = false;
                        this.presalesService.GetOpportunityInbox(this.objPresale).subscribe(data => {
                            if (data != undefined) {
                                this.opportunityList = data[0]
                                if (data[0] == undefined) {
                                    this.stage0to8 = true;
                                    this.updateKeyDeals = true;
                                }
                                else {
                                    if (this.opportunityList.length > 0) {
                                        this.TotalRecord1 = this.opportunityList.length;
                                        this.checkKeyDeals = false;
                                        this.stage0to8 = false;
                                        this.updateKeyDeals = false;
                                    }
                                    else {
                                        this.TotalRecord1 = 0;
                                        this.stage0to8 = true;
                                        this.updateKeyDeals = true;
                                    }
                                }
                            }
              
                        }, error =>{ throw error;},);
                        this.presalesService.GetOpportunityDetailsFilteredStage(this.objPresale).subscribe(data => {
                            this.opportunityListFilteredStage = data;
                            if (data == undefined) {
                                this.stage9to12 = true;
                            }
                            else {
                                if (this.opportunityListFilteredStage.length > 0) {
                                    this.stage9to12 = false;
                                    this.TotalRecord2 = this.opportunityListFilteredStage.length;
                                }
                                else {
                                    this.stage9to12 = true;
                                    this.TotalRecord2 = 0;
                                }
                
                            }
                        }, error =>{ throw error;},);
                    }
                    if (this.strRole == 'Administrator') {
                        this.objPresale =
                            {
                                'IntStageID': -1,
                                'StrCustTypeId': '-1',
                                'StrIndustry': '-1',
                                'StrGeography': '-1',
                                'StrOpportunity': this.strOpportunity,
                                'IntToDt': this.yyyyto + '' + this.mmto + '' + this.ddto,
                                'IntFromDt': '' + this.yyyy + '' + this.mm + '' + '01',
                                'StrCustomerName': this.strCustomerName,
                                'StrKey': '-1',
                                'StrStageName': '-1',
                                'StrUserlogin': this.strUserId,
                                'StrTagging': 'All',
                                'strFilter': 'All',
                                'intUnitID': this.unit
                            };
                        this.updateKeyDeals = true;
                        this.checkReportConditon = true;
            
                        this.presalesService.GetOpportunityInboxAdmin(this.objPresale).subscribe(data => {
                            if (data != undefined) {
                                this.opportunityList = data[0];
                                if (data[0] == undefined) {
                                    this.checkKeyDeals = true;
                                    this.stage0to8 = true;
                                    this.checkOpportunity1Condition = true;
                                }
                                else {
                                    if (this.opportunityList.length > 0) {
                                        this.checkKeyDeals = true;
                                        this.stage0to8 = false;
                                        this.checkOpportunity1Condition = false;
                                        this.TotalRecord1 = this.opportunityList.length;
                                    }
                                    else {
                                        this.TotalRecord1 = 0;
                                        this.checkKeyDeals = true;
                                        this.stage0to8 = true;
                                        this.checkOpportunity1Condition = true;
                                    }
                                }
                            }

              
                        }, error =>{ throw error;},);
                        this.presalesService.GetOpportunityDetailsFilteredStageAdmin(this.objPresale).subscribe(data => {

                            if (data == undefined) {
                                this.stage9to12 = true;
                            }
                            else {
                                this.opportunityListFilteredStage = data
                                if (this.opportunityListFilteredStage.length > 0) {
                                    this.TotalRecord2 = this.opportunityListFilteredStage.length;
                                    this.stage9to12 = false;
                                }
                                else {
                                    this.TotalRecord2 = 0;
                                    this.stage9to12 = true;
                                }
                            }
              
                        }, error =>{ throw error;},);
                    }
                    this.showAdvancedSearch = false;
                    this.presalesService.GetOpportunityType().subscribe(data => {
                        this.OpportunityTypeList = data
                        this.AssignOpportunity();
                    });
                    this.opportunityTypeValue = 'All';
                    this.presalesService.GetUnitStatus().subscribe(data => {
                        this.unitStatusList = data;
                        this.unitStatusValue = this.unitStatusList[0].Value;
                    });



                    this.fiscalOfferingService.FiscalGetBusinessBFSList().subscribe(data => {
                        if (data != undefined) {
                            this.clusterList = data;
                            if (this.clusterList.length < 1) {
                            }
                        }
                        else {
                            this.clusterList = [];
                        }
                    },  error =>{ throw error;});

                    this.unitService.GetUnits().subscribe(data => (this.unitList = data),
                    error =>{ throw error;});
                    this.presalesService.GetRPMStage().subscribe(data => {
                        this.stageList = data,
                            this.stageList.push({ 'id': -1, 'itemName': 'All' }),
                            this.StageBinding();
                    },
                    error =>{ throw error;},);
                    this.dropdownSettings =
                        {
                            singleSelection: false,
                            text: 'Select Stage',
                            selectAllText: 'Select All',
                            unSelectAllText: 'UnSelect All',
                            enableSearchFilter: false,
                            classes: "myclass multi-class",
                            badgeShowLimit: 1,
                      
                        };
                    this.presalesService.GetOppTrackerJobLastUpdatedTime().subscribe(data => {
                        this.lastUpdateDate = data[0].LastUpdatedTime;
                    },
                    error =>{ throw error;},);
                }
            }
        }, error => {
        
        });
    }
    CheckOpportunityType(): void {
        if (this.opportunityTypeValue == 'CRM') {
            this.checkOportunityType = true;
        }
        else {
            this.checkOportunityType = false;
        }
    }
    AssignOpportunity(): void {
        let index: number;
        if (this.strRole == 'Administrator') {
            index = this.OpportunityTypeList.findIndex(x => x.Text == 'ALL');
            this.opportunityTypeValue = this.OpportunityTypeList[index].Value;
            this.roleOpportunityType = true;
        }
        if (this.strRole == 'Presales' || this.strRole == 'Cluster Administrator') {
            index = this.OpportunityTypeList.findIndex(x => x.Text == 'Presales');
            this.opportunityTypeValue = this.OpportunityTypeList[index].Value;
            this.roleOpportunityType = false;
        }
    }
    StageBinding(): void {
        if (this.strRole == 'Presales' || this.strRole == 'Cluster Administrator') {
            for (this.i = 0; this.i < 9; this.i++) {
                this.selectedStage.push(this.stageList[this.i]);
            }
        }
        if (this.strRole == 'Administrator') {
            this.selectedStage.push(this.stageList[(this.stageList.length) - 1]);
        }
    }
    AdvancedSearch(): void {
        this.showAdvancedSearch = !this.showAdvancedSearch
    }
    onchangeUnit(event: any) {
    }
    Submit() {

        this.messageType = '';
        this.checkdatetage9to12 = false;
        this.checkdatetage0to8 = false;
        //As per New requirement keydeal is removed..Please dont remove the below line..
        //this.checkKeyDealGrid = true;
        this.saveKey = true;
        this.stage0to8 = false;
        this.stage9to12 = false;
        let day; let month; let year;
        let FromOppDate: any = 2000010;
        let ToOppDate: any = 20000102;
        let checkDate: number = 1;


        if (this.oppCreationToDate == null || this.oppCreationFromDate == null) {
            checkDate = 0;
            if (this.oppCreationFromDate == null) {
                this.messages = ValidationMessage.ERR_FROMDATE_NULL;
                this.messageType = ValidationMessage.LBL_MESSAGE_ERROR_TYPE;
            }
            if (this.oppCreationToDate == null) {
                this.messages = ValidationMessage.ERR_TODATE_NULL;
                this.messageType = ValidationMessage.LBL_MESSAGE_ERROR_TYPE;
            }
        }
        else {
            day = this.oppCreationFromDate.date.day;
            month = this.oppCreationFromDate.date.month;
            year = this.oppCreationFromDate.date.year

            if (day < 10) {
                day = "0" + day;
            }
            if (month < 10) {
                month = "0" + month;
            }
            FromOppDate = year + "" + month + "" + day
            FromOppDate = Number(FromOppDate);
            day = this.oppCreationToDate.date.day;
            month = this.oppCreationToDate.date.month;
            year = this.oppCreationToDate.date.year

            if (day < 10) {
                day = "0" + day;
            }
            if (month < 10) {
                month = "0" + month;
            }
            ToOppDate = year + "" + month + "" + day
            ToOppDate = Number(ToOppDate);
        }
        let TodayDate: any = new Date();
        let Tdy = TodayDate.getDate();
        let Tmm = TodayDate.getMonth() + 1; //   January is 0!
        let Tyyyy = TodayDate.getFullYear();
        if (Tdy < 10) {
            Tdy = '0' + Tdy;
        }
        if (Tmm < 10) {
            Tmm = '0' + Tmm;
        }
        TodayDate = Tyyyy + "" + Tmm + "" + Tdy;

    //Changes Agrim
    let oppToDate : any;
    let tDay : any = this.oppCreationToDate.date.day.toString();
    let tMonth : any = this.oppCreationToDate.date.month.toString();
    let tYear : any = this.oppCreationToDate.date.year.toString();
    let dateString = tMonth+'.' + tDay+'.'+ tYear;
    oppToDate = new Date(dateString);
    let oppFromDate :any; 
    tDay  = this.oppCreationFromDate.date.day.toString();
    tMonth  = this.oppCreationFromDate.date.month.toString();
    tYear  = this.oppCreationFromDate.date.year.toString();
    dateString = tMonth+'.' + tDay+'.'+ tYear;
    oppFromDate = new Date(dateString);
    let diff: any = new Date(oppToDate-oppFromDate);
    diff = Math.floor(diff / 1000 / 60 / 60 / 24);
    if(diff>365 && checkDate == 1){
      this.messages = ValidationMessage.LBL_ERROR_TIME_PERIOD;
      this.messageType = ValidationMessage.LBL_MESSAGE_ERROR_TYPE;
      checkDate = 0;
    }
    //End

        if (new Date(ToOppDate) < new Date(FromOppDate) && checkDate == 1) {
            this.messages = ValidationMessage.ERR_FROMDATE;
            this.messageType = ValidationMessage.LBL_MESSAGE_ERROR_TYPE;
            checkDate = 0;
        }

        else if (Number(TodayDate) < Number(ToOppDate)) {
            this.messages = ValidationMessage.ERR_TODATE;
            this.messageType = ValidationMessage.LBL_MESSAGE_ERROR_TYPE;
            checkDate = 0;
        }
    
        if (checkDate == 0) {
            this.checkOpportunity1Condition = true;
            this.checkOpportunity2Condition = true;
            this.stage0to8 = true;
            this.stage9to12 = true;
            this.saveKey = true;
            this.checkdatetage9to12 = true;
            this.checkdatetage0to8 = true;
        }
        else if (this.selectedStage.length == 0 || this.customerTypeInstance.CustomerType.length == 0
            || this.industryPracticeInstance.IndustryPractice.length == 0 || this.geographyInstance.Geography.length == 0) {
            this.messageType = ValidationMessage.LBL_MESSAGE_ERROR_TYPE;
            if (this.selectedStage.length == 0) {
                this.messages = ValidationMessage.REQ_STAGES;
            }
            else if (this.customerTypeInstance.CustomerType.length == 0) {
                this.messages = ValidationMessage.REQ_CUSTOMERTYPE;
            }
            else if (this.industryPracticeInstance.IndustryPractice.length == 0) {
                this.messages = ValidationMessage.REQ_ISU;
            }
            else {
                this.messages = ValidationMessage.REQ_GEOGRAPHY;
            }
        }
        else {
      
            this.checkdatetage9to12 = false;
            this.checkdatetage0to8 = false;
            let OpportunityDetailList: IPresales[];
            this.presalesService.CheckAllOppDetails(this.strOpportunity).subscribe(data => {
                OpportunityDetailList = data;
                let checkundef = 0;
                if (data == undefined) {
                    checkundef = 1;
                }
                else if (this.strRole == 'Administrator') {
                    checkundef = 2;
                }
                else if (data.length == 0) {
                    checkundef = 3;
                }
                else if (OpportunityDetailList[0].StrDealOwner1 != this.strUserId && OpportunityDetailList[0].StrValueBps != this.strUserId &&
                    OpportunityDetailList[0].StrGeoSalesOwner != this.strUserId &&
                    OpportunityDetailList[0].StrAccountSalesOnwer != this.strUserId &&
                    OpportunityDetailList[0].StrOnsiteOnwer != this.strUserId && OpportunityDetailList[0].StrTMSOLEmpNO != this.strUserId &&
                    OpportunityDetailList[0].StrOffshoreBDLead != this.strUserId &&
                    OpportunityDetailList[0].StrDealOwner2 != this.strUserId
                ) {
                    this.messages = ValidationMessage.ERR_NOTAUTHORISED + this.strOpportunity;
                    this.messageType = ValidationMessage.LBL_MESSAGE_ERROR_TYPE;
                    checkundef = 4;
          
                }
                if (checkundef != 4) {
                    let check: number;
                    let check1: number;
                    this.selectedRpmStages = '';
                    for (this.i = 0; this.i < this.selectedStage.length; this.i++) {
                        if (this.selectedStage[this.i].id == '-1') {
                            this.selectedRpmStages = '-1';
                            check = 1
                        }
                        else {
                            this.selectedRpmStages = this.selectedStage[this.i].id + ',' + this.selectedRpmStages;
                            check1 = 1
                        }
                    }
                    if (check == 1 && check1 == 1) {
                        check1 = 0;
                        check = 0;
            
                        this.messages = ValidationMessage.ERR_ALLSTAGE;
                        this.messageType = ValidationMessage.LBL_MESSAGE_ERROR_TYPE;
                        this.checkOpportunity1Condition = true;
                        this.checkOpportunity2Condition = true;
                        this.stage0to8 = true;
                        this.stage9to12 = true;
                    }
                    else {
                        check1 = 0;
                        check = 0;
                        this.CheckOportunityCondition = true;
                        this.customerTypeID = '';
                        this.customerTypeInstance.CustomerType.forEach(objCusttype => {
                            if (objCusttype.id == '-1') {
                                check = 1;
                                this.customerTypeID = '-1';
                            }
                            else {
                                check1 = 1;
                                this.customerTypeID = objCusttype.id + ',' + this.customerTypeID;
                            }
                        });
                        if (check == 1 && check1 == 1) {
                            check1 = 0;
                            check = 0;
                            this.customerTypeID = '-1';
                        }
                        else {
                            check1 = 0;
                            check = 0;
                        }
                        this.industryPractiseID = '';
                        this.industryPracticeInstance.IndustryPractice.forEach(objIndustryPractise => {
                            if (objIndustryPractise.id == '-1') {
                                check = 1;
                                this.industryPractiseID = '-1';
                            }
                            else {
                                check1 = 1;
                                this.industryPractiseID = objIndustryPractise.id + ',' + this.industryPractiseID;
                            }
                        });
                        if (check == 1 && check1 == 1) {
                            this.industryPractiseID = '-1';
                        }
                        else {
                            check1 = 0;
                            check = 0;
                        }
                        this.geographyID = '';
                        this.geographyInstance.Geography.forEach(objGeography => {
                            if (objGeography.id == '-1') {
                                check = 1;
                                this.geographyID = '-1';
                            }
                            else {
                                check1 = 1;
                                this.geographyID = objGeography.id + ',' + this.geographyID;
                            }
                        });
                        if (check == 1 && check1 == 1) {
                            this.geographyID = '-1';
                        }
                        else {
                            check1 = 0;
                            check = 0;
                        }


                        let Fdd: any;
                        let Fmm: any;
                        let Fyyy: any;

                        Fdd = this.oppCreationFromDate.date.day;
                        Fmm = this.oppCreationFromDate.date.month;
                        Fyyy = this.oppCreationFromDate.date.year

                        if (Fdd < 10) {
                            Fdd = "0" + Fdd;
                        }
                        if (Fmm < 10) {
                            Fmm = "0" + Fmm;
                        }
                        this.fromDate = Fyyy + "" + Fmm + "" + Fdd;
                        Fdd = this.oppCreationToDate.date.day;
                        Fmm = this.oppCreationToDate.date.month;
                        Fyyy = this.oppCreationToDate.date.year;
                         //Added by Agrim
                            Fdd = Fdd +1;
                            if(Fdd>31){
                                Fdd=1;
                                Fmm=Fmm+1;
                                if(Fmm>12){
                                    Fmm=1;
                                    Fyyy=Fyyy+1;
                                }
                            }
                            //End

                        if (Fdd < 10) {
                            Fdd = "0" + Fdd;
                        }
                        if (Fmm < 10) {
                            Fmm = "0" + Fmm;
                        }
                        this.toDate = Fyyy + "" + Fmm + "" + Fdd;
                        this.strOpportunity = this.NullEmptyCheck(this.strOpportunity);
                        this.strCustomerName = this.NullEmptyCheck(this.strCustomerName);
                        if (this.strOpportunity != "") {
                            this.GetOpportunityPage();
                        }
                        if (this.strRole == 'Administrator') {
                            this.modalPresales =
                                {
                                    StrStageName: this.selectedRpmStages,
                                    StrCustTypeId: this.customerTypeID,
                                    StrIndustry: this.industryPractiseID,
                                    StrGeography: this.geographyID,
                                    StrOpportunity: this.strOpportunity,
                                    IntFromDt: this.fromDate,
                                    IntToDt: this.toDate,
                                    StrTagging: this.unitStatusValue,
                                    StrCustomerName: this.strCustomerName,
                                    StrFilter: this.opportunityTypeValue,
                                    StrKey: this.keyDealInstance.StrKey,
                                    StrUserlogin: this.strUserId,
                                    intUnitID: this.unit
                                };
                            this.presalesService.GetOpportunityInboxAdmin(this.modalPresales).subscribe(data => {
                                if (data != undefined) {
                                    this.opportunityList = data[0]
                                    if (this.opportunityList.length > 0) {
                                        this.checkKeyDeals = true;
                                        this.stage0to8 = false;
                                        this.checkOpportunity1Condition = false;
                                        this.table_bg = true;
                                        this.table_bg1 = false;
                                        this.TotalRecord1 = this.opportunityList.length;
                                    }
                                    else {
                                        this.TotalRecord1 = 0;
                                        this.stage0to8 = true;
                                        this.checkKeyDeals = true;
                                    }
                                    
                                }
                
                            }, error =>{ throw error;},);
                            this.presalesService.GetOpportunityDetailsFilteredStageAdmin(this.modalPresales).subscribe(data => {
                                if (data != undefined) {
                                    this.opportunityListFilteredStage = data
                                    this.checkKeyDeals = true;
                                    if (this.opportunityListFilteredStage.length > 0) {
                                        this.stage9to12 = false;
                                        this.checkOpportunity2Condition = true;
                                        this.table_bg2 = false;
                                        this.table_bg3 = true;
                                        this.TotalRecord2 = this.opportunityListFilteredStage.length;
                                    }
                                    else {
                                        this.stage9to12 = true;
                                        this.checkOpportunity2Condition = true;
                                        this.TotalRecord2 = 0;
                                    }
                                }
                
                            }, error =>{ throw error;},);
                        }
                        if (this.strRole == 'Presales' || this.strRole == 'Cluster Administrator') {
                            if (this.opportunityTypeValue == 'ALL') {
                                this.checkOportunityType = true;
                            }
                            else {
                                this.checkOportunityType = false;
                            }
                            this.Opportunitystages();
                        }
                    }
                }
            });
        }
    }
    Opportunitystages() {
        this.modalPresales =
            {
                StrStageName: this.selectedRpmStages,
                StrCustTypeId: this.customerTypeID,
                StrIndustry: this.industryPractiseID,
                StrGeography: this.geographyID,
                StrOpportunity: this.strOpportunity,
                IntFromDt: this.fromDate,
                IntToDt: this.toDate,
                StrTagging: this.unitStatusValue,
                StrCustomerName: this.strCustomerName,
                StrFilter: this.opportunityTypeValue,
                StrKey: this.keyDealInstance.StrKey,
                StrUserlogin: this.strUserId,
                intUnitID: this.unit
            };
        this.presalesService.GetOpportunityInbox(this.modalPresales).subscribe(data => {
            if (data != undefined) {
                this.opportunityList = data[0];
                if (this.opportunityList.length > 0) {
                    this.checkKeyDeals = false;
                    this.updateKeyDeals = false;
                    this.checkOpportunity1Condition = false;
                    this.stage0to8 = false;
                    this.table_bg = true;
                    this.table_bg1 = false;
                    this.TotalRecord1 = this.opportunityList.length;
                }
                else {
                    this.updateKeyDeals = true;
                    this.checkKeyDeals = false;
                    this.stage0to8 = true;
                    this.saveKey = true;
                    this.TotalRecord1 = 0;
                }
            }

        }, error => {
        
        });
        this.presalesService.GetOpportunityDetailsFilteredStage(this.modalPresales).subscribe(data => {
            if (data != undefined) {
                this.opportunityListFilteredStage = data;
                if (this.opportunityListFilteredStage.length > 0) {
                    this.stage9to12 = false;
                    this.table_bg2 = false;
                    this.table_bg3 = true;
                    this.TotalRecord2 = this.opportunityListFilteredStage.length;
                    this.checkOpportunity2Condition = true;
                }
                else {
                    this.stage9to12 = true;
                    this.TotalRecord2 = 0;
                    this.checkOpportunity2Condition = true;

                }

            }

      
        }, error =>{ throw error;},);
    }
    OnStatusChange(ObjOpportunity: any, eventobj: any) {
        let Status: string;
        let ObjOpportunityStatus: any;
        if (eventobj.target.checked == true) {
            Status = 'AC';
        }
        else {
            Status = 'IA';
        }
        ObjOpportunityStatus =
            {
                StrStatus: Status,
                StrOpportunityId: ObjOpportunity.StrOpportunityId,
                StrChangedBy: this.strUserId
            }
        this.presalesService.UpdateOpportunityStatus(ObjOpportunityStatus).subscribe(data => {
        });
    }
    onchangeUnits(eventUnit: any, Rowindex: number, ObjOpportunity: any) {

        this.messageType = '';
        let ObjOpportunityUnit: any;
        let UnitResult: number;
        ObjOpportunityUnit =
            {
                StrOpportunityId: ObjOpportunity.StrOpportunityId,
                UnitId: eventUnit.target.value,
                StrChangedBy: this.strUserId
            }
        this.presalesService.UpdateOpportunityUnit(ObjOpportunityUnit).subscribe(data => {
            UnitResult = data;
            if (UnitResult == 1) {
                if (eventUnit.target.value == 0) {
                    this.messages = ValidationMessage.LBL_OPPORTUNITY + ObjOpportunity.StrOpportunityId
                        + ValidationMessage.LBL_UNTAGGED;
                    this.messageType = ValidationMessage.LBL_MESSAGE_SUCCESS_TYPE;
                }
                else {
                    let ObjUnit: any;
                    let strUnitName: any;
                    ObjUnit = this.unitList.find(x => x.UnitID == eventUnit.target.value);
                    strUnitName = ObjUnit.UnitName;
                    if (eventUnit.target.value == 2) {
                        this.messages = ValidationMessage.LBL_OPPORTUNITY + ObjOpportunity.StrOpportunityId
                            + ValidationMessage.LBL_UNIT + strUnitName + '.' + ValidationMessage.REQ_CLUSTER_OPPORTUNTIY;
                        this.messageType = ValidationMessage.LBL_MESSAGE_SUCCESS_TYPE;
                    }
                    else {
                        this.messages = ValidationMessage.LBL_OPPORTUNITY
                            + ObjOpportunity.StrOpportunityId + ValidationMessage.LBL_UNIT + strUnitName;
                        this.messageType = ValidationMessage.LBL_MESSAGE_SUCCESS_TYPE;
                    }
                }
            }
        });
    }
    onchangeBusiness(eventBuiness: any, ObjOpportunity: any) {
        let ObjOpportunityUnit: any;
        let ResultBusiness: number;
        ObjOpportunityUnit =
            {
                StrOpportunityId: ObjOpportunity.StrOpportunityId,
                StrBusinessId: eventBuiness.target.value,
                StrChangedBy: this.strUserId
            }
        this.presalesService.UpdateOpportunityBusiness(ObjOpportunityUnit).subscribe(data => {
            let ObjCluster: any;
            let BusinessName: any;
            ObjCluster = this.clusterList.find(x => x.BusinessID == eventBuiness.target.value);
            BusinessName = ObjCluster.BusinessName;
            ResultBusiness = data;
            if (ResultBusiness == 1) {
                if (eventBuiness.target.value == 0) {
                    this.messages = ValidationMessage.LBL_OPPORTUNITY
                        + ObjOpportunity.StrOpportunityId + ValidationMessage.LBL_UNTAGGED;
                    this.messageType = ValidationMessage.LBL_MESSAGE_SUCCESS_TYPE;
                }
                else {
                    this.messages = ValidationMessage.LBL_OPPORTUNITY
                        + ObjOpportunity.StrOpportunityId + ValidationMessage.LBL_CLUSTER + BusinessName;
                    this.messageType = ValidationMessage.LBL_MESSAGE_SUCCESS_TYPE;
                }
            }
        });
    }

    NullEmptyCheck(inputtext: any): any {
        if (inputtext == null || inputtext == undefined || inputtext == '') {
            return '';
        }
        else {
            return inputtext;
        }
    }

    GetOpportunityPage() {
        this.messageType = "";
        let CheckDetails: IPresales[] = new Array();
        let CurrentStageList: IPresales[] = new Array();
        let CRMOpportunityDetail: IPresales[] = new Array();
        let CRMOppView: number;
        let strCurrentStage: string;
        let strCRMStage: string;
        //Added....
        let strStageId: string;
        let strIsCRMID: string;
        let strStake: string = this.strStake;
        this.presalesService.GetCurrentStage(this.strOpportunity.trim()).subscribe(data2 => {

            if (data2 != undefined) {
                CurrentStageList = data2;
            }

            if (CurrentStageList.length > 0) {
                strCurrentStage = CurrentStageList[0].StrStageID.toString();

                strStageId = strCurrentStage;
            }
            this.presalesService.GetCRMOppStageDetails(this.strOpportunity.trim()).subscribe(data3 => {
                if (data3 != undefined) {
                    CRMOpportunityDetail = data3;
                }
                if (CRMOpportunityDetail.length > 0) {
                    strCRMStage = CRMOpportunityDetail[0].StrSalesStage;
                    strCRMStage = strCRMStage.substring(0, 2);
                    strIsCRMID = 'CRM';
                }
                else {
                    strCRMStage = strCurrentStage;
                }
                if (strCurrentStage == '13') {
                   
                    this.router.navigate(['OnHold', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                }
                else {
                    if (strCRMStage == strCurrentStage) {
                        if (strStageId == '10' || strStageId == '11'
                            || strStageId == '12' || strStageId == '13') {
                            this.router.navigate(['OnHold', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                            
                        }
                        else if ((strStageId == '0')) {
                            this.router.navigate(['Stage0', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                           
                        }
                        else {
                            if (strStake.trim() == 'BD') {
                                if (strCRMStage == '1') {
                                    this.router.navigate(['Stage1', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                   
                                }
                                else if (strCRMStage == '2') {
                                    this.router.navigate(['Stage2', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                }
                                else if (strCRMStage == '3') {
                                    this.router.navigate(['Stage3', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                }
                                else if (strCRMStage == '4') {
                                    this.router.navigate(['Stage4', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                }
                                else if (strCRMStage == '5') {
                                    this.router.navigate(['Stage5', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                }
                                else if (strCRMStage == '6') {
                  this.router.navigate(['Stage6', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                }
                                else if (strCRMStage == '7') {
                                    this.router.navigate(['Stage7', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                }
                                else if (strCRMStage == '8') {
                                    this.router.navigate(['Stage8', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                }
                                else if (strCRMStage == '9') {
                                    this.router.navigate(['Stage9', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                }
                                else if (strStake.trim() == 'IT') {
                                    this.router.navigate(['Stages', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                }
                                
                            }

                        }

                    }
                    else {
                        let objCreateNewOpportunity: any;
                        let Stakeholdopportunity: INewOpportunity[] = new Array();
                        let dstGoResult: string;
                        if (strIsCRMID == 'CRM') {
                            objCreateNewOpportunity =
                                {
                                    OpportunityId: this.strOpportunity.trim(),
                                    EmpId: 'CRM',
                                    CurrentStageID: strCurrentStage,
                                    NextStageID: strCRMStage,
                                }
                        }
                        else {
                            objCreateNewOpportunity =
                                {
                                    OpportunityId: this.strOpportunity.trim(),
                                    EmpId: this.strUserId,
                                    CurrentStageID: strCurrentStage,
                                    NextStageID: strCRMStage,
                                }
                        }
                        this.presalesService.ProceedNextStage(objCreateNewOpportunity).subscribe(data10 => {
                            dstGoResult = '';
                            if (data10 != undefined) {
                                Stakeholdopportunity = data10;
                            }
                            if (Stakeholdopportunity.length > 0) {
                                dstGoResult = Stakeholdopportunity[0].StakeHolder;
                            }
                            if (strCurrentStage == '0' || strCurrentStage == '1' ||
                                strCurrentStage == '2' || strCurrentStage == '3' || dstGoResult == '1') {
                                if (strCRMStage == '10' || strCRMStage == '11' || strCRMStage == '12' || strCRMStage == '13') {
                                    this.router.navigate(['OnHold', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);

                                }
                                else if (strCRMStage == '0') {
                                    this.router.navigate(['Stage0', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                }
                                else {
                                    if (strStake.trim() == 'BD') {
                                        if (strCRMStage == '1') {
                                            this.router.navigate(['Stage1', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                        }
                                        else if (strCRMStage == '2') {
                                            this.router.navigate(['Stage2', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                        }
                                        else if (strCRMStage == '3') {
                                            this.router.navigate(['Stage3', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                        }
                                        else if (strCRMStage == '4') {
                                            this.router.navigate(['Stage4', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                        }
                                        else if (strCRMStage == '5') {
                                            this.router.navigate(['Stage5', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                          
                                        }
                                        else if (strCRMStage == '6') {
                      this.router.navigate(['Stage6', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                        }
                                        else if (strCRMStage == '7') {
                                            this.router.navigate(['Stage7', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                        }
                                        else if (strCRMStage == '8') {
                                            this.router.navigate(['Stage8', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                        }
                                        else if (strCRMStage == '9') {
                                            this.router.navigate(['Stage9', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                        }
                                    }
                                    else if (strStake.trim() == 'IT') {
                                        this.router.navigate(['Stages', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                     
                                    }
                                }
                            }
                            else {
                                if (Stakeholdopportunity.length > 0) {
                                    if (strStageId == '10' || strStageId == '11'
                                        || strStageId == '12' || strStageId == '13') {
                                        this.router.navigate(['OnHold', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                       
                                    }
                                    else if (strStageId == '0') {
                                        this.router.navigate(['Stage0', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                        
                                    }
                                    else {
                                        if (strStake.trim() == 'BD') {

                                            if (strStageId == '1') {
                                                this.router.navigate(['Stage1', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                
                                            }
                                            else if (strStageId == '2') {
                                                this.router.navigate(['Stage2', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                               
                                            }
                                            else if (strStageId == '3') {
                                                this.router.navigate(['Stage3', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                               
                                            }
                                            else if (strStageId == '4') {
                                                this.router.navigate(['Stage4', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                               
                                            }
                                            else if (strStageId == '5') {
                                                this.router.navigate(['Stage5', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                
                                            }
                                            else if (strStageId == '6') {
                        this.router.navigate(['Stage6', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                               
                                            }
                                            else if (strStageId == '7') {
                                                this.router.navigate(['Stage7', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                               
                                            }
                                            else if (strStageId == '8') {
                                                this.router.navigate(['Stage8', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                
                                            }
                                            else if (strStageId == '9') {
                                                this.router.navigate(['Stage9', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                               
                                            }
                                        }
                                        else if (strStake.trim() == 'IT') {
                                            this.router.navigate(['Stages', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                            
                                        }
                                    }
                                }
                                else {
                                    objCreateNewOpportunity =
                                        {
                                            OpportunityId: this.strOpportunity.trim(),
                                            EmpId: this.strUserId,
                                            CurrentStageID: strCurrentStage,
                                            NextStageID: strCRMStage,
                                        }
                                    this.presalesService.UpdateOpportunityStage(objCreateNewOpportunity).subscribe(data6 => {
                                    });
                                    if (strCRMStage == '10' || strCRMStage == '11' || strCRMStage == '12' || strCRMStage == '13') {
                                        this.router.navigate(['OnHold', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable"))  }]);
                                        
                                    }
                                    else if (strCRMStage == '0') {
                                        this.router.navigate(['Stage0', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                       
                                    }
                                    else {
                                        if (strStake.trim() == 'BD') {
                                            if (strCRMStage == '1') {
                                                this.router.navigate(['Stage1', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                               
                                            }
                                            else if (strCRMStage == '2') {
                                                this.router.navigate(['Stage2', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                               
                                            }
                                            else if (strCRMStage == '3') {
                                                this.router.navigate(['Stage3', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                
                                            }
                                            else if (strCRMStage == '4') {
                                                this.router.navigate(['Stage4', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                               
                                            }
                                            else if (strCRMStage == '5') {
                                                this.router.navigate(['Stage5', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                
                                            }
                                            else if (strCRMStage == '6') {
                        this.router.navigate(['Stage6', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                
                                            }
                                            else if (strCRMStage == '7') {
                                                this.router.navigate(['Stage7', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                               
                                            }
                                            else if (strCRMStage == '8') {
                                                this.router.navigate(['Stage8', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                               
                                            }
                                            else if (strCRMStage == '9') {
                                                this.router.navigate(['Stage9', { strOppId: (btoa(this.strOpportunity.trim())), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                               
                                            }
                                        }
                                        else if (strStake.trim() == 'IT') {
                                            
                                        }
                                    }
                                }
                            }



                        });
                    }

                }
            });
        });
    }
    GrvOppDetailsRowClick(ObjOpportunity: any) {
        this.messageType = "";
        let CheckDetails: IPresales[] = new Array();
        let CurrentStageList: IPresales[] = new Array();
        let CRMOpportunityDetail: IPresales[] = new Array();
        let CRMOppView: number;
        let strCurrentStage: string;
        let strCRMStage: string;
        let strIsCRMID: string;
        let strStake: string = this.strStake;
        this.presalesService.CheckAllOppDetails(ObjOpportunity.StrOpportunityId).subscribe(data => {
            CheckDetails = data;
            if (CheckDetails.length > 0) {
                if (this.strRole == 'Administrator') {
                    if (ObjOpportunity.UnitId == '0') {
                        this.messages = ValidationMessage.REQ_TAGOPPORTUNITY + ObjOpportunity.StrOpportunityId + ValidationMessage.REQ_UNITFURTHER;
                        this.messageType = "Danger";
                    }
                    else {
                        if (ObjOpportunity.StrOppView == 'No') {
                            this.presalesService.UpdateCRMOppViewed(ObjOpportunity.StrOpportunityId).subscribe(data1 => {
                                CRMOppView = data1;
                            });
                        }
                        this.presalesService.GetCurrentStage(ObjOpportunity.StrOpportunityId).subscribe(data2 => {
                            if (data2 != undefined) {
                                CurrentStageList = data2;
                            }
                            if (CurrentStageList.length > 0) {
                                
                                strCurrentStage = CurrentStageList[0].StrStageID.toString();

                            }
                            this.presalesService.GetCRMOppStageDetails(ObjOpportunity.StrOpportunityId).subscribe(data3 => {
                                if (data3 != undefined) {
                                    CRMOpportunityDetail = data3;
                                }
                                if (CRMOpportunityDetail.length > 0) {
                                    strCRMStage = CRMOpportunityDetail[0].StrSalesStage;
                                    strCRMStage = strCRMStage.substring(0, 2);
                                    strIsCRMID = 'CRM';
                                }
                                else {
                                    strCRMStage = strCurrentStage;
                                }
                                if (strCurrentStage == '13') {
                                   
                                    this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                }
                                else {
                                    if (strCRMStage == strCurrentStage) {
                                        if (ObjOpportunity.RpmStageID == '10' || ObjOpportunity.RpmStageID == '11'
                                            || ObjOpportunity.RpmStageID == '12' || ObjOpportunity.RpmStageID == '13') {
                                            this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                            
                                        }
                                        else if ((ObjOpportunity.RpmStageID == '0')) {
                                            this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                           
                                        }
                                        else {
                                            if (strStake.trim() == 'BD') {
                                                if (strCRMStage == '1') {
                                                    this.router.navigate(['Stage1', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                }
                                                else if (strCRMStage == '2') {
                                                    this.router.navigate(['Stage2', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                  
                                                }
                                                else if (strCRMStage == '3') {
                                                    this.router.navigate(['Stage3', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                    
                                                }
                                                else if (strCRMStage == '4') {
                                                    this.router.navigate(['Stage4', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                  
                                                }
                                                else if (strCRMStage == '5') {
                                                    this.router.navigate(['Stage5', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                }
                                                else if (strCRMStage == '6') {
                          this.router.navigate(['Stage6', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                  
                                                }
                                                else if (strCRMStage == '7') {
                                                    this.router.navigate(['Stage7', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                }
                                                else if (strCRMStage == '8') {
                                                    this.router.navigate(['Stage8', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                }
                                                else if (strCRMStage == '9') {
                                                    this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                   
                                                }
                                                else if (strStake.trim() == 'IT') {
                                                    this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                   
                                                }
                                               
                                            }
                                        }
                                    }
                                    else {
                                        let objCreateNewOpportunity: any;
                                        let Stakeholdopportunity: INewOpportunity[] = new Array();
                                        let dstGoResult: string;
                                        if (strIsCRMID == 'CRM') {
                                            objCreateNewOpportunity =
                                                {
                                                    OpportunityId: ObjOpportunity.StrOpportunityId,
                                                    EmpId: 'CRM',
                                                    CurrentStageID: strCurrentStage,
                                                    NextStageID: strCRMStage,
                                                }
                                        }
                                        else {
                                            objCreateNewOpportunity =
                                                {
                                                    OpportunityId: ObjOpportunity.StrOpportunityId,
                                                    EmpId: this.strUserId,
                                                    CurrentStageID: strCurrentStage,
                                                    NextStageID: strCRMStage,
                                                }
                                        }
                                        this.presalesService.ProceedNextStage(objCreateNewOpportunity).subscribe(data10 => {
                                            dstGoResult = '';
                                            if (data10 != undefined) {
                                                Stakeholdopportunity = data10;
                                            }
                                            if (Stakeholdopportunity.length > 0) {
                                                dstGoResult = Stakeholdopportunity[0].StakeHolder;
                                            }
                                            if (strCurrentStage == '0' || strCurrentStage == '1' ||
                                                strCurrentStage == '2' || strCurrentStage == '3' || dstGoResult == '1') {
                                                if (strCRMStage == '10' || strCRMStage == '11' || strCRMStage == '12' || strCRMStage == '13') {
                                                    this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);

                                                }
                                                else if (strCRMStage == '0') {
                                                    this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                }
                                                else {
                                                    if (strStake.trim() == 'BD') {
                                                        if (strCRMStage == '1') {
                                                            this.router.navigate(['Stage1', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                           
                                                        }
                                                        else if (strCRMStage == '2') {
                                                            this.router.navigate(['Stage2', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                            
                                                        }
                                                        else if (strCRMStage == '3') {
                                                            this.router.navigate(['Stage3', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                            
                                                        }
                                                        else if (strCRMStage == '4') {


                                                            this.router.navigate(['Stage4', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                            
                                                        }
                                                        else if (strCRMStage == '5') {
                                                            this.router.navigate(['Stage5', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                           
                                                        }
                                                        else if (strCRMStage == '6') {
                              this.router.navigate(['Stage6', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                            
                                                        }
                                                        else if (strCRMStage == '7') {
                                                            this.router.navigate(['Stage7', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                           
                                                        }
                                                        else if (strCRMStage == '8') {
                                                            this.router.navigate(['Stage8', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                            
                                                        }
                                                        else if (strCRMStage == '9') {
                                                            this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                           
                                                        }
                                                    }
                                                    else if (strStake.trim() == 'IT') {
                                                        this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                       
                                                    }
                                                }
                                            }
                                            else {
                                                if (Stakeholdopportunity.length > 0) {
                                                    if (ObjOpportunity.RpmStageID == '10' || ObjOpportunity.RpmStageID == '11'
                                                        || ObjOpportunity.RpmStageID == '12' || ObjOpportunity.RpmStageID == '13') {
                                                        this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                                       
                                                    }
                                                    else if (ObjOpportunity.RpmStageID == '0') {
                                                        this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                        
                                                    }
                                                    else {
                                                        if (strStake.trim() == 'BD') {

                                                            if (ObjOpportunity.RpmStageID == '1') {
                                                                this.router.navigate(['Stage1', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '2') {
                                                                this.router.navigate(['Stage2', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '3') {
                                                                this.router.navigate(['Stage3', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '4') {
                                                                this.router.navigate(['Stage4', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '5') {
                                                                this.router.navigate(['Stage5', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                               
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '6') {
                                this.router.navigate(['Stage6', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                               
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '7') {
                                                                this.router.navigate(['Stage7', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '8') {
                                                                this.router.navigate(['Stage8', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '9') {
                                                                this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                
                                                            }
                                                        }
                                                        else if (strStake.trim() == 'IT') {
                                                            this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                    }
                                                }
                                                else {
                                                    objCreateNewOpportunity =
                                                        {
                                                            OpportunityId: ObjOpportunity.StrOpportunityId,
                                                            EmpId: this.strUserId,
                                                            CurrentStageID: strCurrentStage,
                                                            NextStageID: strCRMStage,
                                                        }
                                                    this.presalesService.UpdateOpportunityStage(objCreateNewOpportunity).subscribe(data6 => {
                                                    });
                                                    if (strCRMStage == '10' || strCRMStage == '11' || strCRMStage == '12' || strCRMStage == '13') {
                                                        this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable"))  }]);
                                                        
                                                    }
                                                    else if (strCRMStage == '0') {
                                                        this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                        
                                                    }
                                                    else {
                                                        if (strStake.trim() == 'BD') {
                                                            if (strCRMStage == '1') {
                                                                this.router.navigate(['Stage1', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '2') {
                                                                this.router.navigate(['Stage2', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '3') {
                                                                this.router.navigate(['Stage3', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                
                                                            }
                                                            else if (strCRMStage == '4') {
                                                                this.router.navigate(['Stage4', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                
                                                            }
                                                            else if (strCRMStage == '5') {
                                                                this.router.navigate(['Stage5', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                
                                                            }
                                                            else if (strCRMStage == '6') {
                                this.router.navigate(['Stage6', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                
                                                            }
                                                            else if (strCRMStage == '7') {
                                                                this.router.navigate(['Stage7', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                               
                                                            }
                                                            else if (strCRMStage == '8') {
                                                                this.router.navigate(['Stage8', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                            }
                                                            else if (strCRMStage == '9') {
                                                                this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                
                                                            }
                                                        }
                                                        else if (strStake.trim() == 'IT') {
                                                            
                                                        }
                                                    }
                                                }
                                            }
                                        });
                                    }
                                }
                            });
                        });
                    }
                }
                else {
                    let UserLogin: string;
                    UserLogin = this.strUserId;
                    if (CheckDetails[0].StrDealOwner1 != UserLogin && CheckDetails[0].StrValueBps != UserLogin &&
                        CheckDetails[0].StrGeoSalesOwner != UserLogin && CheckDetails[0].StrAccountSalesOnwer != UserLogin
                        && CheckDetails[0].StrOnsiteOnwer != UserLogin && CheckDetails[0].StrTMSOLEmpNO != UserLogin
                        && CheckDetails[0].StrOffshoreBDLead != UserLogin && CheckDetails[0].StrDealOwner2 != UserLogin) {
                        this.messages = ValidationMessage.ERR_NOTAUTHORISED_VIEW_EDIT + ObjOpportunity.StrOpportunityId;
                        this.messageType = "Danger";
                        
                    }
                    else {
                        if (ObjOpportunity.UnitId == '0') {
                            this.messages = ValidationMessage.REQ_TAGOPPORTUNITY + ObjOpportunity.StrOpportunityId + ValidationMessage.REQ_UNITFURTHER;
                            this.messageType = "Danger";
                        }
                        else {
                            if (ObjOpportunity.StrOppView == 'No') {
                                this.presalesService.UpdateCRMOppViewed(ObjOpportunity.StrOpportunityId).subscribe(data1 => {
                                    CRMOppView = data1;
                                });
                            }
                            this.presalesService.GetCurrentStage(ObjOpportunity.StrOpportunityId).subscribe(data2 => {
                                if (data2 != undefined) {
                                    CurrentStageList = data2;
                                }
                                if (CurrentStageList.length > 0) {
                                   
                                    strCurrentStage = CurrentStageList[0].StrStageID.toString();

                                }
                                this.presalesService.GetCRMOppStageDetails(ObjOpportunity.StrOpportunityId)
                                    .subscribe(data3 => {
                                        if (data3 != undefined) {
                                            CRMOpportunityDetail = data3;
                                        }
                                        if (CRMOpportunityDetail.length > 0) {
                                            strCRMStage = CRMOpportunityDetail[0].StrSalesStage;
                                            strCRMStage = strCRMStage.substring(0, 2);
                                            strIsCRMID = 'CRM';
                                        }
                                        else {
                                            strCRMStage = strCurrentStage;
                                        }
                                        if (strCurrentStage == '13') {
                                            this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                           
                                        }
                                        else {
                                            if (strCRMStage == strCurrentStage) {
                                                if (ObjOpportunity.RpmStageID == '10' || ObjOpportunity.RpmStageID == '11'
                                                    || ObjOpportunity.RpmStageID == '12' || ObjOpportunity.RpmStageID == '13') {
                                                    this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                                   
                                                }
                                                else if (ObjOpportunity.RpmStageID == '0') {
                                                    this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                }
                                                else {
                                                    if (strStake.trim() == 'BD') {
                                                        if (strCRMStage == '1') {
                                                            this.router.navigate(['Stage1', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                        else if (strCRMStage == '2') {
                                                            this.router.navigate(['Stage2', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                        else if (strCRMStage == '3') {
                                                            this.router.navigate(['Stage3', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                        else if (strCRMStage == '4') {
                                                            this.router.navigate(['Stage4', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                        else if (strCRMStage == '5') {
                                                            this.router.navigate(['Stage5', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                        else if (strCRMStage == '6') {
                                                            this.router.navigate(['Stage6', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                        else if (strCRMStage == '7') {
                                                            this.router.navigate(['Stage7', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                        else if (strCRMStage == '8') {
                                                            this.router.navigate(['Stage8', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                        else if (strCRMStage == '9') {
                                                            this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                    }
                                                    else if (strStake.trim() == 'IT') {
                                                        this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                        
                                                    }
                                                   
                                                }
                                            }
                                            else {
                                                let objCreateNewOpportunity: any;
                                                let Stakeholdopportunity: INewOpportunity[] = new Array();
                                                let dstGoResult: string;
                                                if (strIsCRMID == 'CRM') {
                                                    objCreateNewOpportunity =
                                                        {
                                                            OpportunityId: ObjOpportunity.StrOpportunityId,
                                                            EmpId: 'CRM',
                                                            CurrentStageID: strCurrentStage,
                                                            NextStageID: strCRMStage,
                                                        }
                                                }
                                                else {
                                                    objCreateNewOpportunity =
                                                        {
                                                            OpportunityId: ObjOpportunity.StrOpportunityId,
                                                            EmpId: this.strUserId,
                                                            CurrentStageID: strCurrentStage,
                                                            NextStageID: strCRMStage,
                                                        }
                                                }
                                                this.presalesService.ProceedNextStage(objCreateNewOpportunity).subscribe(data10 => {
                                                    Stakeholdopportunity = data10;
                                                    dstGoResult = Stakeholdopportunity[0].StakeHolder;
                                                    if (strCurrentStage == '0' || strCurrentStage == '1' || strCurrentStage == '2' || strCurrentStage == '3' ||
                                                        dstGoResult == '1') {
                                                        if (strCRMStage == '10' || strCRMStage == '11' || strCRMStage == '12' || strCRMStage == '13') {
                                                            this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                                            
                                                        }
                                                        else if (strCRMStage == '0') {
                                                            this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                        else {
                                                            if (strStake.trim() == 'BD') {
                                                                if (strCRMStage == '1') {
                                                                    this.router.navigate(['Stage1', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (strCRMStage == '2') {
                                                                    this.router.navigate(['Stage2', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (strCRMStage == '3') {
                                                                    this.router.navigate(['Stage3', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (strCRMStage == '4') {
                                                                    this.router.navigate(['Stage4', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (strCRMStage == '5') {
                                                                    this.router.navigate(['Stage5', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                   
                                                                }
                                                                else if (strCRMStage == '6') {
                                                                    this.router.navigate(['Stage6', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (strCRMStage == '7') {
                                                                    this.router.navigate(['Stage7', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (strCRMStage == '8') {
                                                                    this.router.navigate(['Stage8', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                   
                                                                }
                                                                else if (strCRMStage == '9') {
                                                                    this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                            }
                                                            else if (strStake.trim() == 'IT') {
                                                                this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        if (Stakeholdopportunity.length > 0) {
                                                            if (ObjOpportunity.RpmStageID == '10' || ObjOpportunity.RpmStageID == '11'
                                                                || ObjOpportunity.RpmStageID == '12' || ObjOpportunity.RpmStageID == '13') {
                                                                this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                                                
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '0') {
                                                                this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                               
                                                            }
                                                            else {
                                                                if (strStake.trim() == 'BD') {
                                                                    if (ObjOpportunity.RpmStageID == '1') {
                                                                        this.router.navigate(['Stage1', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                       
                                                                    }
                                                                    else if (ObjOpportunity.RpmStageID == '2') {
                                                                        this.router.navigate(['Stage2', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                        
                                                                    }
                                                                    else if (ObjOpportunity.RpmStageID == '3') {
                                                                        this.router.navigate(['Stage3', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                        
                                                                    }
                                                                    else if (ObjOpportunity.RpmStageID == '4') {
                                                                        this.router.navigate(['Stage4', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                        
                                                                    }
                                                                    else if (ObjOpportunity.RpmStageID == '5') {
                                                                        this.router.navigate(['Stage5', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                        
                                                                    }
                                                                    else if (ObjOpportunity.RpmStageID == '6') {
                                                                        this.router.navigate(['Stage6', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                       
                                                                    }
                                                                    else if (ObjOpportunity.RpmStageID == '7') {
                                                                        this.router.navigate(['Stage7', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                       
                                                                    }
                                                                    else if (ObjOpportunity.RpmStageID == '8') {
                                                                        this.router.navigate(['Stage8', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                        
                                                                    }
                                                                    else if (ObjOpportunity.RpmStageID == '9') {
                                                                        this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                       
                                                                    }
                                                                }
                                                                else if (strStake.trim() == 'IT') {
                                                                    this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                            }
                                                        }
                                                        else {
                                                            objCreateNewOpportunity =
                                                                {
                                                                    OpportunityId: ObjOpportunity.StrOpportunityId,
                                                                    EmpId: this.strUserId,
                                                                    CurrentStageID: strCurrentStage,
                                                                    NextStageID: strCRMStage,
                                                                }
                                                            this.presalesService.UpdateOpportunityStage(objCreateNewOpportunity).subscribe(data6 => {
                                                            });
                                                            if (strCRMStage == '10' || strCRMStage == '11' || strCRMStage == '12' || strCRMStage == '13') {
                                                               

                                                                this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                                            }
                                                            else if (strCRMStage == '0') {
                                                                this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                               

                                                            }
                                                            else {
                                                                if (strStake.trim() == 'BD') {
                                                                    if (strCRMStage == '1') {
                                                                        this.router.navigate(['Stage1', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                       
                                                                    }
                                                                    else if (strCRMStage == '2') {
                                                                        this.router.navigate(['Stage2', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                        
                                                                    }
                                                                    else if (strCRMStage == '3') {
                                                                        this.router.navigate(['Stage3', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                        
                                                                    }
                                                                    else if (strCRMStage == '4') {
                                                                        this.router.navigate(['Stage4', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                        
                                                                    }
                                                                    else if (strCRMStage == '5') {
                                                                        this.router.navigate(['Stage5', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                        
                                                                    }
                                                                    else if (strCRMStage == '6') {
                                    this.router.navigate(['Stage6', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                       
                                                                    }
                                                                    else if (strCRMStage == '7') {
                                                                        this.router.navigate(['Stage7', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                       
                                                                    }
                                                                    else if (strCRMStage == '8') {
                                                                        this.router.navigate(['Stage8', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                       
                                                                    }
                                                                    else if (strCRMStage == '9') {
                                                                        this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                       
                                                                    }
                                                                }
                                                                else if (strStake.trim() == 'IT') {
                                                                    this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                            }
                                                        }
                                                    }
                                                });
                                            }
                                        }
                                    });
                            });
                        }
                    }
                }
            }
        });
    }
    GrvOpportunityRowClick(ObjOpportunity: any) {
        this.messageType = "";
        let CheckDetails: IPresales[] = new Array();
        let CurrentStageList: IPresales[] = new Array();
        let CRMOpportunityDetail: IPresales[] = new Array();
        let CRMOppView: number;
        let strCurrentStage: string;
        let strCRMStage: string;
        let strIsCRMID: string;
        let strStake: string = this.strStake;
        this.presalesService.CheckAllOppDetails(ObjOpportunity.StrOpportunityId).subscribe(data => {
            CheckDetails = data;
            if (CheckDetails.length > 0) {
                if (this.strRole == 'Administrator') {
                    if (ObjOpportunity.UnitId == '0') {
                        this.messages = ValidationMessage.REQ_TAGOPPORTUNITY + ObjOpportunity.StrOpportunityId + ValidationMessage.REQ_UNITFURTHER;
                        this.messageType = "Danger";
                    }
                    else {
                        if (ObjOpportunity.StrOppView == 'No') {
                            this.presalesService.UpdateCRMOppViewed(ObjOpportunity.StrOpportunityId).subscribe(data1 => {
                                CRMOppView = data1;
                            });
                        }
                        this.presalesService.GetCurrentStage(ObjOpportunity.StrOpportunityId).subscribe(data2 => {
                            if (data2 != undefined) {
                                CurrentStageList = data2;
                            }
                            if (CurrentStageList.length > 0) {
                               
                                strCurrentStage = CurrentStageList[0].StrStageID.toString();

                            }
                            this.presalesService.GetCRMOppStageDetails(ObjOpportunity.StrOpportunityId).subscribe(data3 => {
                                if (data3 != undefined) {
                                    CRMOpportunityDetail = data3;
                                }
                                if (CRMOpportunityDetail.length > 0) {
                                    strCRMStage = CRMOpportunityDetail[0].StrSalesStage;
                                    strCRMStage = strCRMStage.substring(0, 2);
                                    strIsCRMID = 'CRM';
                                }
                                else {
                                    strCRMStage = strCurrentStage;
                                }
                                if (strCurrentStage == '13') {
                                    
                                    this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                }
                                else {
                                    if (strCRMStage == strCurrentStage) {
                                        if (ObjOpportunity.RpmStageID == '10' || ObjOpportunity.RpmStageID == '11'
                                            || ObjOpportunity.RpmStageID == '12' || ObjOpportunity.RpmStageID == '13') {
                                            
                                            this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);

                                        }
                                        else {
                                            if (strStake.trim() == 'BD') {
                                                if (strCRMStage == '9') {
                                                    this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                   
                                                }
                                            }
                                            else if (strStake.trim() == 'IT') {
                                                this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                               
                                            }
                                            
                                        }
                                    }
                                    else {
                                        let objCreateNewOpportunity: any;
                                        let Stakeholdopportunity: INewOpportunity[] = new Array();
                                        let dstGoResult: string;
                                        if (strIsCRMID == 'CRM') {
                                            objCreateNewOpportunity =
                                                {
                                                    OpportunityId: ObjOpportunity.StrOpportunityId,
                                                    EmpId: 'CRM',
                                                    CurrentStageID: strCurrentStage,
                                                    NextStageID: strCRMStage,
                                                }
                                        }
                                        else {
                                            objCreateNewOpportunity =
                                                {
                                                    OpportunityId: ObjOpportunity.StrOpportunityId,
                                                    EmpId: this.strUserId,
                                                    CurrentStageID: strCurrentStage,
                                                    NextStageID: strCRMStage,
                                                }
                                        }
                                        this.presalesService.ProceedNextStage(objCreateNewOpportunity).subscribe(data10 => {
                                            let dstGoResult: any[] = new Array();
                                            if (data10 != undefined) {
                                                dstGoResult = data10;
                                            }
                                            if (dstGoResult.length > 0) {
                                                if (ObjOpportunity.RpmStageID == '10' || ObjOpportunity.RpmStageID == '11'
                                                    || ObjOpportunity.RpmStageID == '12' || ObjOpportunity.RpmStageID == '13') {
                                                    this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);

                                                    
                                                }
                                                else {
                                                    if (strStake.trim() == 'BD') {
                                                        if (strCRMStage == '9') {
                                                            this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                           
                                                        }
                                                    }
                                                    else if (strStake.trim() == 'IT') {
                                                        this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                        
                                                    }
                                                }
                                            }
                                            else {
                                                objCreateNewOpportunity =
                                                    {
                                                        OpportunityId: ObjOpportunity.StrOpportunityId,
                                                        EmpId: this.strUserId,
                                                        CurrentStageID: strCurrentStage,
                                                        NextStageID: strCRMStage,
                                                    }
                                                this.presalesService.UpdateOpportunityStage(objCreateNewOpportunity).subscribe(data6 => {
                                                });
                                                if (strCRMStage == '10' || strCRMStage == '11' || strCRMStage == '12' || strCRMStage == '13') {
                                                    this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);

                                                   
                                                }
                                                else {
                                                    if (strStake.trim() == 'BD') {
                                                        if (strCRMStage == '9') {
                                                            this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                           
                                                        }
                                                    }
                                                    else if (strStake.trim() == 'IT') {
                                                        this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                        
                                                    }
                                                }
                                            }
                                        });
                                    }
                                }
                            });
                        });
                    }
                }
                else {
                    let UserLogin: string;
                    UserLogin = this.strUserId;
                    if (CheckDetails[0].StrDealOwner1 != UserLogin && CheckDetails[0].StrValueBps != UserLogin &&
                        CheckDetails[0].StrGeoSalesOwner != UserLogin && CheckDetails[0].StrAccountSalesOnwer != UserLogin
                        && CheckDetails[0].StrOnsiteOnwer != UserLogin && CheckDetails[0].StrTMSOLEmpNO != UserLogin
                        && CheckDetails[0].StrOffshoreBDLead != UserLogin && CheckDetails[0].StrDealOwner2 != UserLogin) {
                        this.messages = ValidationMessage.ERR_NOTAUTHORISED + ObjOpportunity.StrOpportunityId + " to a Unit to proceed further";
                        this.messageType = "Danger";
                        
                    }
                    else {
                        if (ObjOpportunity.UnitId == '0') {
                            this.messages = ValidationMessage.REQ_TAGOPPORTUNITY + ObjOpportunity.StrOpportunityId + ValidationMessage.REQ_UNITFURTHER;
                            this.messageType = "Danger";
                        }
                        else {
                            if (ObjOpportunity.StrOppView == 'No') {
                                this.presalesService.UpdateCRMOppViewed(ObjOpportunity.StrOpportunityId).subscribe(data1 => {
                                    CRMOppView = data1;
                                });
                            }
                            this.presalesService.GetCurrentStage(ObjOpportunity.StrOpportunityId).subscribe(data2 => {
                                if (data2 != undefined) {
                                    CurrentStageList = data2;
                                }
                                if (CurrentStageList.length > 0) {
                                    
                                    strCurrentStage = CurrentStageList[0].StrStageID.toString();

                                }
                                this.presalesService.GetCRMOppStageDetails(ObjOpportunity.StrOpportunityId).subscribe(data3 => {
                                    if (data3 != undefined) {
                                        CRMOpportunityDetail = data3;
                                    }
                                    if (CRMOpportunityDetail.length > 0) {
                                        strCRMStage = CRMOpportunityDetail[0].StrSalesStage;
                                        strCRMStage = strCRMStage.substring(0, 2);
                                        strIsCRMID = 'CRM';
                                    }
                                    else {
                                        strCRMStage = strCurrentStage;
                                    }
                                    if (strCurrentStage == '13') {
                                        this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                        
                                    }
                                    else {
                                        if (strCRMStage == strCurrentStage) {
                                            if (ObjOpportunity.RpmStageID == '10' || ObjOpportunity.RpmStageID == '11'
                                                || ObjOpportunity.RpmStageID == '12' || ObjOpportunity.RpmStageID == '13') {
                                                this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);

                                               
                                            }
                                            else {
                                                if (strStake.trim() == 'BD') {
                                                    if (strCRMStage == '9') {
                                                        this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                        
                                                    }
                                                }
                                                else if (strStake.trim() == 'IT') {
                                                    this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                    
                                                }
                                                
                                            }
                                        }
                                        else {
                                            let objCreateNewOpportunity: any;
                                            let Stakeholdopportunity: INewOpportunity[] = new Array();
                                            let dstGoResult: string;
                                            if (strIsCRMID == 'CRM') {
                                                objCreateNewOpportunity =
                                                    {
                                                        OpportunityId: ObjOpportunity.StrOpportunityId,
                                                        EmpId: 'CRM',
                                                        CurrentStageID: strCurrentStage,
                                                        NextStageID: strCRMStage,
                                                    }
                                            }
                                            else {
                                                objCreateNewOpportunity =
                                                    {
                                                        OpportunityId: ObjOpportunity.StrOpportunityId,
                                                        EmpId: this.strUserId,
                                                        CurrentStageID: strCurrentStage,
                                                        NextStageID: strCRMStage,
                                                    }
                                            }
                                            this.presalesService.ProceedNextStage(objCreateNewOpportunity).subscribe(data10 => {
                                                let dstGoResult: any[] = new Array();
                                                if (data10 != undefined) {
                                                    dstGoResult = data10;
                                                }
                                                if (dstGoResult.length > 0) {
                                                    if (ObjOpportunity.RpmStageID == '10' || ObjOpportunity.RpmStageID == '11'
                                                        || ObjOpportunity.RpmStageID == '12' || ObjOpportunity.RpmStageID == '13') {
                                                        this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                                       
                                                    }
                                                    else {
                                                        if (strStake.trim() == 'BD') {
                                                            if (strCRMStage == '9') {
                                                                this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                
                                                            }
                                                        }
                                                        else if (strStake.trim() == 'IT') {
                                                            this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                          
                                                        }
                                                    }
                                                }
                                                else {
                                                    objCreateNewOpportunity =
                                                        {
                                                            OpportunityId: ObjOpportunity.StrOpportunityId,
                                                            EmpId: this.strUserId,
                                                            CurrentStageID: strCurrentStage,
                                                            NextStageID: strCRMStage,
                                                        }
                                                    this.presalesService.UpdateOpportunityStage(objCreateNewOpportunity).subscribe(data6 => {
                                                    });
                                                    if (strCRMStage == '10' || strCRMStage == '11' ||
                                                        strCRMStage == '12' || strCRMStage == '13') {
                                                        this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);

                                                        
                                                    }
                                                    else {
                                                        if (strStake.trim() == 'BD') {
                                                            if (strCRMStage == '9') {
                                                                this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                
                                                            }
                                                        }
                                                        else if (strStake.trim() == 'IT') {
                                                            this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                           
                                                        }
                                                    }
                                                }
                                            });
                                        }
                                    }
                                });
                            });
                        }
                    }
                }
            }
        });
    }
    KeyClick(ObjOpportunity: any) {
        this.messageType = "";
        let CheckDetails: IPresales[] = new Array();
        let CurrentStageList: IPresales[] = new Array();
        let CRMOpportunityDetail: IPresales[] = new Array();
        let CRMOppView: number;
        let strCurrentStage: string;
        let strCRMStage: string;
        let strIsCRMID: string;
        let strStake: string = this.strStake;
        this.presalesService.CheckAllOppDetails(ObjOpportunity.StrOpportunityId).subscribe(data => {
            CheckDetails = data;
            if (CheckDetails.length > 0) {
                if (this.strRole == 'Administrator') {
                    if (ObjOpportunity.UnitId == '0') {
                        this.messages = ValidationMessage.REQ_TAGOPPORTUNITY + ObjOpportunity.StrOpportunityId + ValidationMessage.REQ_UNITFURTHER;
                        this.messageType = "Danger";
                    }
                    else {
                        if (ObjOpportunity.StrOppView == 'No') {
                            this.presalesService.UpdateCRMOppViewed(ObjOpportunity.StrOpportunityId).subscribe(data1 => {
                                CRMOppView = data1;
                            });
                        }
                        this.presalesService.GetCurrentStage(ObjOpportunity.StrOpportunityId).subscribe(data2 => {
                            if (data2 != undefined) {
                                CurrentStageList = data2;
                            }
                            if (CurrentStageList.length > 0) {
                                
                                strCurrentStage = CurrentStageList[0].StrStageID.toString();

                            }
                            this.presalesService.GetCRMOppStageDetails(ObjOpportunity.StrOpportunityId).subscribe(data3 => {
                                if (data3 != undefined) {
                                    CRMOpportunityDetail = data3;
                                }
                                if (CRMOpportunityDetail.length > 0) {
                                    strCRMStage = CRMOpportunityDetail[0].StrSalesStage;
                                    strCRMStage = strCRMStage.substring(0, 2);
                                    strIsCRMID = 'CRM';
                                }
                                else {
                                    strCRMStage = strCurrentStage;
                                }
                                if (strCurrentStage == '13') {
                                   

                                    this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                }
                                else {
                                    if (strCRMStage == strCurrentStage) {
                                        if (ObjOpportunity.RpmStageID == '10' || ObjOpportunity.RpmStageID == '11'
                                            || ObjOpportunity.RpmStageID == '12' || ObjOpportunity.RpmStageID == '13') {
                                            
                                            this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);

                                        }
                                        else if ((ObjOpportunity.RpmStageID = '0')) {
                                            this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                            
                                        }
                                        else {
                                            if (strStake.trim() == 'BD') {
                                                if (strCRMStage == '1') {
                                                    this.router.navigate(['Stage1', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                    
                                                }
                                                else if (strCRMStage == '2') {
                                                    this.router.navigate(['Stage2', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                    
                                                }
                                                else if (strCRMStage == '3') {
                                                    this.router.navigate(['Stage3', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                   
                                                }
                                                else if (strCRMStage == '4') {
                                                    this.router.navigate(['Stage4', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                    
                                                }
                                                else if (strCRMStage == '5') {
                                                    this.router.navigate(['Stage5', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                    
                                                }
                                                else if (strCRMStage == '6') {
                          this.router.navigate(['Stage6', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                    
                                                }
                                                else if (strCRMStage == '7') {
                                                    this.router.navigate(['Stage7', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                    
                                                }
                                                else if (strCRMStage == '8') {
                                                    this.router.navigate(['Stage8', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                   
                                                }
                                                else if (strCRMStage == '9') {
                                                    this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                    
                                                }
                                            }
                                            else if (strStake.trim() == 'IT') {
                                                this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                
                                            }
                                            
                                        }
                                    }
                                    else {
                                        let objCreateNewOpportunity: any;
                                        let Stakeholdopportunity: INewOpportunity[] = new Array();
                                        let dstGoResult: string;
                                        if (strIsCRMID == 'CRM') {
                                            objCreateNewOpportunity =
                                                {
                                                    OpportunityId: ObjOpportunity.StrOpportunityId,
                                                    EmpId: 'CRM',
                                                    CurrentStageID: strCurrentStage,
                                                    NextStageID: strCRMStage,
                                                }
                                        }
                                        else {
                                            objCreateNewOpportunity =
                                                {
                                                    OpportunityId: ObjOpportunity.StrOpportunityId,
                                                    EmpId: this.strUserId,
                                                    CurrentStageID: strCurrentStage,
                                                    NextStageID: strCRMStage,
                                                }
                                        }
                                        this.presalesService.ProceedNextStage(objCreateNewOpportunity).subscribe(data10 => {
                                            dstGoResult = '';
                                            if (data10 != undefined) {
                                                Stakeholdopportunity = data10;
                                            }
                                            if (Stakeholdopportunity.length > 0) {
                                                dstGoResult = Stakeholdopportunity[0].StakeHolder;
                                            }
                                            if (strCurrentStage == '0' || strCurrentStage == '1' || strCurrentStage == '2' || strCurrentStage == '3' || dstGoResult == '1') {
                                                if (strCRMStage == '10' || strCRMStage == '11' || strCRMStage == '12' || strCRMStage == '13') {
                                                    this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);

                                                   
                                                }
                                                else if (strCRMStage == '0') {
                                                    this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                    
                                                }
                                                else {
                                                    if (strStake.trim() == 'BD') {
                                                        if (strCRMStage == '1') {
                                                            this.router.navigate(['Stage1', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                        else if (strCRMStage == '2') {
                                                            this.router.navigate(['Stage2', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                           
                                                        }
                                                        else if (strCRMStage == '3') {
                                                            this.router.navigate(['Stage3', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                        else if (strCRMStage == '4') {
                                                            this.router.navigate(['Stage4', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                        else if (strCRMStage == '5') {
                                                            this.router.navigate(['Stage5', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                        else if (strCRMStage == '6') {
                              this.router.navigate(['Stage6', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                        else if (strCRMStage == '7') {
                                                            this.router.navigate(['Stage7', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                           
                                                        }
                                                        else if (strCRMStage == '8') {
                                                            this.router.navigate(['Stage8', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                        else if (strCRMStage == '9') {
                                                            this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                           
                                                        }
                                                    }
                                                    else if (strStake.trim() == 'IT') {
                                                        this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                        
                                                    }
                                                }
                                            }
                                            else {
                                                if (Stakeholdopportunity.length > 0) {
                                                    if (ObjOpportunity.RpmStageID == '10' || ObjOpportunity.RpmStageID == '11'
                                                        || ObjOpportunity.RpmStageID == '12' || ObjOpportunity.RpmStageID == '13') {
                                                        this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                                        
                                                    }
                                                    else if (ObjOpportunity.RpmStageID == '0') {
                                                        this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                       
                                                    }
                                                    else {
                                                        if (strStake.trim() == 'BD') {
                                                            if (ObjOpportunity.RpmStageID == '1') {
                                                                this.router.navigate(['Stage1', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '2') {
                                                                this.router.navigate(['Stage2', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                               
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '3') {
                                                                this.router.navigate(['Stage3', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                               
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '4') {
                                                                this.router.navigate(['Stage4', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '5') {
                                                                this.router.navigate(['Stage5', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '6') {
                                                                this.router.navigate(['Stage6', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '7') {
                                                                this.router.navigate(['Stage7', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '8') {
                                                                this.router.navigate(['Stage8', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (ObjOpportunity.RpmStageID == '9') {
                                                                this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                               
                                                            }
                                                        }
                                                        else if (strStake.trim() == 'IT') {
                                                            this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                    }
                                                }
                                                else {
                                                    objCreateNewOpportunity =
                                                        {
                                                            OpportunityId: ObjOpportunity.StrOpportunityId,
                                                            EmpId: this.strUserId,
                                                            CurrentStageID: strCurrentStage,
                                                            NextStageID: strCRMStage,
                                                        }
                                                    this.presalesService.UpdateOpportunityStage(objCreateNewOpportunity).subscribe(data6 => {
                                                    });
                                                    if (strCRMStage == '10' || strCRMStage == '11' || strCRMStage == '12' || strCRMStage == '13') {
                                                        this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                                        
                                                    }
                                                    else if (strCRMStage == '0') {
                                                        this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                        
                                                    }
                                                    else {
                                                        if (strStake.trim() == 'BD') {
                                                            if (strCRMStage == '1') {
                                                                this.router.navigate(['Stage1', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '2') {
                                                                this.router.navigate(['Stage2', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '3') {
                                                                this.router.navigate(['Stage3', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '4') {
                                                                this.router.navigate(['Stage4', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '5') {
                                                                this.router.navigate(['Stage5', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '6') {
                                                                this.router.navigate(['Stage6', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '7') {
                                                                this.router.navigate(['Stage7', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '8') {
                                                                this.router.navigate(['Stage8', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '9') {
                                                                this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                        }
                                                        else if (strStake.trim() == 'IT') {
                                                            this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                    }
                                                }
                                            }
                                        });
                                    }
                                }
                            });
                        });
                    }
                }
                else {
                    let UserLogin: string;
                    UserLogin = this.strUserId;
                    if (CheckDetails[0].StrDealOwner1 != UserLogin && CheckDetails[0].StrValueBps != UserLogin &&
                        CheckDetails[0].StrGeoSalesOwner != UserLogin && CheckDetails[0].StrAccountSalesOnwer != UserLogin
                        && CheckDetails[0].StrOnsiteOnwer != UserLogin && CheckDetails[0].StrTMSOLEmpNO != UserLogin
                        && CheckDetails[0].StrOffshoreBDLead != UserLogin && CheckDetails[0].StrDealOwner2 != UserLogin) {
                        this.messages = ValidationMessage.ERR_NOTAUTHORISED + ObjOpportunity.StrOpportunityId + " to a Unit to proceed further";
                        this.messageType = "Danger";
                        
                    }
                    else {
                        if (ObjOpportunity.UnitId == '0') {
                            this.messages = ValidationMessage.REQ_TAGOPPORTUNITY + ObjOpportunity.StrOpportunityId + ValidationMessage.REQ_UNITFURTHER;
                            this.messageType = "Danger";
                        }
                        else {
                            if (ObjOpportunity.StrOppView == 'No') {
                                this.presalesService.UpdateCRMOppViewed(ObjOpportunity.StrOpportunityId).subscribe(data1 => {
                                    CRMOppView = data1;
                                });
                            }
                            this.presalesService.GetCurrentStage(ObjOpportunity.StrOpportunityId).subscribe(data2 => {
                                if (data2 != undefined) {
                                    CurrentStageList = data2;
                                }
                                if (CurrentStageList.length > 0) {
                                    
                                    strCurrentStage = CurrentStageList[0].StrStageID.toString();

                                }
                                this.presalesService.GetCRMOppStageDetails(ObjOpportunity.StrOpportunityId).subscribe(data3 => {
                                    if (data3 != undefined) {
                                        CRMOpportunityDetail = data3;
                                    }
                                    if (CRMOpportunityDetail.length > 0) {
                                        strCRMStage = CRMOpportunityDetail[0].StrSalesStage;
                                        strCRMStage = strCRMStage.substring(0, 2);
                                        strIsCRMID = 'CRM';
                                    }
                                    else {
                                        strCRMStage = strCurrentStage;
                                    }
                                    if (strCurrentStage == '13') {
                                        this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                       
                                    }
                                    else {
                                        if (strCRMStage == strCurrentStage) {
                                            if (ObjOpportunity.RpmStageID == '10' || ObjOpportunity.RpmStageID == '11'
                                                || ObjOpportunity.RpmStageID == '12' || ObjOpportunity.RpmStageID == '13') {
                                                this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                                
                                            }
                                            else if (ObjOpportunity.RpmStageID == '0') {
                                                this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                            }
                                            else {
                                                if (strStake.trim() == 'BD') {
                                                    if (strCRMStage == '1') {
                                                        this.router.navigate(['Stage1', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                        
                                                    }
                                                    else if (strCRMStage == '2') {
                                                        this.router.navigate(['Stage2', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                        
                                                    }
                                                    else if (strCRMStage == '3') {
                                                        this.router.navigate(['Stage3', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                       
                                                    }
                                                    else if (strCRMStage == '4') {
                                                        this.router.navigate(['Stage4', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                        
                                                    }
                                                    else if (strCRMStage == '5') {
                                                        this.router.navigate(['Stage5', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                        
                                                    }
                                                    else if (strCRMStage == '6') {
                                                        this.router.navigate(['Stage6', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                       
                                                    }
                                                    else if (strCRMStage == '7') {
                                                        this.router.navigate(['Stage7', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                        
                                                    }
                                                    else if (strCRMStage == '8') {
                                                        this.router.navigate(['Stage8', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                        
                                                    }
                                                    else if (strCRMStage == '9') {
                                                        this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                        
                                                    }
                                                }
                                                else if (strStake.trim() == 'IT') {
                                                    this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                    
                                                }
                                                
                                            }
                                        }
                                        else {
                                            let objCreateNewOpportunity: any;
                                            let Stakeholdopportunity: INewOpportunity[] = new Array();
                                            let dstGoResult: string;
                                            if (strIsCRMID == 'CRM') {
                                                objCreateNewOpportunity =
                                                    {
                                                        OpportunityId: ObjOpportunity.StrOpportunityId,
                                                        EmpId: 'CRM',
                                                        CurrentStageID: strCurrentStage,
                                                        NextStageID: strCRMStage,
                                                    }
                                            }
                                            else {
                                                objCreateNewOpportunity =
                                                    {
                                                        OpportunityId: ObjOpportunity.StrOpportunityId,
                                                        EmpId: this.strUserId,
                                                        CurrentStageID: strCurrentStage,
                                                        NextStageID: strCRMStage,
                                                    }
                                            }
                                            this.presalesService.ProceedNextStage(objCreateNewOpportunity).subscribe(data10 => {
                                                Stakeholdopportunity = data10;
                                                dstGoResult = Stakeholdopportunity[0].StakeHolder;
                                                if (strCurrentStage == '0' || strCurrentStage == '1' || strCurrentStage == '2' || strCurrentStage == '3' ||
                                                    dstGoResult == '1') {
                                                    if (strCRMStage == '10' || strCRMStage == '11' || strCRMStage == '12' || strCRMStage == '13') {
                                                        this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                                       
                                                    }
                                                    else if (strCRMStage == '0') {
                                                        this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                       
                                                    }
                                                    else {
                                                        if (strStake.trim() == 'BD') {
                                                            if (strCRMStage == '1') {
                                                                this.router.navigate(['Stage1', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '2') {
                                                                this.router.navigate(['Stage2', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '3') {
                                                                this.router.navigate(['Stage3', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '4') {
                                                                this.router.navigate(['Stage4', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '5') {
                                                                this.router.navigate(['Stage5', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '6') {
                                                                this.router.navigate(['Stage6', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '7') {
                                                                this.router.navigate(['Stage7', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '8') {
                                                                this.router.navigate(['Stage8', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                            else if (strCRMStage == '9') {
                                                                this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                        }
                                                        else if (strStake.trim() == 'IT') {
                                                            this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                    }
                                                }
                                                else {
                                                    if (Stakeholdopportunity.length > 0) {
                                                        if (ObjOpportunity.RpmStageID == '10' || ObjOpportunity.RpmStageID == '11'
                                                            || ObjOpportunity.RpmStageID == '12' || ObjOpportunity.RpmStageID == '13') {
                                                            this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                                            
                                                        }
                                                        else if (ObjOpportunity.RpmStageID == '0') {
                                                            this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                            
                                                        }
                                                        else {
                                                            if (strStake.trim() == 'BD') {
                                                                if (ObjOpportunity.RpmStageID == '1') {
                                                                    this.router.navigate(['Stage1', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                   
                                                                }
                                                                else if (ObjOpportunity.RpmStageID == '2') {
                                                                    this.router.navigate(['Stage2', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (ObjOpportunity.RpmStageID == '3') {
                                                                    this.router.navigate(['Stage3', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (ObjOpportunity.RpmStageID == '4') {
                                                                    this.router.navigate(['Stage4', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (ObjOpportunity.RpmStageID == '5') {
                                                                    this.router.navigate(['Stage5', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                   
                                                                }
                                                                else if (ObjOpportunity.RpmStageID == '6') {
                                                                    this.router.navigate(['Stage6', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (ObjOpportunity.RpmStageID == '7') {
                                                                    this.router.navigate(['Stage7', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (ObjOpportunity.RpmStageID == '8') {
                                                                    this.router.navigate(['Stage8', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (ObjOpportunity.RpmStageID == '9') {
                                                                    this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                    
                                                                }
                                                            }
                                                            else if (strStake.trim() == 'IT') {
                                                                this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);

                                                                
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        objCreateNewOpportunity =
                                                            {
                                                                OpportunityId: ObjOpportunity.StrOpportunityId,
                                                                EmpId: this.strUserId,
                                                                CurrentStageID: strCurrentStage,
                                                                NextStageID: strCRMStage,
                                                            }
                                                        this.presalesService.UpdateOpportunityStage(objCreateNewOpportunity).subscribe(data6 => {
                                                        });
                                                        if (strCRMStage == '10' || strCRMStage == '11' || strCRMStage == '12' || strCRMStage == '13') {
                                                            this.router.navigate(['OnHold', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)), strRemark: (btoa("disable")) }]);
                                                           

                                                        }
                                                        else if (strCRMStage == '0') {
                                                            this.router.navigate(['Stage0', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                           

                                                        }
                                                        else {
                                                            if (strStake.trim() == 'BD') {
                                                                if (strCRMStage == '1') {
                                                                    this.router.navigate(['Stage1', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (strCRMStage == '2') {
                                                                    this.router.navigate(['Stage2', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (strCRMStage == '3') {
                                                                    this.router.navigate(['Stage3', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (strCRMStage == '4') {
                                                                    this.router.navigate(['Stage4', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                   
                                                                }
                                                                else if (strCRMStage == '5') {
                                                                    this.router.navigate(['Stage5', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (strCRMStage == '6') {
                                  this.router.navigate(['Stage6', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                   
                                                                }
                                                                else if (strCRMStage == '7') {
                                                                    this.router.navigate(['Stage7', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (strCRMStage == '8') {
                                                                    this.router.navigate(['Stage8', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                    
                                                                }
                                                                else if (strCRMStage == '9') {
                                                                    this.router.navigate(['Stage9', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                   
                                                                }
                                                            }
                                                            else if (strStake.trim() == 'IT') {
                                                                this.router.navigate(['Stages', { strOppId: (btoa(ObjOpportunity.StrOpportunityId)), strStage: btoa(String(strCurrentStage)), strStake: btoa(String(this.strStake)) }]);
                                                                
                                                            }
                                                        }
                                                    }
                                                }
                                            });
                                        }
                                    }
                                });
                            });
                        }
                    }
                }
            }
        });
    }
}
