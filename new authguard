import { Injectable } from '@angular/core';
import { CanActivate,Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
import { Observable } from 'rxjs/Observable';
import { CookieService } from 'ngx-cookie-service';
import { GlobalEventsManager }from '../GlobalEventsManager';
import {Http, Response,Headers} from "@angular/http";
import {Constant} from '../Constant';

@Injectable()
export class AuthGuard implements CanActivate {
  constructor(private router: Router,private cookieService: CookieService,
    private globalEventsManager: GlobalEventsManager, private http: Http, private constant: Constant) { }
      showNavBar =false;
      

  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) 
      {

        

              let res: any[];
              let menures: any[];
              this.http.get(this.constant.checkSessionURL)
                  .map((res: Response) => res)
                  .subscribe(res => {
                  
                    
                    if (res["_body"] != "True") {


                      this.showNavBar = false;
                      this.globalEventsManager.showNavBar(false);
                      window.location.href = this.constant.loginURL;
                      return this.showNavBar;
                    }

                    else {
                      let menuItem = state.url.substr(1, state.url.length);
                      if (menuItem.startsWith('Stage') || menuItem.startsWith('OnHold')) {

                        if (this.cookieService.get('userId') && this.cookieService.get('userUnit') && this.cookieService.get('userRole')) {

                          this.showNavBar = true;
                          this.globalEventsManager.showNavBar(true);
                          return this.showNavBar;
                        } else {
                          this.globalEventsManager.showNavBar(false);
                          window.location.href = this.constant.session;
                          this.showNavBar = false;
                          return this.showNavBar;
                        }

                      } else {
                        this.http.get(this.constant.checkMenuAccess + "?menulink=" + menuItem)
                          .map((menures: Response) => menures.json())
                          .subscribe(menures => {

                            if (menures.result == "Authorized") {

                              if (this.cookieService.get('userId') && this.cookieService.get('userUnit') && this.cookieService.get('userRole')) {

                                this.showNavBar = true;
                                this.globalEventsManager.showNavBar(true);
                                return this.showNavBar;
                              } else {
                                this.globalEventsManager.showNavBar(false);
                                window.location.href = this.constant.session;
                                this.showNavBar = false;
                                return this.showNavBar;
                              }
                            }
                            else {
                              this.globalEventsManager.showNavBar(false);
                              window.location.href = this.constant.unAuthorizeURL;
                              this.showNavBar = false;
                              return this.showNavBar;
                            }

                          })
                      }
                    }
                   
                 });
        
           return this.showNavBar;
               
              
         
  
         
          
        
}}
